{
    "event": "suiteStart",
    "suite": "api",
    "tests": 746
}{
    "event": "testStart",
    "suite": "api",
    "test": "view a collection (CG.Order.Test.Api.Cest.Order.AlertCest.viewCollection)"
}{
    "event": "test",
    "suite": "api",
    "test": "view a collection (CG.Order.Test.Api.Cest.Order.AlertCest.viewCollection)",
    "status": "pass",
    "time": 0.096841812133789,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "view a collection by page (CG.Order.Test.Api.Cest.Order.AlertCest.checkPagination)"
}{
    "event": "test",
    "suite": "api",
    "test": "view a collection by page (CG.Order.Test.Api.Cest.Order.AlertCest.checkPagination)",
    "status": "pass",
    "time": 0.62824201583862,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "view a collection by page (CG.Order.Test.Api.Cest.Order.AlertCest.checkCollectionCache)"
}{
    "event": "test",
    "suite": "api",
    "test": "view a collection by page (CG.Order.Test.Api.Cest.Order.AlertCest.checkCollectionCache)",
    "status": "pass",
    "time": 0.76369786262512,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "has filters (CG.Order.Test.Api.Cest.Order.AlertCest.hasFilters)"
}{
    "event": "test",
    "suite": "api",
    "test": "has filters (CG.Order.Test.Api.Cest.Order.AlertCest.hasFilters)",
    "status": "pass",
    "time": 0.30128288269043,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check filters (CG.Order.Test.Api.Cest.Order.AlertCest.checkFilters)"
}{
    "event": "test",
    "suite": "api",
    "test": "check filters (CG.Order.Test.Api.Cest.Order.AlertCest.checkFilters)",
    "status": "pass",
    "time": 1.2786829471588,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check multi filters (CG.Order.Test.Api.Cest.Order.AlertCest.checkMultiFilters)"
}{
    "event": "test",
    "suite": "api",
    "test": "check multi filters (CG.Order.Test.Api.Cest.Order.AlertCest.checkMultiFilters)",
    "status": "pass",
    "time": 0.41816997528076,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "create entity (CG.Order.Test.Api.Cest.Order.AlertCest.createEntity)"
}{
    "event": "test",
    "suite": "api",
    "test": "create entity (CG.Order.Test.Api.Cest.Order.AlertCest.createEntity)",
    "status": "pass",
    "time": 0.27408313751221,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "create a new entity (CG.Order.Test.Api.Cest.Order.AlertCest.createEntityThenGet)"
}{
    "event": "test",
    "suite": "api",
    "test": "create a new entity (CG.Order.Test.Api.Cest.Order.AlertCest.createEntityThenGet)",
    "status": "pass",
    "time": 0.44183015823364,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "create a new entity (CG.Order.Test.Api.Cest.Order.AlertCest.createEntityThenGetCollection)"
}{
    "event": "test",
    "suite": "api",
    "test": "create a new entity (CG.Order.Test.Api.Cest.Order.AlertCest.createEntityThenGetCollection)",
    "status": "pass",
    "time": 0.45539212226868,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "create entity then get collection with filters (CG.Order.Test.Api.Cest.Order.AlertCest.createEntityThenGetCollectionWithFilters)"
}{
    "event": "test",
    "suite": "api",
    "test": "create entity then get collection with filters (CG.Order.Test.Api.Cest.Order.AlertCest.createEntityThenGetCollectionWithFilters)",
    "status": "pass",
    "time": 0.24673700332642,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "create entity put entity then get collection (CG.Order.Test.Api.Cest.Order.AlertCest.createEntityPutEntityThenGetCollection)"
}{
    "event": "test",
    "suite": "api",
    "test": "create entity put entity then get collection (CG.Order.Test.Api.Cest.Order.AlertCest.createEntityPutEntityThenGetCollection)",
    "status": "pass",
    "time": 0.30092406272888,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check i can not create a entity with empty data (CG.Order.Test.Api.Cest.Order.AlertCest.createEmptyEntity)"
}{
    "event": "test",
    "suite": "api",
    "test": "check i can not create a entity with empty data (CG.Order.Test.Api.Cest.Order.AlertCest.createEmptyEntity)",
    "status": "pass",
    "time": 0.35962390899658,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check i can not create a entity with invalid data (CG.Order.Test.Api.Cest.Order.AlertCest.createInvalidEntity)"
}{
    "event": "test",
    "suite": "api",
    "test": "check i can not create a entity with invalid data (CG.Order.Test.Api.Cest.Order.AlertCest.createInvalidEntity)",
    "status": "pass",
    "time": 0.36219191551208,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check i can not create a new entity if i send additional fields (CG.Order.Test.Api.Cest.Order.AlertCest.createEntityWithAdditionalFields)"
}{
    "event": "test",
    "suite": "api",
    "test": "check i can not create a new entity if i send additional fields (CG.Order.Test.Api.Cest.Order.AlertCest.createEntityWithAdditionalFields)",
    "status": "pass",
    "time": 0.34096693992615,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "create entity with invalid date range (CG.Order.Test.Api.Cest.Order.AlertCest.createEntityWithInvalidDateRange)"
}{
    "event": "test",
    "suite": "api",
    "test": "create entity with invalid date range (CG.Order.Test.Api.Cest.Order.AlertCest.createEntityWithInvalidDateRange)",
    "status": "pass",
    "time": 0.26811194419861,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "test single date filter (CG.Order.Test.Api.Cest.Order.AlertCest.testSingleDateFilter)"
}{
    "event": "test",
    "suite": "api",
    "test": "test single date filter (CG.Order.Test.Api.Cest.Order.AlertCest.testSingleDateFilter)",
    "status": "pass",
    "time": 0.27889680862427,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "test date range filter (CG.Order.Test.Api.Cest.Order.AlertCest.testDateRangeFilter)"
}{
    "event": "test",
    "suite": "api",
    "test": "test date range filter (CG.Order.Test.Api.Cest.Order.AlertCest.testDateRangeFilter)",
    "status": "pass",
    "time": 0.26724910736084,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "test range filters (CG.Order.Test.Api.Cest.Order.AlertCest.testRangeFilters)"
}{
    "event": "test",
    "suite": "api",
    "test": "test range filters (CG.Order.Test.Api.Cest.Order.AlertCest.testRangeFilters)",
    "status": "pass",
    "time": 0.27415800094604,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "test array filters dont accept string (CG.Order.Test.Api.Cest.Order.AlertCest.testArrayFiltersDontAcceptString)"
}{
    "event": "test",
    "suite": "api",
    "test": "test array filters dont accept string (CG.Order.Test.Api.Cest.Order.AlertCest.testArrayFiltersDontAcceptString)",
    "status": "pass",
    "time": 0.25408101081848,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "test string filters dont accept array (CG.Order.Test.Api.Cest.Order.AlertCest.testStringFiltersDontAcceptArray)"
}{
    "event": "test",
    "suite": "api",
    "test": "test string filters dont accept array (CG.Order.Test.Api.Cest.Order.AlertCest.testStringFiltersDontAcceptArray)",
    "status": "pass",
    "time": 0.27444505691528,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check search term filters (CG.Order.Test.Api.Cest.Order.AlertCest.checkSearchTermFilters)"
}{
    "event": "test",
    "suite": "api",
    "test": "check search term filters (CG.Order.Test.Api.Cest.Order.AlertCest.checkSearchTermFilters)",
    "status": "pass",
    "time": 0.25352787971497,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "see a resource endpoint contains hal (CG.Order.Test.Api.Cest.Order.AlertCest.viewInHal)"
}{
    "event": "test",
    "suite": "api",
    "test": "see a resource endpoint contains hal (CG.Order.Test.Api.Cest.Order.AlertCest.viewInHal)",
    "status": "pass",
    "time": 0.38307499885559,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check only the allowed methods are allowed (CG.Order.Test.Api.Cest.Order.AlertCest.checkAllowedMethods)"
}{
    "event": "test",
    "suite": "api",
    "test": "check only the allowed methods are allowed (CG.Order.Test.Api.Cest.Order.AlertCest.checkAllowedMethods)",
    "status": "pass",
    "time": 0.44865107536316,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check the up link is set as the parents url (CG.Order.Test.Api.Cest.Order.AlertCest.checkUplink)"
}{
    "event": "test",
    "suite": "api",
    "test": "check the up link is set as the parents url (CG.Order.Test.Api.Cest.Order.AlertCest.checkUplink)",
    "status": "pass",
    "time": 0.36054396629333,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check headers for head request and that body is empty (CG.Order.Test.Api.Cest.Order.AlertCest.checkHeadRequest)"
}{
    "event": "test",
    "suite": "api",
    "test": "check headers for head request and that body is empty (CG.Order.Test.Api.Cest.Order.AlertCest.checkHeadRequest)",
    "status": "pass",
    "time": 0.46018314361572,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "create entity then get collection multiple times (CG.Order.Test.Api.Cest.Order.AlertCest.createEntityThenGetCollectionMultipleTimes)"
}{
    "event": "test",
    "suite": "api",
    "test": "create entity then get collection multiple times (CG.Order.Test.Api.Cest.Order.AlertCest.createEntityThenGetCollectionMultipleTimes)",
    "status": "pass",
    "time": 0.28666520118713,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "create entity then get collection multiple times from existing (CG.Order.Test.Api.Cest.Order.AlertCest.createEntityThenGetCollectionMultipleTimesFromExisting)"
}{
    "event": "test",
    "suite": "api",
    "test": "create entity then get collection multiple times from existing (CG.Order.Test.Api.Cest.Order.AlertCest.createEntityThenGetCollectionMultipleTimesFromExisting)",
    "status": "pass",
    "time": 0.32269906997681,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "view a collection (CG.Order.Test.Api.Cest.Order.AlertCest.viewCollectionAll)"
}{
    "event": "test",
    "suite": "api",
    "test": "view a collection (CG.Order.Test.Api.Cest.Order.AlertCest.viewCollectionAll)",
    "status": "pass",
    "time": 0.390380859375,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "view a collection (CG.Order.Test.Api.Cest.Order.AlertCest.viewCollectionZeroLimit)"
}{
    "event": "test",
    "suite": "api",
    "test": "view a collection (CG.Order.Test.Api.Cest.Order.AlertCest.viewCollectionZeroLimit)",
    "status": "pass",
    "time": 0.35034489631653,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check filters pagination (CG.Order.Test.Api.Cest.Order.AlertCest.checkFiltersPagination)"
}{
    "event": "test",
    "suite": "api",
    "test": "check filters pagination (CG.Order.Test.Api.Cest.Order.AlertCest.checkFiltersPagination)",
    "status": "pass",
    "time": 1.5144698619843,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "test timestamp filter (CG.Order.Test.Api.Cest.Order.AlertCest.testTimestampFilter)"
}{
    "event": "test",
    "suite": "api",
    "test": "test timestamp filter (CG.Order.Test.Api.Cest.Order.AlertCest.testTimestampFilter)",
    "status": "pass",
    "time": 0.30987215042114,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "test timestamp range filters (CG.Order.Test.Api.Cest.Order.AlertCest.testTimestampRangeFilters)"
}{
    "event": "test",
    "suite": "api",
    "test": "test timestamp range filters (CG.Order.Test.Api.Cest.Order.AlertCest.testTimestampRangeFilters)",
    "status": "pass",
    "time": 0.2797589302063,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "view the primary entity (CG.Order.Test.Api.Cest.Order.AlertEntityCest.viewPrimaryEntity)"
}{
    "event": "test",
    "suite": "api",
    "test": "view the primary entity (CG.Order.Test.Api.Cest.Order.AlertEntityCest.viewPrimaryEntity)",
    "status": "pass",
    "time": 0.37109398841858,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "view the secondary entity (CG.Order.Test.Api.Cest.Order.AlertEntityCest.viewSecondaryEntity)"
}{
    "event": "test",
    "suite": "api",
    "test": "view the secondary entity (CG.Order.Test.Api.Cest.Order.AlertEntityCest.viewSecondaryEntity)",
    "status": "pass",
    "time": 0.34433007240295,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check i can not view a non existent entity (CG.Order.Test.Api.Cest.Order.AlertEntityCest.viewNonExistentEntity)"
}{
    "event": "test",
    "suite": "api",
    "test": "check i can not view a non existent entity (CG.Order.Test.Api.Cest.Order.AlertEntityCest.viewNonExistentEntity)",
    "status": "pass",
    "time": 0.36536121368408,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "update primary entity (CG.Order.Test.Api.Cest.Order.AlertEntityCest.updatePrimaryEntity)"
}{
    "event": "test",
    "suite": "api",
    "test": "update primary entity (CG.Order.Test.Api.Cest.Order.AlertEntityCest.updatePrimaryEntity)",
    "status": "pass",
    "time": 0.28544998168945,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "update primary entity then get (CG.Order.Test.Api.Cest.Order.AlertEntityCest.updatePrimaryEntityThenGet)"
}{
    "event": "test",
    "suite": "api",
    "test": "update primary entity then get (CG.Order.Test.Api.Cest.Order.AlertEntityCest.updatePrimaryEntityThenGet)",
    "status": "pass",
    "time": 0.34378004074097,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "update primary entity with empty data (CG.Order.Test.Api.Cest.Order.AlertEntityCest.updatePrimaryEntityWithEmptyData)"
}{
    "event": "test",
    "suite": "api",
    "test": "update primary entity with empty data (CG.Order.Test.Api.Cest.Order.AlertEntityCest.updatePrimaryEntityWithEmptyData)",
    "status": "pass",
    "time": 0.29827094078064,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "update primary entity with invalid data (CG.Order.Test.Api.Cest.Order.AlertEntityCest.updatePrimaryEntityWithInvalidData)"
}{
    "event": "test",
    "suite": "api",
    "test": "update primary entity with invalid data (CG.Order.Test.Api.Cest.Order.AlertEntityCest.updatePrimaryEntityWithInvalidData)",
    "status": "pass",
    "time": 0.25087809562683,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "update primary entity with additional fields (CG.Order.Test.Api.Cest.Order.AlertEntityCest.updatePrimaryEntityWithAdditionalFields)"
}{
    "event": "test",
    "suite": "api",
    "test": "update primary entity with additional fields (CG.Order.Test.Api.Cest.Order.AlertEntityCest.updatePrimaryEntityWithAdditionalFields)",
    "status": "pass",
    "time": 0.28199005126953,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check i delete the primary entity (CG.Order.Test.Api.Cest.Order.AlertEntityCest.deletePrimaryEntity)"
}{
    "event": "test",
    "suite": "api",
    "test": "check i delete the primary entity (CG.Order.Test.Api.Cest.Order.AlertEntityCest.deletePrimaryEntity)",
    "status": "pass",
    "time": 0.40624284744263,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check i delete the primary entity (CG.Order.Test.Api.Cest.Order.AlertEntityCest.deletePrimaryEntityWithGet)"
}{
    "event": "test",
    "suite": "api",
    "test": "check i delete the primary entity (CG.Order.Test.Api.Cest.Order.AlertEntityCest.deletePrimaryEntityWithGet)",
    "status": "pass",
    "time": 0.4967839717865,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check i delete the primary entity (CG.Order.Test.Api.Cest.Order.AlertEntityCest.deletePrimaryEntityWithGetCollection)"
}{
    "event": "test",
    "suite": "api",
    "test": "check i delete the primary entity (CG.Order.Test.Api.Cest.Order.AlertEntityCest.deletePrimaryEntityWithGetCollection)",
    "status": "pass",
    "time": 0.44676804542542,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check i can not delete a non existent entity (CG.Order.Test.Api.Cest.Order.AlertEntityCest.deleteNonExistentEntity)"
}{
    "event": "test",
    "suite": "api",
    "test": "check i can not delete a non existent entity (CG.Order.Test.Api.Cest.Order.AlertEntityCest.deleteNonExistentEntity)",
    "status": "pass",
    "time": 0.3466489315033,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check entity embed (CG.Order.Test.Api.Cest.Order.AlertEntityCest.checkEntityEmbed)"
}{
    "event": "test",
    "suite": "api",
    "test": "check entity embed (CG.Order.Test.Api.Cest.Order.AlertEntityCest.checkEntityEmbed)",
    "status": "pass",
    "time": 0.28835606575012,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check children endpoints with wrong parent id (CG.Order.Test.Api.Cest.Order.AlertEntityCest.checkChildrenEndpointsWithWrongParentId)"
}{
    "event": "test",
    "suite": "api",
    "test": "check children endpoints with wrong parent id (CG.Order.Test.Api.Cest.Order.AlertEntityCest.checkChildrenEndpointsWithWrongParentId)",
    "status": "pass",
    "time": 0.28710079193115,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check put children endpoints with wrong parent id (CG.Order.Test.Api.Cest.Order.AlertEntityCest.checkPutChildrenEndpointsWithWrongParentId)"
}{
    "event": "test",
    "suite": "api",
    "test": "check put children endpoints with wrong parent id (CG.Order.Test.Api.Cest.Order.AlertEntityCest.checkPutChildrenEndpointsWithWrongParentId)",
    "status": "pass",
    "time": 0.23276901245117,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "see a resource endpoint contains hal (CG.Order.Test.Api.Cest.Order.AlertEntityCest.viewInHal)"
}{
    "event": "test",
    "suite": "api",
    "test": "see a resource endpoint contains hal (CG.Order.Test.Api.Cest.Order.AlertEntityCest.viewInHal)",
    "status": "pass",
    "time": 0.3612220287323,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check only the allowed methods are allowed (CG.Order.Test.Api.Cest.Order.AlertEntityCest.checkAllowedMethods)"
}{
    "event": "test",
    "suite": "api",
    "test": "check only the allowed methods are allowed (CG.Order.Test.Api.Cest.Order.AlertEntityCest.checkAllowedMethods)",
    "status": "pass",
    "time": 0.42201685905457,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check the up link is set as the parents url (CG.Order.Test.Api.Cest.Order.AlertEntityCest.checkUplink)"
}{
    "event": "test",
    "suite": "api",
    "test": "check the up link is set as the parents url (CG.Order.Test.Api.Cest.Order.AlertEntityCest.checkUplink)",
    "status": "pass",
    "time": 0.36866903305054,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check headers for head request and that body is empty (CG.Order.Test.Api.Cest.Order.AlertEntityCest.checkHeadRequest)"
}{
    "event": "test",
    "suite": "api",
    "test": "check headers for head request and that body is empty (CG.Order.Test.Api.Cest.Order.AlertEntityCest.checkHeadRequest)",
    "status": "pass",
    "time": 0.45381307601929,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "has e tag header (CG.Order.Test.Api.Cest.Order.AlertEntityCest.hasETagHeader)"
}{
    "event": "test",
    "suite": "api",
    "test": "has e tag header (CG.Order.Test.Api.Cest.Order.AlertEntityCest.hasETagHeader)",
    "status": "pass",
    "time": 0.34223699569702,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "get a 304 when i send the etag on a second get request (CG.Order.Test.Api.Cest.Order.AlertEntityCest.sendETagGet304)"
}{
    "event": "test",
    "suite": "api",
    "test": "get a 304 when i send the etag on a second get request (CG.Order.Test.Api.Cest.Order.AlertEntityCest.sendETagGet304)",
    "status": "pass",
    "time": 0.44121479988098,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check that if i send an invalid etag i get the entity (CG.Order.Test.Api.Cest.Order.AlertEntityCest.sendInvalidETagGetNewETag)"
}{
    "event": "test",
    "suite": "api",
    "test": "check that if i send an invalid etag i get the entity (CG.Order.Test.Api.Cest.Order.AlertEntityCest.sendInvalidETagGetNewETag)",
    "status": "pass",
    "time": 0.36131381988525,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "update the primary entity with matching etag (CG.Order.Test.Api.Cest.Order.AlertEntityCest.updateEntityWithETag)"
}{
    "event": "test",
    "suite": "api",
    "test": "update the primary entity with matching etag (CG.Order.Test.Api.Cest.Order.AlertEntityCest.updateEntityWithETag)",
    "status": "pass",
    "time": 0.45872807502747,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "update the primary entity with matching etag then get (CG.Order.Test.Api.Cest.Order.AlertEntityCest.updateEntityWithETagThenGet)"
}{
    "event": "test",
    "suite": "api",
    "test": "update the primary entity with matching etag then get (CG.Order.Test.Api.Cest.Order.AlertEntityCest.updateEntityWithETagThenGet)",
    "status": "pass",
    "time": 0.5368971824646,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "update the primary entity with matching etag and identical data (CG.Order.Test.Api.Cest.Order.AlertEntityCest.updateEntityWithETagAndIdenticalData)"
}{
    "event": "test",
    "suite": "api",
    "test": "update the primary entity with matching etag and identical data (CG.Order.Test.Api.Cest.Order.AlertEntityCest.updateEntityWithETagAndIdenticalData)",
    "status": "pass",
    "time": 0.44370198249817,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check i can't update the primary entity with an invalid etag (CG.Order.Test.Api.Cest.Order.AlertEntityCest.updateEntityWithInvalidETag)"
}{
    "event": "test",
    "suite": "api",
    "test": "check i can't update the primary entity with an invalid etag (CG.Order.Test.Api.Cest.Order.AlertEntityCest.updateEntityWithInvalidETag)",
    "status": "pass",
    "time": 0.40132904052734,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check i can't update the primary entity with an invalid etag and identical data (CG.Order.Test.Api.Cest.Order.AlertEntityCest.updateEntityWithInvalidETagAndIdenticalData)"
}{
    "event": "test",
    "suite": "api",
    "test": "check i can't update the primary entity with an invalid etag and identical data (CG.Order.Test.Api.Cest.Order.AlertEntityCest.updateEntityWithInvalidETagAndIdenticalData)",
    "status": "pass",
    "time": 0.34177184104919,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check getting other entities doesn't cause \"\/order\/1411-10\/alert\/1\"'s etag to change (CG.Order.Test.Api.Cest.Order.AlertEntityCest.checkDuplicateClassNameETagIssue)"
}{
    "event": "test",
    "suite": "api",
    "test": "check getting other entities doesn't cause \"\/order\/1411-10\/alert\/1\"'s etag to change (CG.Order.Test.Api.Cest.Order.AlertEntityCest.checkDuplicateClassNameETagIssue)",
    "status": "pass",
    "time": 2.4436459541321,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "update the primary entity without etag (CG.Order.Test.Api.Cest.Order.AlertEntityCest.updateEntityWithoutEtagShouldFail)"
}{
    "event": "test",
    "suite": "api",
    "test": "update the primary entity without etag (CG.Order.Test.Api.Cest.Order.AlertEntityCest.updateEntityWithoutEtagShouldFail)",
    "status": "pass",
    "time": 0.38148379325867,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "update the primary entity with empty etag (CG.Order.Test.Api.Cest.Order.AlertEntityCest.updateEntityWithEmptyEtagShouldFail)"
}{
    "event": "test",
    "suite": "api",
    "test": "update the primary entity with empty etag (CG.Order.Test.Api.Cest.Order.AlertEntityCest.updateEntityWithEmptyEtagShouldFail)",
    "status": "pass",
    "time": 0.37303590774536,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check put children endpoints with wrong parent idwith e tags (CG.Order.Test.Api.Cest.Order.AlertEntityCest.checkPutChildrenEndpointsWithWrongParentIdwithETags)"
}{
    "event": "test",
    "suite": "api",
    "test": "check put children endpoints with wrong parent idwith e tags (CG.Order.Test.Api.Cest.Order.AlertEntityCest.checkPutChildrenEndpointsWithWrongParentIdwithETags)",
    "status": "pass",
    "time": 0.27432417869568,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "view non existent entity (CG.Order.Test.Api.Cest.Order.ArchiveEntityCest.viewNonExistentEntity)"
}{
    "event": "test",
    "suite": "api",
    "test": "view non existent entity (CG.Order.Test.Api.Cest.Order.ArchiveEntityCest.viewNonExistentEntity)",
    "status": "pass",
    "time": 0.26547503471375,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "view the primary entity (CG.Order.Test.Api.Cest.Order.ArchiveEntityCest.viewPrimaryEntity)"
}{
    "event": "test",
    "suite": "api",
    "test": "view the primary entity (CG.Order.Test.Api.Cest.Order.ArchiveEntityCest.viewPrimaryEntity)",
    "status": "pass",
    "time": 0.37593913078308,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "view the secondary entity (CG.Order.Test.Api.Cest.Order.ArchiveEntityCest.viewSecondaryEntity)"
}{
    "event": "test",
    "suite": "api",
    "test": "view the secondary entity (CG.Order.Test.Api.Cest.Order.ArchiveEntityCest.viewSecondaryEntity)",
    "status": "pass",
    "time": 0.3650689125061,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "update primary entity (CG.Order.Test.Api.Cest.Order.ArchiveEntityCest.updatePrimaryEntity)"
}{
    "event": "test",
    "suite": "api",
    "test": "update primary entity (CG.Order.Test.Api.Cest.Order.ArchiveEntityCest.updatePrimaryEntity)",
    "status": "pass",
    "time": 0.26966905593872,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "update primary entity then get (CG.Order.Test.Api.Cest.Order.ArchiveEntityCest.updatePrimaryEntityThenGet)"
}{
    "event": "test",
    "suite": "api",
    "test": "update primary entity then get (CG.Order.Test.Api.Cest.Order.ArchiveEntityCest.updatePrimaryEntityThenGet)",
    "status": "pass",
    "time": 0.30482387542725,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "update primary entity with empty data (CG.Order.Test.Api.Cest.Order.ArchiveEntityCest.updatePrimaryEntityWithEmptyData)"
}{
    "event": "test",
    "suite": "api",
    "test": "update primary entity with empty data (CG.Order.Test.Api.Cest.Order.ArchiveEntityCest.updatePrimaryEntityWithEmptyData)",
    "status": "pass",
    "time": 0.27752494812012,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "update primary entity with invalid data (CG.Order.Test.Api.Cest.Order.ArchiveEntityCest.updatePrimaryEntityWithInvalidData)"
}{
    "event": "test",
    "suite": "api",
    "test": "update primary entity with invalid data (CG.Order.Test.Api.Cest.Order.ArchiveEntityCest.updatePrimaryEntityWithInvalidData)",
    "status": "pass",
    "time": 0.30408811569214,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "update primary entity with additional fields (CG.Order.Test.Api.Cest.Order.ArchiveEntityCest.updatePrimaryEntityWithAdditionalFields)"
}{
    "event": "test",
    "suite": "api",
    "test": "update primary entity with additional fields (CG.Order.Test.Api.Cest.Order.ArchiveEntityCest.updatePrimaryEntityWithAdditionalFields)",
    "status": "pass",
    "time": 0.30325388908386,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "delete primary entity (CG.Order.Test.Api.Cest.Order.ArchiveEntityCest.deletePrimaryEntity)"
}{
    "event": "test",
    "suite": "api",
    "test": "delete primary entity (CG.Order.Test.Api.Cest.Order.ArchiveEntityCest.deletePrimaryEntity)",
    "status": "pass",
    "time": 0.27525901794434,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "delete primary entity with get (CG.Order.Test.Api.Cest.Order.ArchiveEntityCest.deletePrimaryEntityWithGet)"
}{
    "event": "test",
    "suite": "api",
    "test": "delete primary entity with get (CG.Order.Test.Api.Cest.Order.ArchiveEntityCest.deletePrimaryEntityWithGet)",
    "status": "pass",
    "time": 0.29907011985779,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "delete primary entity with get collection (CG.Order.Test.Api.Cest.Order.ArchiveEntityCest.deletePrimaryEntityWithGetCollection)"
}{
    "event": "test",
    "suite": "api",
    "test": "delete primary entity with get collection (CG.Order.Test.Api.Cest.Order.ArchiveEntityCest.deletePrimaryEntityWithGetCollection)",
    "status": "pass",
    "time": 0.26148104667664,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "delete non existent entity (CG.Order.Test.Api.Cest.Order.ArchiveEntityCest.deleteNonExistentEntity)"
}{
    "event": "test",
    "suite": "api",
    "test": "delete non existent entity (CG.Order.Test.Api.Cest.Order.ArchiveEntityCest.deleteNonExistentEntity)",
    "status": "pass",
    "time": 0.2790379524231,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check entity embed (CG.Order.Test.Api.Cest.Order.ArchiveEntityCest.checkEntityEmbed)"
}{
    "event": "test",
    "suite": "api",
    "test": "check entity embed (CG.Order.Test.Api.Cest.Order.ArchiveEntityCest.checkEntityEmbed)",
    "status": "pass",
    "time": 0.26254606246948,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check children endpoints with wrong parent id (CG.Order.Test.Api.Cest.Order.ArchiveEntityCest.checkChildrenEndpointsWithWrongParentId)"
}{
    "event": "test",
    "suite": "api",
    "test": "check children endpoints with wrong parent id (CG.Order.Test.Api.Cest.Order.ArchiveEntityCest.checkChildrenEndpointsWithWrongParentId)",
    "status": "pass",
    "time": 0.27980399131775,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check put children endpoints with wrong parent id (CG.Order.Test.Api.Cest.Order.ArchiveEntityCest.checkPutChildrenEndpointsWithWrongParentId)"
}{
    "event": "test",
    "suite": "api",
    "test": "check put children endpoints with wrong parent id (CG.Order.Test.Api.Cest.Order.ArchiveEntityCest.checkPutChildrenEndpointsWithWrongParentId)",
    "status": "pass",
    "time": 0.30236387252808,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "see a resource endpoint contains hal (CG.Order.Test.Api.Cest.Order.ArchiveEntityCest.viewInHal)"
}{
    "event": "test",
    "suite": "api",
    "test": "see a resource endpoint contains hal (CG.Order.Test.Api.Cest.Order.ArchiveEntityCest.viewInHal)",
    "status": "pass",
    "time": 0.37145400047302,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check only the allowed methods are allowed (CG.Order.Test.Api.Cest.Order.ArchiveEntityCest.checkAllowedMethods)"
}{
    "event": "test",
    "suite": "api",
    "test": "check only the allowed methods are allowed (CG.Order.Test.Api.Cest.Order.ArchiveEntityCest.checkAllowedMethods)",
    "status": "pass",
    "time": 0.47152280807495,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check the up link is set as the parents url (CG.Order.Test.Api.Cest.Order.ArchiveEntityCest.checkUplink)"
}{
    "event": "test",
    "suite": "api",
    "test": "check the up link is set as the parents url (CG.Order.Test.Api.Cest.Order.ArchiveEntityCest.checkUplink)",
    "status": "pass",
    "time": 0.36475300788879,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check headers for head request and that body is empty (CG.Order.Test.Api.Cest.Order.ArchiveEntityCest.checkHeadRequest)"
}{
    "event": "test",
    "suite": "api",
    "test": "check headers for head request and that body is empty (CG.Order.Test.Api.Cest.Order.ArchiveEntityCest.checkHeadRequest)",
    "status": "pass",
    "time": 0.48979496955872,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "view a collection (CG.Order.Test.Api.Cest.Order.NoteCest.viewCollection)"
}{
    "event": "test",
    "suite": "api",
    "test": "view a collection (CG.Order.Test.Api.Cest.Order.NoteCest.viewCollection)",
    "status": "pass",
    "time": 0.3409571647644,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "view a collection by page (CG.Order.Test.Api.Cest.Order.NoteCest.checkPagination)"
}{
    "event": "test",
    "suite": "api",
    "test": "view a collection by page (CG.Order.Test.Api.Cest.Order.NoteCest.checkPagination)",
    "status": "pass",
    "time": 0.63023805618286,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "view a collection by page (CG.Order.Test.Api.Cest.Order.NoteCest.checkCollectionCache)"
}{
    "event": "test",
    "suite": "api",
    "test": "view a collection by page (CG.Order.Test.Api.Cest.Order.NoteCest.checkCollectionCache)",
    "status": "pass",
    "time": 0.45672202110291,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "has filters (CG.Order.Test.Api.Cest.Order.NoteCest.hasFilters)"
}{
    "event": "test",
    "suite": "api",
    "test": "has filters (CG.Order.Test.Api.Cest.Order.NoteCest.hasFilters)",
    "status": "pass",
    "time": 0.25272798538208,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check filters (CG.Order.Test.Api.Cest.Order.NoteCest.checkFilters)"
}{
    "event": "test",
    "suite": "api",
    "test": "check filters (CG.Order.Test.Api.Cest.Order.NoteCest.checkFilters)",
    "status": "pass",
    "time": 0.24430394172668,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check multi filters (CG.Order.Test.Api.Cest.Order.NoteCest.checkMultiFilters)"
}{
    "event": "test",
    "suite": "api",
    "test": "check multi filters (CG.Order.Test.Api.Cest.Order.NoteCest.checkMultiFilters)",
    "status": "pass",
    "time": 0.30434989929199,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "create entity (CG.Order.Test.Api.Cest.Order.NoteCest.createEntity)"
}{
    "event": "test",
    "suite": "api",
    "test": "create entity (CG.Order.Test.Api.Cest.Order.NoteCest.createEntity)",
    "status": "pass",
    "time": 0.27009606361389,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "create a new entity (CG.Order.Test.Api.Cest.Order.NoteCest.createEntityThenGet)"
}{
    "event": "test",
    "suite": "api",
    "test": "create a new entity (CG.Order.Test.Api.Cest.Order.NoteCest.createEntityThenGet)",
    "status": "pass",
    "time": 0.43401598930359,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "create a new entity (CG.Order.Test.Api.Cest.Order.NoteCest.createEntityThenGetCollection)"
}{
    "event": "test",
    "suite": "api",
    "test": "create a new entity (CG.Order.Test.Api.Cest.Order.NoteCest.createEntityThenGetCollection)",
    "status": "pass",
    "time": 0.46017789840698,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "create entity then get collection with filters (CG.Order.Test.Api.Cest.Order.NoteCest.createEntityThenGetCollectionWithFilters)"
}{
    "event": "test",
    "suite": "api",
    "test": "create entity then get collection with filters (CG.Order.Test.Api.Cest.Order.NoteCest.createEntityThenGetCollectionWithFilters)",
    "status": "pass",
    "time": 0.24761581420898,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "create entity put entity then get collection (CG.Order.Test.Api.Cest.Order.NoteCest.createEntityPutEntityThenGetCollection)"
}{
    "event": "test",
    "suite": "api",
    "test": "create entity put entity then get collection (CG.Order.Test.Api.Cest.Order.NoteCest.createEntityPutEntityThenGetCollection)",
    "status": "pass",
    "time": 0.2800087928772,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check i can not create a entity with empty data (CG.Order.Test.Api.Cest.Order.NoteCest.createEmptyEntity)"
}{
    "event": "test",
    "suite": "api",
    "test": "check i can not create a entity with empty data (CG.Order.Test.Api.Cest.Order.NoteCest.createEmptyEntity)",
    "status": "pass",
    "time": 0.36446690559387,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check i can not create a entity with invalid data (CG.Order.Test.Api.Cest.Order.NoteCest.createInvalidEntity)"
}{
    "event": "test",
    "suite": "api",
    "test": "check i can not create a entity with invalid data (CG.Order.Test.Api.Cest.Order.NoteCest.createInvalidEntity)",
    "status": "pass",
    "time": 0.35754585266113,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check i can not create a new entity if i send additional fields (CG.Order.Test.Api.Cest.Order.NoteCest.createEntityWithAdditionalFields)"
}{
    "event": "test",
    "suite": "api",
    "test": "check i can not create a new entity if i send additional fields (CG.Order.Test.Api.Cest.Order.NoteCest.createEntityWithAdditionalFields)",
    "status": "pass",
    "time": 0.35331010818481,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "create entity with invalid date range (CG.Order.Test.Api.Cest.Order.NoteCest.createEntityWithInvalidDateRange)"
}{
    "event": "test",
    "suite": "api",
    "test": "create entity with invalid date range (CG.Order.Test.Api.Cest.Order.NoteCest.createEntityWithInvalidDateRange)",
    "status": "pass",
    "time": 0.26177597045898,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "test single date filter (CG.Order.Test.Api.Cest.Order.NoteCest.testSingleDateFilter)"
}{
    "event": "test",
    "suite": "api",
    "test": "test single date filter (CG.Order.Test.Api.Cest.Order.NoteCest.testSingleDateFilter)",
    "status": "pass",
    "time": 0.28805112838745,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "test date range filter (CG.Order.Test.Api.Cest.Order.NoteCest.testDateRangeFilter)"
}{
    "event": "test",
    "suite": "api",
    "test": "test date range filter (CG.Order.Test.Api.Cest.Order.NoteCest.testDateRangeFilter)",
    "status": "pass",
    "time": 0.26804089546204,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "test range filters (CG.Order.Test.Api.Cest.Order.NoteCest.testRangeFilters)"
}{
    "event": "test",
    "suite": "api",
    "test": "test range filters (CG.Order.Test.Api.Cest.Order.NoteCest.testRangeFilters)",
    "status": "pass",
    "time": 0.26448082923889,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "test array filters dont accept string (CG.Order.Test.Api.Cest.Order.NoteCest.testArrayFiltersDontAcceptString)"
}{
    "event": "test",
    "suite": "api",
    "test": "test array filters dont accept string (CG.Order.Test.Api.Cest.Order.NoteCest.testArrayFiltersDontAcceptString)",
    "status": "pass",
    "time": 0.26446986198425,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "test string filters dont accept array (CG.Order.Test.Api.Cest.Order.NoteCest.testStringFiltersDontAcceptArray)"
}{
    "event": "test",
    "suite": "api",
    "test": "test string filters dont accept array (CG.Order.Test.Api.Cest.Order.NoteCest.testStringFiltersDontAcceptArray)",
    "status": "pass",
    "time": 0.30852198600769,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check search term filters (CG.Order.Test.Api.Cest.Order.NoteCest.checkSearchTermFilters)"
}{
    "event": "test",
    "suite": "api",
    "test": "check search term filters (CG.Order.Test.Api.Cest.Order.NoteCest.checkSearchTermFilters)",
    "status": "pass",
    "time": 0.29734706878662,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "see a resource endpoint contains hal (CG.Order.Test.Api.Cest.Order.NoteCest.viewInHal)"
}{
    "event": "test",
    "suite": "api",
    "test": "see a resource endpoint contains hal (CG.Order.Test.Api.Cest.Order.NoteCest.viewInHal)",
    "status": "pass",
    "time": 0.38754296302795,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check only the allowed methods are allowed (CG.Order.Test.Api.Cest.Order.NoteCest.checkAllowedMethods)"
}{
    "event": "test",
    "suite": "api",
    "test": "check only the allowed methods are allowed (CG.Order.Test.Api.Cest.Order.NoteCest.checkAllowedMethods)",
    "status": "pass",
    "time": 0.46832704544067,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check the up link is set as the parents url (CG.Order.Test.Api.Cest.Order.NoteCest.checkUplink)"
}{
    "event": "test",
    "suite": "api",
    "test": "check the up link is set as the parents url (CG.Order.Test.Api.Cest.Order.NoteCest.checkUplink)",
    "status": "pass",
    "time": 0.34373211860657,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check headers for head request and that body is empty (CG.Order.Test.Api.Cest.Order.NoteCest.checkHeadRequest)"
}{
    "event": "test",
    "suite": "api",
    "test": "check headers for head request and that body is empty (CG.Order.Test.Api.Cest.Order.NoteCest.checkHeadRequest)",
    "status": "pass",
    "time": 0.44956803321838,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "create entity then get collection multiple times (CG.Order.Test.Api.Cest.Order.NoteCest.createEntityThenGetCollectionMultipleTimes)"
}{
    "event": "test",
    "suite": "api",
    "test": "create entity then get collection multiple times (CG.Order.Test.Api.Cest.Order.NoteCest.createEntityThenGetCollectionMultipleTimes)",
    "status": "pass",
    "time": 0.26567411422729,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "create entity then get collection multiple times from existing (CG.Order.Test.Api.Cest.Order.NoteCest.createEntityThenGetCollectionMultipleTimesFromExisting)"
}{
    "event": "test",
    "suite": "api",
    "test": "create entity then get collection multiple times from existing (CG.Order.Test.Api.Cest.Order.NoteCest.createEntityThenGetCollectionMultipleTimesFromExisting)",
    "status": "pass",
    "time": 0.26383113861084,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "view a collection (CG.Order.Test.Api.Cest.Order.NoteCest.viewCollectionAll)"
}{
    "event": "test",
    "suite": "api",
    "test": "view a collection (CG.Order.Test.Api.Cest.Order.NoteCest.viewCollectionAll)",
    "status": "pass",
    "time": 0.39186096191406,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "view a collection (CG.Order.Test.Api.Cest.Order.NoteCest.viewCollectionZeroLimit)"
}{
    "event": "test",
    "suite": "api",
    "test": "view a collection (CG.Order.Test.Api.Cest.Order.NoteCest.viewCollectionZeroLimit)",
    "status": "pass",
    "time": 0.36742901802063,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check filters pagination (CG.Order.Test.Api.Cest.Order.NoteCest.checkFiltersPagination)"
}{
    "event": "test",
    "suite": "api",
    "test": "check filters pagination (CG.Order.Test.Api.Cest.Order.NoteCest.checkFiltersPagination)",
    "status": "pass",
    "time": 0.29863905906677,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "test timestamp filter (CG.Order.Test.Api.Cest.Order.NoteCest.testTimestampFilter)"
}{
    "event": "test",
    "suite": "api",
    "test": "test timestamp filter (CG.Order.Test.Api.Cest.Order.NoteCest.testTimestampFilter)",
    "status": "pass",
    "time": 0.28992605209351,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "test timestamp range filters (CG.Order.Test.Api.Cest.Order.NoteCest.testTimestampRangeFilters)"
}{
    "event": "test",
    "suite": "api",
    "test": "test timestamp range filters (CG.Order.Test.Api.Cest.Order.NoteCest.testTimestampRangeFilters)",
    "status": "pass",
    "time": 0.31111192703247,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "view the primary entity (CG.Order.Test.Api.Cest.Order.NoteEntityCest.viewPrimaryEntity)"
}{
    "event": "test",
    "suite": "api",
    "test": "view the primary entity (CG.Order.Test.Api.Cest.Order.NoteEntityCest.viewPrimaryEntity)",
    "status": "pass",
    "time": 3.2580890655518,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "view the secondary entity (CG.Order.Test.Api.Cest.Order.NoteEntityCest.viewSecondaryEntity)"
}{
    "event": "test",
    "suite": "api",
    "test": "view the secondary entity (CG.Order.Test.Api.Cest.Order.NoteEntityCest.viewSecondaryEntity)",
    "status": "pass",
    "time": 0.35053205490112,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check i can not view a non existent entity (CG.Order.Test.Api.Cest.Order.NoteEntityCest.viewNonExistentEntity)"
}{
    "event": "test",
    "suite": "api",
    "test": "check i can not view a non existent entity (CG.Order.Test.Api.Cest.Order.NoteEntityCest.viewNonExistentEntity)",
    "status": "pass",
    "time": 0.98021793365479,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "update primary entity (CG.Order.Test.Api.Cest.Order.NoteEntityCest.updatePrimaryEntity)"
}{
    "event": "test",
    "suite": "api",
    "test": "update primary entity (CG.Order.Test.Api.Cest.Order.NoteEntityCest.updatePrimaryEntity)",
    "status": "pass",
    "time": 0.29182887077332,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "update primary entity then get (CG.Order.Test.Api.Cest.Order.NoteEntityCest.updatePrimaryEntityThenGet)"
}{
    "event": "test",
    "suite": "api",
    "test": "update primary entity then get (CG.Order.Test.Api.Cest.Order.NoteEntityCest.updatePrimaryEntityThenGet)",
    "status": "pass",
    "time": 0.30424809455872,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "update primary entity with empty data (CG.Order.Test.Api.Cest.Order.NoteEntityCest.updatePrimaryEntityWithEmptyData)"
}{
    "event": "test",
    "suite": "api",
    "test": "update primary entity with empty data (CG.Order.Test.Api.Cest.Order.NoteEntityCest.updatePrimaryEntityWithEmptyData)",
    "status": "pass",
    "time": 0.28589987754822,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "update primary entity with invalid data (CG.Order.Test.Api.Cest.Order.NoteEntityCest.updatePrimaryEntityWithInvalidData)"
}{
    "event": "test",
    "suite": "api",
    "test": "update primary entity with invalid data (CG.Order.Test.Api.Cest.Order.NoteEntityCest.updatePrimaryEntityWithInvalidData)",
    "status": "pass",
    "time": 0.29823899269104,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "update primary entity with additional fields (CG.Order.Test.Api.Cest.Order.NoteEntityCest.updatePrimaryEntityWithAdditionalFields)"
}{
    "event": "test",
    "suite": "api",
    "test": "update primary entity with additional fields (CG.Order.Test.Api.Cest.Order.NoteEntityCest.updatePrimaryEntityWithAdditionalFields)",
    "status": "pass",
    "time": 0.28604507446289,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check i delete the primary entity (CG.Order.Test.Api.Cest.Order.NoteEntityCest.deletePrimaryEntity)"
}{
    "event": "test",
    "suite": "api",
    "test": "check i delete the primary entity (CG.Order.Test.Api.Cest.Order.NoteEntityCest.deletePrimaryEntity)",
    "status": "pass",
    "time": 0.39857888221741,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check i delete the primary entity (CG.Order.Test.Api.Cest.Order.NoteEntityCest.deletePrimaryEntityWithGet)"
}{
    "event": "test",
    "suite": "api",
    "test": "check i delete the primary entity (CG.Order.Test.Api.Cest.Order.NoteEntityCest.deletePrimaryEntityWithGet)",
    "status": "pass",
    "time": 0.46427202224731,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check i delete the primary entity (CG.Order.Test.Api.Cest.Order.NoteEntityCest.deletePrimaryEntityWithGetCollection)"
}{
    "event": "test",
    "suite": "api",
    "test": "check i delete the primary entity (CG.Order.Test.Api.Cest.Order.NoteEntityCest.deletePrimaryEntityWithGetCollection)",
    "status": "pass",
    "time": 0.45015287399292,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check i can not delete a non existent entity (CG.Order.Test.Api.Cest.Order.NoteEntityCest.deleteNonExistentEntity)"
}{
    "event": "test",
    "suite": "api",
    "test": "check i can not delete a non existent entity (CG.Order.Test.Api.Cest.Order.NoteEntityCest.deleteNonExistentEntity)",
    "status": "pass",
    "time": 0.3721649646759,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check entity embed (CG.Order.Test.Api.Cest.Order.NoteEntityCest.checkEntityEmbed)"
}{
    "event": "test",
    "suite": "api",
    "test": "check entity embed (CG.Order.Test.Api.Cest.Order.NoteEntityCest.checkEntityEmbed)",
    "status": "pass",
    "time": 0.30410289764404,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check children endpoints with wrong parent id (CG.Order.Test.Api.Cest.Order.NoteEntityCest.checkChildrenEndpointsWithWrongParentId)"
}{
    "event": "test",
    "suite": "api",
    "test": "check children endpoints with wrong parent id (CG.Order.Test.Api.Cest.Order.NoteEntityCest.checkChildrenEndpointsWithWrongParentId)",
    "status": "pass",
    "time": 0.27137303352356,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check put children endpoints with wrong parent id (CG.Order.Test.Api.Cest.Order.NoteEntityCest.checkPutChildrenEndpointsWithWrongParentId)"
}{
    "event": "test",
    "suite": "api",
    "test": "check put children endpoints with wrong parent id (CG.Order.Test.Api.Cest.Order.NoteEntityCest.checkPutChildrenEndpointsWithWrongParentId)",
    "status": "pass",
    "time": 0.28223586082458,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "see a resource endpoint contains hal (CG.Order.Test.Api.Cest.Order.NoteEntityCest.viewInHal)"
}{
    "event": "test",
    "suite": "api",
    "test": "see a resource endpoint contains hal (CG.Order.Test.Api.Cest.Order.NoteEntityCest.viewInHal)",
    "status": "pass",
    "time": 0.38242292404175,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check only the allowed methods are allowed (CG.Order.Test.Api.Cest.Order.NoteEntityCest.checkAllowedMethods)"
}{
    "event": "test",
    "suite": "api",
    "test": "check only the allowed methods are allowed (CG.Order.Test.Api.Cest.Order.NoteEntityCest.checkAllowedMethods)",
    "status": "pass",
    "time": 0.42810297012329,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check the up link is set as the parents url (CG.Order.Test.Api.Cest.Order.NoteEntityCest.checkUplink)"
}{
    "event": "test",
    "suite": "api",
    "test": "check the up link is set as the parents url (CG.Order.Test.Api.Cest.Order.NoteEntityCest.checkUplink)",
    "status": "pass",
    "time": 0.32365798950195,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check headers for head request and that body is empty (CG.Order.Test.Api.Cest.Order.NoteEntityCest.checkHeadRequest)"
}{
    "event": "test",
    "suite": "api",
    "test": "check headers for head request and that body is empty (CG.Order.Test.Api.Cest.Order.NoteEntityCest.checkHeadRequest)",
    "status": "pass",
    "time": 0.51466512680054,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "has e tag header (CG.Order.Test.Api.Cest.Order.NoteEntityCest.hasETagHeader)"
}{
    "event": "test",
    "suite": "api",
    "test": "has e tag header (CG.Order.Test.Api.Cest.Order.NoteEntityCest.hasETagHeader)",
    "status": "pass",
    "time": 0.36283993721008,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "get a 304 when i send the etag on a second get request (CG.Order.Test.Api.Cest.Order.NoteEntityCest.sendETagGet304)"
}{
    "event": "test",
    "suite": "api",
    "test": "get a 304 when i send the etag on a second get request (CG.Order.Test.Api.Cest.Order.NoteEntityCest.sendETagGet304)",
    "status": "pass",
    "time": 0.44362807273865,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check that if i send an invalid etag i get the entity (CG.Order.Test.Api.Cest.Order.NoteEntityCest.sendInvalidETagGetNewETag)"
}{
    "event": "test",
    "suite": "api",
    "test": "check that if i send an invalid etag i get the entity (CG.Order.Test.Api.Cest.Order.NoteEntityCest.sendInvalidETagGetNewETag)",
    "status": "pass",
    "time": 0.36506295204163,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "update the primary entity with matching etag (CG.Order.Test.Api.Cest.Order.NoteEntityCest.updateEntityWithETag)"
}{
    "event": "test",
    "suite": "api",
    "test": "update the primary entity with matching etag (CG.Order.Test.Api.Cest.Order.NoteEntityCest.updateEntityWithETag)",
    "status": "pass",
    "time": 0.46064901351929,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "update the primary entity with matching etag then get (CG.Order.Test.Api.Cest.Order.NoteEntityCest.updateEntityWithETagThenGet)"
}{
    "event": "test",
    "suite": "api",
    "test": "update the primary entity with matching etag then get (CG.Order.Test.Api.Cest.Order.NoteEntityCest.updateEntityWithETagThenGet)",
    "status": "pass",
    "time": 0.52814292907715,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "update the primary entity with matching etag and identical data (CG.Order.Test.Api.Cest.Order.NoteEntityCest.updateEntityWithETagAndIdenticalData)"
}{
    "event": "test",
    "suite": "api",
    "test": "update the primary entity with matching etag and identical data (CG.Order.Test.Api.Cest.Order.NoteEntityCest.updateEntityWithETagAndIdenticalData)",
    "status": "pass",
    "time": 0.42352318763733,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check i can't update the primary entity with an invalid etag (CG.Order.Test.Api.Cest.Order.NoteEntityCest.updateEntityWithInvalidETag)"
}{
    "event": "test",
    "suite": "api",
    "test": "check i can't update the primary entity with an invalid etag (CG.Order.Test.Api.Cest.Order.NoteEntityCest.updateEntityWithInvalidETag)",
    "status": "pass",
    "time": 0.33856701850891,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check i can't update the primary entity with an invalid etag and identical data (CG.Order.Test.Api.Cest.Order.NoteEntityCest.updateEntityWithInvalidETagAndIdenticalData)"
}{
    "event": "test",
    "suite": "api",
    "test": "check i can't update the primary entity with an invalid etag and identical data (CG.Order.Test.Api.Cest.Order.NoteEntityCest.updateEntityWithInvalidETagAndIdenticalData)",
    "status": "pass",
    "time": 0.34930801391602,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check getting other entities doesn't cause \"\/order\/1411-10\/note\/1\"'s etag to change (CG.Order.Test.Api.Cest.Order.NoteEntityCest.checkDuplicateClassNameETagIssue)"
}{
    "event": "test",
    "suite": "api",
    "test": "check getting other entities doesn't cause \"\/order\/1411-10\/note\/1\"'s etag to change (CG.Order.Test.Api.Cest.Order.NoteEntityCest.checkDuplicateClassNameETagIssue)",
    "status": "pass",
    "time": 2.3711879253387,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "update the primary entity without etag (CG.Order.Test.Api.Cest.Order.NoteEntityCest.updateEntityWithoutEtagShouldFail)"
}{
    "event": "test",
    "suite": "api",
    "test": "update the primary entity without etag (CG.Order.Test.Api.Cest.Order.NoteEntityCest.updateEntityWithoutEtagShouldFail)",
    "status": "pass",
    "time": 0.38459491729736,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "update the primary entity with empty etag (CG.Order.Test.Api.Cest.Order.NoteEntityCest.updateEntityWithEmptyEtagShouldFail)"
}{
    "event": "test",
    "suite": "api",
    "test": "update the primary entity with empty etag (CG.Order.Test.Api.Cest.Order.NoteEntityCest.updateEntityWithEmptyEtagShouldFail)",
    "status": "pass",
    "time": 0.40264010429382,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check put children endpoints with wrong parent idwith e tags (CG.Order.Test.Api.Cest.Order.NoteEntityCest.checkPutChildrenEndpointsWithWrongParentIdwithETags)"
}{
    "event": "test",
    "suite": "api",
    "test": "check put children endpoints with wrong parent idwith e tags (CG.Order.Test.Api.Cest.Order.NoteEntityCest.checkPutChildrenEndpointsWithWrongParentIdwithETags)",
    "status": "pass",
    "time": 0.29734706878662,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "view a collection (CG.Order.Test.Api.Cest.Order.TrackingCest.viewCollection)"
}{
    "event": "test",
    "suite": "api",
    "test": "view a collection (CG.Order.Test.Api.Cest.Order.TrackingCest.viewCollection)",
    "status": "pass",
    "time": 0.44248199462891,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "view a collection by page (CG.Order.Test.Api.Cest.Order.TrackingCest.checkPagination)"
}{
    "event": "test",
    "suite": "api",
    "test": "view a collection by page (CG.Order.Test.Api.Cest.Order.TrackingCest.checkPagination)",
    "status": "pass",
    "time": 0.64884090423584,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "view a collection by page (CG.Order.Test.Api.Cest.Order.TrackingCest.checkCollectionCache)"
}{
    "event": "test",
    "suite": "api",
    "test": "view a collection by page (CG.Order.Test.Api.Cest.Order.TrackingCest.checkCollectionCache)",
    "status": "pass",
    "time": 0.48107504844666,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "has filters (CG.Order.Test.Api.Cest.Order.TrackingCest.hasFilters)"
}{
    "event": "test",
    "suite": "api",
    "test": "has filters (CG.Order.Test.Api.Cest.Order.TrackingCest.hasFilters)",
    "status": "pass",
    "time": 0.28862285614014,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check filters (CG.Order.Test.Api.Cest.Order.TrackingCest.checkFilters)"
}{
    "event": "test",
    "suite": "api",
    "test": "check filters (CG.Order.Test.Api.Cest.Order.TrackingCest.checkFilters)",
    "status": "pass",
    "time": 0.2641499042511,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check multi filters (CG.Order.Test.Api.Cest.Order.TrackingCest.checkMultiFilters)"
}{
    "event": "test",
    "suite": "api",
    "test": "check multi filters (CG.Order.Test.Api.Cest.Order.TrackingCest.checkMultiFilters)",
    "status": "pass",
    "time": 0.28234577178955,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "create entity (CG.Order.Test.Api.Cest.Order.TrackingCest.createEntity)"
}{
    "event": "test",
    "suite": "api",
    "test": "create entity (CG.Order.Test.Api.Cest.Order.TrackingCest.createEntity)",
    "status": "pass",
    "time": 0.30576205253601,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "create a new entity (CG.Order.Test.Api.Cest.Order.TrackingCest.createEntityThenGet)"
}{
    "event": "test",
    "suite": "api",
    "test": "create a new entity (CG.Order.Test.Api.Cest.Order.TrackingCest.createEntityThenGet)",
    "status": "pass",
    "time": 0.46301102638245,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "create a new entity (CG.Order.Test.Api.Cest.Order.TrackingCest.createEntityThenGetCollection)"
}{
    "event": "test",
    "suite": "api",
    "test": "create a new entity (CG.Order.Test.Api.Cest.Order.TrackingCest.createEntityThenGetCollection)",
    "status": "pass",
    "time": 0.43675994873047,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "create entity then get collection with filters (CG.Order.Test.Api.Cest.Order.TrackingCest.createEntityThenGetCollectionWithFilters)"
}{
    "event": "test",
    "suite": "api",
    "test": "create entity then get collection with filters (CG.Order.Test.Api.Cest.Order.TrackingCest.createEntityThenGetCollectionWithFilters)",
    "status": "pass",
    "time": 0.24265718460083,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "create entity put entity then get collection (CG.Order.Test.Api.Cest.Order.TrackingCest.createEntityPutEntityThenGetCollection)"
}{
    "event": "test",
    "suite": "api",
    "test": "create entity put entity then get collection (CG.Order.Test.Api.Cest.Order.TrackingCest.createEntityPutEntityThenGetCollection)",
    "status": "pass",
    "time": 0.28737497329712,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check i can not create a entity with empty data (CG.Order.Test.Api.Cest.Order.TrackingCest.createEmptyEntity)"
}{
    "event": "test",
    "suite": "api",
    "test": "check i can not create a entity with empty data (CG.Order.Test.Api.Cest.Order.TrackingCest.createEmptyEntity)",
    "status": "pass",
    "time": 0.35560083389282,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check i can not create a entity with invalid data (CG.Order.Test.Api.Cest.Order.TrackingCest.createInvalidEntity)"
}{
    "event": "test",
    "suite": "api",
    "test": "check i can not create a entity with invalid data (CG.Order.Test.Api.Cest.Order.TrackingCest.createInvalidEntity)",
    "status": "pass",
    "time": 0.36805486679077,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check i can not create a new entity if i send additional fields (CG.Order.Test.Api.Cest.Order.TrackingCest.createEntityWithAdditionalFields)"
}{
    "event": "test",
    "suite": "api",
    "test": "check i can not create a new entity if i send additional fields (CG.Order.Test.Api.Cest.Order.TrackingCest.createEntityWithAdditionalFields)",
    "status": "pass",
    "time": 0.35088706016541,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "create entity with invalid date range (CG.Order.Test.Api.Cest.Order.TrackingCest.createEntityWithInvalidDateRange)"
}{
    "event": "test",
    "suite": "api",
    "test": "create entity with invalid date range (CG.Order.Test.Api.Cest.Order.TrackingCest.createEntityWithInvalidDateRange)",
    "status": "pass",
    "time": 0.27748513221741,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "test single date filter (CG.Order.Test.Api.Cest.Order.TrackingCest.testSingleDateFilter)"
}{
    "event": "test",
    "suite": "api",
    "test": "test single date filter (CG.Order.Test.Api.Cest.Order.TrackingCest.testSingleDateFilter)",
    "status": "pass",
    "time": 0.29314994812012,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "test date range filter (CG.Order.Test.Api.Cest.Order.TrackingCest.testDateRangeFilter)"
}{
    "event": "test",
    "suite": "api",
    "test": "test date range filter (CG.Order.Test.Api.Cest.Order.TrackingCest.testDateRangeFilter)",
    "status": "pass",
    "time": 0.26989793777466,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "test range filters (CG.Order.Test.Api.Cest.Order.TrackingCest.testRangeFilters)"
}{
    "event": "test",
    "suite": "api",
    "test": "test range filters (CG.Order.Test.Api.Cest.Order.TrackingCest.testRangeFilters)",
    "status": "pass",
    "time": 0.27400684356689,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "test array filters dont accept string (CG.Order.Test.Api.Cest.Order.TrackingCest.testArrayFiltersDontAcceptString)"
}{
    "event": "test",
    "suite": "api",
    "test": "test array filters dont accept string (CG.Order.Test.Api.Cest.Order.TrackingCest.testArrayFiltersDontAcceptString)",
    "status": "pass",
    "time": 0.27741479873657,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "test string filters dont accept array (CG.Order.Test.Api.Cest.Order.TrackingCest.testStringFiltersDontAcceptArray)"
}{
    "event": "test",
    "suite": "api",
    "test": "test string filters dont accept array (CG.Order.Test.Api.Cest.Order.TrackingCest.testStringFiltersDontAcceptArray)",
    "status": "pass",
    "time": 0.27953600883484,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check search term filters (CG.Order.Test.Api.Cest.Order.TrackingCest.checkSearchTermFilters)"
}{
    "event": "test",
    "suite": "api",
    "test": "check search term filters (CG.Order.Test.Api.Cest.Order.TrackingCest.checkSearchTermFilters)",
    "status": "pass",
    "time": 0.27668809890747,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "see a resource endpoint contains hal (CG.Order.Test.Api.Cest.Order.TrackingCest.viewInHal)"
}{
    "event": "test",
    "suite": "api",
    "test": "see a resource endpoint contains hal (CG.Order.Test.Api.Cest.Order.TrackingCest.viewInHal)",
    "status": "pass",
    "time": 0.39377903938293,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check only the allowed methods are allowed (CG.Order.Test.Api.Cest.Order.TrackingCest.checkAllowedMethods)"
}{
    "event": "test",
    "suite": "api",
    "test": "check only the allowed methods are allowed (CG.Order.Test.Api.Cest.Order.TrackingCest.checkAllowedMethods)",
    "status": "pass",
    "time": 0.47470498085022,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check the up link is set as the parents url (CG.Order.Test.Api.Cest.Order.TrackingCest.checkUplink)"
}{
    "event": "test",
    "suite": "api",
    "test": "check the up link is set as the parents url (CG.Order.Test.Api.Cest.Order.TrackingCest.checkUplink)",
    "status": "pass",
    "time": 0.36997604370117,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check headers for head request and that body is empty (CG.Order.Test.Api.Cest.Order.TrackingCest.checkHeadRequest)"
}{
    "event": "test",
    "suite": "api",
    "test": "check headers for head request and that body is empty (CG.Order.Test.Api.Cest.Order.TrackingCest.checkHeadRequest)",
    "status": "pass",
    "time": 0.475417137146,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "create entity then get collection multiple times (CG.Order.Test.Api.Cest.Order.TrackingCest.createEntityThenGetCollectionMultipleTimes)"
}{
    "event": "test",
    "suite": "api",
    "test": "create entity then get collection multiple times (CG.Order.Test.Api.Cest.Order.TrackingCest.createEntityThenGetCollectionMultipleTimes)",
    "status": "pass",
    "time": 0.28238415718079,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "create entity then get collection multiple times from existing (CG.Order.Test.Api.Cest.Order.TrackingCest.createEntityThenGetCollectionMultipleTimesFromExisting)"
}{
    "event": "test",
    "suite": "api",
    "test": "create entity then get collection multiple times from existing (CG.Order.Test.Api.Cest.Order.TrackingCest.createEntityThenGetCollectionMultipleTimesFromExisting)",
    "status": "pass",
    "time": 0.32330203056335,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "view a collection (CG.Order.Test.Api.Cest.Order.TrackingCest.viewCollectionAll)"
}{
    "event": "test",
    "suite": "api",
    "test": "view a collection (CG.Order.Test.Api.Cest.Order.TrackingCest.viewCollectionAll)",
    "status": "pass",
    "time": 0.35520386695862,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "view a collection (CG.Order.Test.Api.Cest.Order.TrackingCest.viewCollectionZeroLimit)"
}{
    "event": "test",
    "suite": "api",
    "test": "view a collection (CG.Order.Test.Api.Cest.Order.TrackingCest.viewCollectionZeroLimit)",
    "status": "pass",
    "time": 0.3426251411438,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check filters pagination (CG.Order.Test.Api.Cest.Order.TrackingCest.checkFiltersPagination)"
}{
    "event": "test",
    "suite": "api",
    "test": "check filters pagination (CG.Order.Test.Api.Cest.Order.TrackingCest.checkFiltersPagination)",
    "status": "pass",
    "time": 0.26296806335449,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "test timestamp filter (CG.Order.Test.Api.Cest.Order.TrackingCest.testTimestampFilter)"
}{
    "event": "test",
    "suite": "api",
    "test": "test timestamp filter (CG.Order.Test.Api.Cest.Order.TrackingCest.testTimestampFilter)",
    "status": "pass",
    "time": 0.28322291374207,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "test timestamp range filters (CG.Order.Test.Api.Cest.Order.TrackingCest.testTimestampRangeFilters)"
}{
    "event": "test",
    "suite": "api",
    "test": "test timestamp range filters (CG.Order.Test.Api.Cest.Order.TrackingCest.testTimestampRangeFilters)",
    "status": "pass",
    "time": 0.24349498748779,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "view the primary entity (CG.Order.Test.Api.Cest.Order.TrackingEntityCest.viewPrimaryEntity)"
}{
    "event": "test",
    "suite": "api",
    "test": "view the primary entity (CG.Order.Test.Api.Cest.Order.TrackingEntityCest.viewPrimaryEntity)",
    "status": "pass",
    "time": 0.3381519317627,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "view the secondary entity (CG.Order.Test.Api.Cest.Order.TrackingEntityCest.viewSecondaryEntity)"
}{
    "event": "test",
    "suite": "api",
    "test": "view the secondary entity (CG.Order.Test.Api.Cest.Order.TrackingEntityCest.viewSecondaryEntity)",
    "status": "pass",
    "time": 0.37260699272156,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check i can not view a non existent entity (CG.Order.Test.Api.Cest.Order.TrackingEntityCest.viewNonExistentEntity)"
}{
    "event": "test",
    "suite": "api",
    "test": "check i can not view a non existent entity (CG.Order.Test.Api.Cest.Order.TrackingEntityCest.viewNonExistentEntity)",
    "status": "pass",
    "time": 0.36178112030029,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "update primary entity (CG.Order.Test.Api.Cest.Order.TrackingEntityCest.updatePrimaryEntity)"
}{
    "event": "test",
    "suite": "api",
    "test": "update primary entity (CG.Order.Test.Api.Cest.Order.TrackingEntityCest.updatePrimaryEntity)",
    "status": "pass",
    "time": 0.29895710945129,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "update primary entity then get (CG.Order.Test.Api.Cest.Order.TrackingEntityCest.updatePrimaryEntityThenGet)"
}{
    "event": "test",
    "suite": "api",
    "test": "update primary entity then get (CG.Order.Test.Api.Cest.Order.TrackingEntityCest.updatePrimaryEntityThenGet)",
    "status": "pass",
    "time": 0.27114200592041,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "update primary entity with empty data (CG.Order.Test.Api.Cest.Order.TrackingEntityCest.updatePrimaryEntityWithEmptyData)"
}{
    "event": "test",
    "suite": "api",
    "test": "update primary entity with empty data (CG.Order.Test.Api.Cest.Order.TrackingEntityCest.updatePrimaryEntityWithEmptyData)",
    "status": "pass",
    "time": 0.2981870174408,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "update primary entity with invalid data (CG.Order.Test.Api.Cest.Order.TrackingEntityCest.updatePrimaryEntityWithInvalidData)"
}{
    "event": "test",
    "suite": "api",
    "test": "update primary entity with invalid data (CG.Order.Test.Api.Cest.Order.TrackingEntityCest.updatePrimaryEntityWithInvalidData)",
    "status": "pass",
    "time": 0.30338311195374,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "update primary entity with additional fields (CG.Order.Test.Api.Cest.Order.TrackingEntityCest.updatePrimaryEntityWithAdditionalFields)"
}{
    "event": "test",
    "suite": "api",
    "test": "update primary entity with additional fields (CG.Order.Test.Api.Cest.Order.TrackingEntityCest.updatePrimaryEntityWithAdditionalFields)",
    "status": "pass",
    "time": 0.29484295845032,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check i delete the primary entity (CG.Order.Test.Api.Cest.Order.TrackingEntityCest.deletePrimaryEntity)"
}{
    "event": "test",
    "suite": "api",
    "test": "check i delete the primary entity (CG.Order.Test.Api.Cest.Order.TrackingEntityCest.deletePrimaryEntity)",
    "status": "pass",
    "time": 0.36836504936218,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check i delete the primary entity (CG.Order.Test.Api.Cest.Order.TrackingEntityCest.deletePrimaryEntityWithGet)"
}{
    "event": "test",
    "suite": "api",
    "test": "check i delete the primary entity (CG.Order.Test.Api.Cest.Order.TrackingEntityCest.deletePrimaryEntityWithGet)",
    "status": "pass",
    "time": 0.44673204421997,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check i delete the primary entity (CG.Order.Test.Api.Cest.Order.TrackingEntityCest.deletePrimaryEntityWithGetCollection)"
}{
    "event": "test",
    "suite": "api",
    "test": "check i delete the primary entity (CG.Order.Test.Api.Cest.Order.TrackingEntityCest.deletePrimaryEntityWithGetCollection)",
    "status": "pass",
    "time": 0.41468596458435,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check i can not delete a non existent entity (CG.Order.Test.Api.Cest.Order.TrackingEntityCest.deleteNonExistentEntity)"
}{
    "event": "test",
    "suite": "api",
    "test": "check i can not delete a non existent entity (CG.Order.Test.Api.Cest.Order.TrackingEntityCest.deleteNonExistentEntity)",
    "status": "pass",
    "time": 0.37118101119995,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check entity embed (CG.Order.Test.Api.Cest.Order.TrackingEntityCest.checkEntityEmbed)"
}{
    "event": "test",
    "suite": "api",
    "test": "check entity embed (CG.Order.Test.Api.Cest.Order.TrackingEntityCest.checkEntityEmbed)",
    "status": "pass",
    "time": 0.27973818778992,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check children endpoints with wrong parent id (CG.Order.Test.Api.Cest.Order.TrackingEntityCest.checkChildrenEndpointsWithWrongParentId)"
}{
    "event": "test",
    "suite": "api",
    "test": "check children endpoints with wrong parent id (CG.Order.Test.Api.Cest.Order.TrackingEntityCest.checkChildrenEndpointsWithWrongParentId)",
    "status": "pass",
    "time": 0.28901886940002,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check put children endpoints with wrong parent id (CG.Order.Test.Api.Cest.Order.TrackingEntityCest.checkPutChildrenEndpointsWithWrongParentId)"
}{
    "event": "test",
    "suite": "api",
    "test": "check put children endpoints with wrong parent id (CG.Order.Test.Api.Cest.Order.TrackingEntityCest.checkPutChildrenEndpointsWithWrongParentId)",
    "status": "pass",
    "time": 0.28095197677612,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "see a resource endpoint contains hal (CG.Order.Test.Api.Cest.Order.TrackingEntityCest.viewInHal)"
}{
    "event": "test",
    "suite": "api",
    "test": "see a resource endpoint contains hal (CG.Order.Test.Api.Cest.Order.TrackingEntityCest.viewInHal)",
    "status": "pass",
    "time": 0.34850597381592,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check only the allowed methods are allowed (CG.Order.Test.Api.Cest.Order.TrackingEntityCest.checkAllowedMethods)"
}{
    "event": "test",
    "suite": "api",
    "test": "check only the allowed methods are allowed (CG.Order.Test.Api.Cest.Order.TrackingEntityCest.checkAllowedMethods)",
    "status": "pass",
    "time": 0.36216497421265,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check the up link is set as the parents url (CG.Order.Test.Api.Cest.Order.TrackingEntityCest.checkUplink)"
}{
    "event": "test",
    "suite": "api",
    "test": "check the up link is set as the parents url (CG.Order.Test.Api.Cest.Order.TrackingEntityCest.checkUplink)",
    "status": "pass",
    "time": 0.34156703948975,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check headers for head request and that body is empty (CG.Order.Test.Api.Cest.Order.TrackingEntityCest.checkHeadRequest)"
}{
    "event": "test",
    "suite": "api",
    "test": "check headers for head request and that body is empty (CG.Order.Test.Api.Cest.Order.TrackingEntityCest.checkHeadRequest)",
    "status": "pass",
    "time": 0.41206097602844,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "has e tag header (CG.Order.Test.Api.Cest.Order.TrackingEntityCest.hasETagHeader)"
}{
    "event": "test",
    "suite": "api",
    "test": "has e tag header (CG.Order.Test.Api.Cest.Order.TrackingEntityCest.hasETagHeader)",
    "status": "pass",
    "time": 0.3570408821106,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "get a 304 when i send the etag on a second get request (CG.Order.Test.Api.Cest.Order.TrackingEntityCest.sendETagGet304)"
}{
    "event": "test",
    "suite": "api",
    "test": "get a 304 when i send the etag on a second get request (CG.Order.Test.Api.Cest.Order.TrackingEntityCest.sendETagGet304)",
    "status": "pass",
    "time": 3.4157240390778,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check that if i send an invalid etag i get the entity (CG.Order.Test.Api.Cest.Order.TrackingEntityCest.sendInvalidETagGetNewETag)"
}{
    "event": "test",
    "suite": "api",
    "test": "check that if i send an invalid etag i get the entity (CG.Order.Test.Api.Cest.Order.TrackingEntityCest.sendInvalidETagGetNewETag)",
    "status": "pass",
    "time": 0.36954808235168,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "update the primary entity with matching etag (CG.Order.Test.Api.Cest.Order.TrackingEntityCest.updateEntityWithETag)"
}{
    "event": "test",
    "suite": "api",
    "test": "update the primary entity with matching etag (CG.Order.Test.Api.Cest.Order.TrackingEntityCest.updateEntityWithETag)",
    "status": "pass",
    "time": 0.41159701347351,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "update the primary entity with matching etag then get (CG.Order.Test.Api.Cest.Order.TrackingEntityCest.updateEntityWithETagThenGet)"
}{
    "event": "test",
    "suite": "api",
    "test": "update the primary entity with matching etag then get (CG.Order.Test.Api.Cest.Order.TrackingEntityCest.updateEntityWithETagThenGet)",
    "status": "pass",
    "time": 0.65173316001892,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "update the primary entity with matching etag and identical data (CG.Order.Test.Api.Cest.Order.TrackingEntityCest.updateEntityWithETagAndIdenticalData)"
}{
    "event": "test",
    "suite": "api",
    "test": "update the primary entity with matching etag and identical data (CG.Order.Test.Api.Cest.Order.TrackingEntityCest.updateEntityWithETagAndIdenticalData)",
    "status": "pass",
    "time": 0.43430590629578,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check i can't update the primary entity with an invalid etag (CG.Order.Test.Api.Cest.Order.TrackingEntityCest.updateEntityWithInvalidETag)"
}{
    "event": "test",
    "suite": "api",
    "test": "check i can't update the primary entity with an invalid etag (CG.Order.Test.Api.Cest.Order.TrackingEntityCest.updateEntityWithInvalidETag)",
    "status": "pass",
    "time": 0.37874293327332,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check i can't update the primary entity with an invalid etag and identical data (CG.Order.Test.Api.Cest.Order.TrackingEntityCest.updateEntityWithInvalidETagAndIdenticalData)"
}{
    "event": "test",
    "suite": "api",
    "test": "check i can't update the primary entity with an invalid etag and identical data (CG.Order.Test.Api.Cest.Order.TrackingEntityCest.updateEntityWithInvalidETagAndIdenticalData)",
    "status": "pass",
    "time": 0.36682295799255,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check getting other entities doesn't cause \"\/order\/1411-10\/tracking\/1\"'s etag to change (CG.Order.Test.Api.Cest.Order.TrackingEntityCest.checkDuplicateClassNameETagIssue)"
}{
    "event": "test",
    "suite": "api",
    "test": "check getting other entities doesn't cause \"\/order\/1411-10\/tracking\/1\"'s etag to change (CG.Order.Test.Api.Cest.Order.TrackingEntityCest.checkDuplicateClassNameETagIssue)",
    "status": "pass",
    "time": 2.3415498733521,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "update the primary entity without etag (CG.Order.Test.Api.Cest.Order.TrackingEntityCest.updateEntityWithoutEtagShouldFail)"
}{
    "event": "test",
    "suite": "api",
    "test": "update the primary entity without etag (CG.Order.Test.Api.Cest.Order.TrackingEntityCest.updateEntityWithoutEtagShouldFail)",
    "status": "pass",
    "time": 0.37796497344971,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "update the primary entity with empty etag (CG.Order.Test.Api.Cest.Order.TrackingEntityCest.updateEntityWithEmptyEtagShouldFail)"
}{
    "event": "test",
    "suite": "api",
    "test": "update the primary entity with empty etag (CG.Order.Test.Api.Cest.Order.TrackingEntityCest.updateEntityWithEmptyEtagShouldFail)",
    "status": "pass",
    "time": 0.38359618186951,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check put children endpoints with wrong parent idwith e tags (CG.Order.Test.Api.Cest.Order.TrackingEntityCest.checkPutChildrenEndpointsWithWrongParentIdwithETags)"
}{
    "event": "test",
    "suite": "api",
    "test": "check put children endpoints with wrong parent idwith e tags (CG.Order.Test.Api.Cest.Order.TrackingEntityCest.checkPutChildrenEndpointsWithWrongParentIdwithETags)",
    "status": "pass",
    "time": 0.26580119132996,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "view the primary entity (CG.Order.Test.Api.Cest.Order.UserChangeEntityCest.viewPrimaryEntity)"
}{
    "event": "test",
    "suite": "api",
    "test": "view the primary entity (CG.Order.Test.Api.Cest.Order.UserChangeEntityCest.viewPrimaryEntity)",
    "status": "pass",
    "time": 0.33977007865906,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "view the secondary entity (CG.Order.Test.Api.Cest.Order.UserChangeEntityCest.viewSecondaryEntity)"
}{
    "event": "test",
    "suite": "api",
    "test": "view the secondary entity (CG.Order.Test.Api.Cest.Order.UserChangeEntityCest.viewSecondaryEntity)",
    "status": "pass",
    "time": 0.38314008712769,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check i can not view a non existent entity (CG.Order.Test.Api.Cest.Order.UserChangeEntityCest.viewNonExistentEntity)"
}{
    "event": "test",
    "suite": "api",
    "test": "check i can not view a non existent entity (CG.Order.Test.Api.Cest.Order.UserChangeEntityCest.viewNonExistentEntity)",
    "status": "pass",
    "time": 0.36617517471313,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "update primary entity (CG.Order.Test.Api.Cest.Order.UserChangeEntityCest.updatePrimaryEntity)"
}{
    "event": "test",
    "suite": "api",
    "test": "update primary entity (CG.Order.Test.Api.Cest.Order.UserChangeEntityCest.updatePrimaryEntity)",
    "status": "pass",
    "time": 0.2784469127655,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "update primary entity then get (CG.Order.Test.Api.Cest.Order.UserChangeEntityCest.updatePrimaryEntityThenGet)"
}{
    "event": "test",
    "suite": "api",
    "test": "update primary entity then get (CG.Order.Test.Api.Cest.Order.UserChangeEntityCest.updatePrimaryEntityThenGet)",
    "status": "pass",
    "time": 0.27389216423035,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "update primary entity with empty data (CG.Order.Test.Api.Cest.Order.UserChangeEntityCest.updatePrimaryEntityWithEmptyData)"
}{
    "event": "test",
    "suite": "api",
    "test": "update primary entity with empty data (CG.Order.Test.Api.Cest.Order.UserChangeEntityCest.updatePrimaryEntityWithEmptyData)",
    "status": "pass",
    "time": 0.29667210578918,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "update primary entity with invalid data (CG.Order.Test.Api.Cest.Order.UserChangeEntityCest.updatePrimaryEntityWithInvalidData)"
}{
    "event": "test",
    "suite": "api",
    "test": "update primary entity with invalid data (CG.Order.Test.Api.Cest.Order.UserChangeEntityCest.updatePrimaryEntityWithInvalidData)",
    "status": "pass",
    "time": 0.27295613288879,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "update primary entity with additional fields (CG.Order.Test.Api.Cest.Order.UserChangeEntityCest.updatePrimaryEntityWithAdditionalFields)"
}{
    "event": "test",
    "suite": "api",
    "test": "update primary entity with additional fields (CG.Order.Test.Api.Cest.Order.UserChangeEntityCest.updatePrimaryEntityWithAdditionalFields)",
    "status": "pass",
    "time": 0.2726149559021,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check i delete the primary entity (CG.Order.Test.Api.Cest.Order.UserChangeEntityCest.deletePrimaryEntity)"
}{
    "event": "test",
    "suite": "api",
    "test": "check i delete the primary entity (CG.Order.Test.Api.Cest.Order.UserChangeEntityCest.deletePrimaryEntity)",
    "status": "pass",
    "time": 0.34509801864624,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check i delete the primary entity (CG.Order.Test.Api.Cest.Order.UserChangeEntityCest.deletePrimaryEntityWithGet)"
}{
    "event": "test",
    "suite": "api",
    "test": "check i delete the primary entity (CG.Order.Test.Api.Cest.Order.UserChangeEntityCest.deletePrimaryEntityWithGet)",
    "status": "pass",
    "time": 0.47921085357666,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "delete primary entity with get collection (CG.Order.Test.Api.Cest.Order.UserChangeEntityCest.deletePrimaryEntityWithGetCollection)"
}{
    "event": "test",
    "suite": "api",
    "test": "delete primary entity with get collection (CG.Order.Test.Api.Cest.Order.UserChangeEntityCest.deletePrimaryEntityWithGetCollection)",
    "status": "pass",
    "time": 0.28255605697632,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check i can not delete a non existent entity (CG.Order.Test.Api.Cest.Order.UserChangeEntityCest.deleteNonExistentEntity)"
}{
    "event": "test",
    "suite": "api",
    "test": "check i can not delete a non existent entity (CG.Order.Test.Api.Cest.Order.UserChangeEntityCest.deleteNonExistentEntity)",
    "status": "pass",
    "time": 0.36482691764832,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check entity embed (CG.Order.Test.Api.Cest.Order.UserChangeEntityCest.checkEntityEmbed)"
}{
    "event": "test",
    "suite": "api",
    "test": "check entity embed (CG.Order.Test.Api.Cest.Order.UserChangeEntityCest.checkEntityEmbed)",
    "status": "pass",
    "time": 0.29476094245911,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check children endpoints with wrong parent id (CG.Order.Test.Api.Cest.Order.UserChangeEntityCest.checkChildrenEndpointsWithWrongParentId)"
}{
    "event": "test",
    "suite": "api",
    "test": "check children endpoints with wrong parent id (CG.Order.Test.Api.Cest.Order.UserChangeEntityCest.checkChildrenEndpointsWithWrongParentId)",
    "status": "pass",
    "time": 0.28712892532349,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check put children endpoints with wrong parent id (CG.Order.Test.Api.Cest.Order.UserChangeEntityCest.checkPutChildrenEndpointsWithWrongParentId)"
}{
    "event": "test",
    "suite": "api",
    "test": "check put children endpoints with wrong parent id (CG.Order.Test.Api.Cest.Order.UserChangeEntityCest.checkPutChildrenEndpointsWithWrongParentId)",
    "status": "pass",
    "time": 0.27544403076172,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "see a resource endpoint contains hal (CG.Order.Test.Api.Cest.Order.UserChangeEntityCest.viewInHal)"
}{
    "event": "test",
    "suite": "api",
    "test": "see a resource endpoint contains hal (CG.Order.Test.Api.Cest.Order.UserChangeEntityCest.viewInHal)",
    "status": "pass",
    "time": 0.36120200157166,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check only the allowed methods are allowed (CG.Order.Test.Api.Cest.Order.UserChangeEntityCest.checkAllowedMethods)"
}{
    "event": "test",
    "suite": "api",
    "test": "check only the allowed methods are allowed (CG.Order.Test.Api.Cest.Order.UserChangeEntityCest.checkAllowedMethods)",
    "status": "pass",
    "time": 0.35237598419189,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check the up link is set as the parents url (CG.Order.Test.Api.Cest.Order.UserChangeEntityCest.checkUplink)"
}{
    "event": "test",
    "suite": "api",
    "test": "check the up link is set as the parents url (CG.Order.Test.Api.Cest.Order.UserChangeEntityCest.checkUplink)",
    "status": "pass",
    "time": 0.36544394493103,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check headers for head request and that body is empty (CG.Order.Test.Api.Cest.Order.UserChangeEntityCest.checkHeadRequest)"
}{
    "event": "test",
    "suite": "api",
    "test": "check headers for head request and that body is empty (CG.Order.Test.Api.Cest.Order.UserChangeEntityCest.checkHeadRequest)",
    "status": "pass",
    "time": 0.45393109321594,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "has e tag header (CG.Order.Test.Api.Cest.Order.UserChangeEntityCest.hasETagHeader)"
}{
    "event": "test",
    "suite": "api",
    "test": "has e tag header (CG.Order.Test.Api.Cest.Order.UserChangeEntityCest.hasETagHeader)",
    "status": "pass",
    "time": 0.35532784461975,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "get a 304 when i send the etag on a second get request (CG.Order.Test.Api.Cest.Order.UserChangeEntityCest.sendETagGet304)"
}{
    "event": "test",
    "suite": "api",
    "test": "get a 304 when i send the etag on a second get request (CG.Order.Test.Api.Cest.Order.UserChangeEntityCest.sendETagGet304)",
    "status": "pass",
    "time": 0.4230809211731,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check that if i send an invalid etag i get the entity (CG.Order.Test.Api.Cest.Order.UserChangeEntityCest.sendInvalidETagGetNewETag)"
}{
    "event": "test",
    "suite": "api",
    "test": "check that if i send an invalid etag i get the entity (CG.Order.Test.Api.Cest.Order.UserChangeEntityCest.sendInvalidETagGetNewETag)",
    "status": "pass",
    "time": 0.35529708862305,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "update the primary entity with matching etag (CG.Order.Test.Api.Cest.Order.UserChangeEntityCest.updateEntityWithETag)"
}{
    "event": "test",
    "suite": "api",
    "test": "update the primary entity with matching etag (CG.Order.Test.Api.Cest.Order.UserChangeEntityCest.updateEntityWithETag)",
    "status": "pass",
    "time": 0.4315299987793,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "update the primary entity with matching etag then get (CG.Order.Test.Api.Cest.Order.UserChangeEntityCest.updateEntityWithETagThenGet)"
}{
    "event": "test",
    "suite": "api",
    "test": "update the primary entity with matching etag then get (CG.Order.Test.Api.Cest.Order.UserChangeEntityCest.updateEntityWithETagThenGet)",
    "status": "pass",
    "time": 0.53927206993103,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "update the primary entity with matching etag and identical data (CG.Order.Test.Api.Cest.Order.UserChangeEntityCest.updateEntityWithETagAndIdenticalData)"
}{
    "event": "test",
    "suite": "api",
    "test": "update the primary entity with matching etag and identical data (CG.Order.Test.Api.Cest.Order.UserChangeEntityCest.updateEntityWithETagAndIdenticalData)",
    "status": "pass",
    "time": 0.45015811920166,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check i can't update the primary entity with an invalid etag (CG.Order.Test.Api.Cest.Order.UserChangeEntityCest.updateEntityWithInvalidETag)"
}{
    "event": "test",
    "suite": "api",
    "test": "check i can't update the primary entity with an invalid etag (CG.Order.Test.Api.Cest.Order.UserChangeEntityCest.updateEntityWithInvalidETag)",
    "status": "pass",
    "time": 0.32921600341797,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check i can't update the primary entity with an invalid etag and identical data (CG.Order.Test.Api.Cest.Order.UserChangeEntityCest.updateEntityWithInvalidETagAndIdenticalData)"
}{
    "event": "test",
    "suite": "api",
    "test": "check i can't update the primary entity with an invalid etag and identical data (CG.Order.Test.Api.Cest.Order.UserChangeEntityCest.updateEntityWithInvalidETagAndIdenticalData)",
    "status": "pass",
    "time": 0.35528898239136,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check getting other entities doesn't cause \"\/order\/1411-10\/userchange\"'s etag to change (CG.Order.Test.Api.Cest.Order.UserChangeEntityCest.checkDuplicateClassNameETagIssue)"
}{
    "event": "test",
    "suite": "api",
    "test": "check getting other entities doesn't cause \"\/order\/1411-10\/userchange\"'s etag to change (CG.Order.Test.Api.Cest.Order.UserChangeEntityCest.checkDuplicateClassNameETagIssue)",
    "status": "pass",
    "time": 2.4406428337097,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "update the primary entity without etag (CG.Order.Test.Api.Cest.Order.UserChangeEntityCest.updateEntityWithoutEtagShouldFail)"
}{
    "event": "test",
    "suite": "api",
    "test": "update the primary entity without etag (CG.Order.Test.Api.Cest.Order.UserChangeEntityCest.updateEntityWithoutEtagShouldFail)",
    "status": "pass",
    "time": 0.35544681549072,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "update the primary entity with empty etag (CG.Order.Test.Api.Cest.Order.UserChangeEntityCest.updateEntityWithEmptyEtagShouldFail)"
}{
    "event": "test",
    "suite": "api",
    "test": "update the primary entity with empty etag (CG.Order.Test.Api.Cest.Order.UserChangeEntityCest.updateEntityWithEmptyEtagShouldFail)",
    "status": "pass",
    "time": 0.34076595306396,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check put children endpoints with wrong parent idwith e tags (CG.Order.Test.Api.Cest.Order.UserChangeEntityCest.checkPutChildrenEndpointsWithWrongParentIdwithETags)"
}{
    "event": "test",
    "suite": "api",
    "test": "check put children endpoints with wrong parent idwith e tags (CG.Order.Test.Api.Cest.Order.UserChangeEntityCest.checkPutChildrenEndpointsWithWrongParentIdwithETags)",
    "status": "pass",
    "time": 0.26237797737122,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "view a collection (CG.Order.Test.Api.Cest.OrderBatchCest.viewCollection)"
}{
    "event": "test",
    "suite": "api",
    "test": "view a collection (CG.Order.Test.Api.Cest.OrderBatchCest.viewCollection)",
    "status": "pass",
    "time": 0.36992287635803,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "view a collection by page (CG.Order.Test.Api.Cest.OrderBatchCest.checkPagination)"
}{
    "event": "test",
    "suite": "api",
    "test": "view a collection by page (CG.Order.Test.Api.Cest.OrderBatchCest.checkPagination)",
    "status": "pass",
    "time": 0.60987401008606,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "view a collection by page (CG.Order.Test.Api.Cest.OrderBatchCest.checkCollectionCache)"
}{
    "event": "test",
    "suite": "api",
    "test": "view a collection by page (CG.Order.Test.Api.Cest.OrderBatchCest.checkCollectionCache)",
    "status": "pass",
    "time": 0.43205499649048,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "has filters (CG.Order.Test.Api.Cest.OrderBatchCest.hasFilters)"
}{
    "event": "test",
    "suite": "api",
    "test": "has filters (CG.Order.Test.Api.Cest.OrderBatchCest.hasFilters)",
    "status": "pass",
    "time": 0.27800798416138,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check filters work for this collection (CG.Order.Test.Api.Cest.OrderBatchCest.checkFilters)"
}{
    "event": "test",
    "suite": "api",
    "test": "check filters work for this collection (CG.Order.Test.Api.Cest.OrderBatchCest.checkFilters)",
    "status": "pass",
    "time": 0.35279679298401,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check filters work for this collection (CG.Order.Test.Api.Cest.OrderBatchCest.checkMultiFilters)"
}{
    "event": "test",
    "suite": "api",
    "test": "check filters work for this collection (CG.Order.Test.Api.Cest.OrderBatchCest.checkMultiFilters)",
    "status": "pass",
    "time": 0.38427996635437,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "create entity (CG.Order.Test.Api.Cest.OrderBatchCest.createEntity)"
}{
    "event": "test",
    "suite": "api",
    "test": "create entity (CG.Order.Test.Api.Cest.OrderBatchCest.createEntity)",
    "status": "pass",
    "time": 0.2480628490448,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "create entity then get (CG.Order.Test.Api.Cest.OrderBatchCest.createEntityThenGet)"
}{
    "event": "test",
    "suite": "api",
    "test": "create entity then get (CG.Order.Test.Api.Cest.OrderBatchCest.createEntityThenGet)",
    "status": "pass",
    "time": 0.29807090759277,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "create entity then get collection (CG.Order.Test.Api.Cest.OrderBatchCest.createEntityThenGetCollection)"
}{
    "event": "test",
    "suite": "api",
    "test": "create entity then get collection (CG.Order.Test.Api.Cest.OrderBatchCest.createEntityThenGetCollection)",
    "status": "pass",
    "time": 0.30229616165161,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "create entity then get collection with filters (CG.Order.Test.Api.Cest.OrderBatchCest.createEntityThenGetCollectionWithFilters)"
}{
    "event": "test",
    "suite": "api",
    "test": "create entity then get collection with filters (CG.Order.Test.Api.Cest.OrderBatchCest.createEntityThenGetCollectionWithFilters)",
    "status": "pass",
    "time": 0.25922322273254,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "create entity put entity then get collection (CG.Order.Test.Api.Cest.OrderBatchCest.createEntityPutEntityThenGetCollection)"
}{
    "event": "test",
    "suite": "api",
    "test": "create entity put entity then get collection (CG.Order.Test.Api.Cest.OrderBatchCest.createEntityPutEntityThenGetCollection)",
    "status": "pass",
    "time": 0.2750129699707,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "create empty entity (CG.Order.Test.Api.Cest.OrderBatchCest.createEmptyEntity)"
}{
    "event": "test",
    "suite": "api",
    "test": "create empty entity (CG.Order.Test.Api.Cest.OrderBatchCest.createEmptyEntity)",
    "status": "pass",
    "time": 0.2483959197998,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "create invalid entity (CG.Order.Test.Api.Cest.OrderBatchCest.createInvalidEntity)"
}{
    "event": "test",
    "suite": "api",
    "test": "create invalid entity (CG.Order.Test.Api.Cest.OrderBatchCest.createInvalidEntity)",
    "status": "pass",
    "time": 0.27152895927429,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "create entity with additional fields (CG.Order.Test.Api.Cest.OrderBatchCest.createEntityWithAdditionalFields)"
}{
    "event": "test",
    "suite": "api",
    "test": "create entity with additional fields (CG.Order.Test.Api.Cest.OrderBatchCest.createEntityWithAdditionalFields)",
    "status": "pass",
    "time": 0.30866408348083,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "create entity with invalid date range (CG.Order.Test.Api.Cest.OrderBatchCest.createEntityWithInvalidDateRange)"
}{
    "event": "test",
    "suite": "api",
    "test": "create entity with invalid date range (CG.Order.Test.Api.Cest.OrderBatchCest.createEntityWithInvalidDateRange)",
    "status": "pass",
    "time": 0.31209492683411,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "test single date filter (CG.Order.Test.Api.Cest.OrderBatchCest.testSingleDateFilter)"
}{
    "event": "test",
    "suite": "api",
    "test": "test single date filter (CG.Order.Test.Api.Cest.OrderBatchCest.testSingleDateFilter)",
    "status": "pass",
    "time": 0.25619196891785,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "test date range filter (CG.Order.Test.Api.Cest.OrderBatchCest.testDateRangeFilter)"
}{
    "event": "test",
    "suite": "api",
    "test": "test date range filter (CG.Order.Test.Api.Cest.OrderBatchCest.testDateRangeFilter)",
    "status": "pass",
    "time": 0.26480293273926,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "test range filters (CG.Order.Test.Api.Cest.OrderBatchCest.testRangeFilters)"
}{
    "event": "test",
    "suite": "api",
    "test": "test range filters (CG.Order.Test.Api.Cest.OrderBatchCest.testRangeFilters)",
    "status": "pass",
    "time": 0.26719093322754,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "test array filters. (CG.Order.Test.Api.Cest.OrderBatchCest.testArrayFiltersDontAcceptString)"
}{
    "event": "test",
    "suite": "api",
    "test": "test array filters. (CG.Order.Test.Api.Cest.OrderBatchCest.testArrayFiltersDontAcceptString)",
    "status": "pass",
    "time": 0.33501100540161,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "test string filters. (CG.Order.Test.Api.Cest.OrderBatchCest.testStringFiltersDontAcceptArray)"
}{
    "event": "test",
    "suite": "api",
    "test": "test string filters. (CG.Order.Test.Api.Cest.OrderBatchCest.testStringFiltersDontAcceptArray)",
    "status": "pass",
    "time": 0.34842991828918,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check search term filters (CG.Order.Test.Api.Cest.OrderBatchCest.checkSearchTermFilters)"
}{
    "event": "test",
    "suite": "api",
    "test": "check search term filters (CG.Order.Test.Api.Cest.OrderBatchCest.checkSearchTermFilters)",
    "status": "pass",
    "time": 0.28452682495117,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "see a resource endpoint contains hal (CG.Order.Test.Api.Cest.OrderBatchCest.viewInHal)"
}{
    "event": "test",
    "suite": "api",
    "test": "see a resource endpoint contains hal (CG.Order.Test.Api.Cest.OrderBatchCest.viewInHal)",
    "status": "pass",
    "time": 0.38034796714783,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check only the allowed methods are allowed (CG.Order.Test.Api.Cest.OrderBatchCest.checkAllowedMethods)"
}{
    "event": "test",
    "suite": "api",
    "test": "check only the allowed methods are allowed (CG.Order.Test.Api.Cest.OrderBatchCest.checkAllowedMethods)",
    "status": "pass",
    "time": 0.5335750579834,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check the up link is set as the parents url (CG.Order.Test.Api.Cest.OrderBatchCest.checkUplink)"
}{
    "event": "test",
    "suite": "api",
    "test": "check the up link is set as the parents url (CG.Order.Test.Api.Cest.OrderBatchCest.checkUplink)",
    "status": "pass",
    "time": 0.37471890449524,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check headers for head request and that body is empty (CG.Order.Test.Api.Cest.OrderBatchCest.checkHeadRequest)"
}{
    "event": "test",
    "suite": "api",
    "test": "check headers for head request and that body is empty (CG.Order.Test.Api.Cest.OrderBatchCest.checkHeadRequest)",
    "status": "pass",
    "time": 0.44186806678772,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "create entity then get collection multiple times (CG.Order.Test.Api.Cest.OrderBatchCest.createEntityThenGetCollectionMultipleTimes)"
}{
    "event": "test",
    "suite": "api",
    "test": "create entity then get collection multiple times (CG.Order.Test.Api.Cest.OrderBatchCest.createEntityThenGetCollectionMultipleTimes)",
    "status": "pass",
    "time": 0.27293395996094,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "create entity then get collection multiple times from existing (CG.Order.Test.Api.Cest.OrderBatchCest.createEntityThenGetCollectionMultipleTimesFromExisting)"
}{
    "event": "test",
    "suite": "api",
    "test": "create entity then get collection multiple times from existing (CG.Order.Test.Api.Cest.OrderBatchCest.createEntityThenGetCollectionMultipleTimesFromExisting)",
    "status": "pass",
    "time": 0.25066494941711,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "view a collection (CG.Order.Test.Api.Cest.OrderBatchCest.viewCollectionAll)"
}{
    "event": "test",
    "suite": "api",
    "test": "view a collection (CG.Order.Test.Api.Cest.OrderBatchCest.viewCollectionAll)",
    "status": "pass",
    "time": 0.36635518074036,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "view a collection (CG.Order.Test.Api.Cest.OrderBatchCest.viewCollectionZeroLimit)"
}{
    "event": "test",
    "suite": "api",
    "test": "view a collection (CG.Order.Test.Api.Cest.OrderBatchCest.viewCollectionZeroLimit)",
    "status": "pass",
    "time": 0.33434104919434,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check filters work for this collection with pagination (CG.Order.Test.Api.Cest.OrderBatchCest.checkFiltersPagination)"
}{
    "event": "test",
    "suite": "api",
    "test": "check filters work for this collection with pagination (CG.Order.Test.Api.Cest.OrderBatchCest.checkFiltersPagination)",
    "status": "pass",
    "time": 0.55508494377136,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "test timestamp filter (CG.Order.Test.Api.Cest.OrderBatchCest.testTimestampFilter)"
}{
    "event": "test",
    "suite": "api",
    "test": "test timestamp filter (CG.Order.Test.Api.Cest.OrderBatchCest.testTimestampFilter)",
    "status": "pass",
    "time": 0.28221297264099,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "test timestamp range filters (CG.Order.Test.Api.Cest.OrderBatchCest.testTimestampRangeFilters)"
}{
    "event": "test",
    "suite": "api",
    "test": "test timestamp range filters (CG.Order.Test.Api.Cest.OrderBatchCest.testTimestampRangeFilters)",
    "status": "pass",
    "time": 0.29904294013977,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "view the primary entity (CG.Order.Test.Api.Cest.OrderBatchEntityCest.viewPrimaryEntity)"
}{
    "event": "test",
    "suite": "api",
    "test": "view the primary entity (CG.Order.Test.Api.Cest.OrderBatchEntityCest.viewPrimaryEntity)",
    "status": "pass",
    "time": 0.38294005393982,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "view the secondary entity (CG.Order.Test.Api.Cest.OrderBatchEntityCest.viewSecondaryEntity)"
}{
    "event": "test",
    "suite": "api",
    "test": "view the secondary entity (CG.Order.Test.Api.Cest.OrderBatchEntityCest.viewSecondaryEntity)",
    "status": "pass",
    "time": 0.36617088317871,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check i can not view a non existent entity (CG.Order.Test.Api.Cest.OrderBatchEntityCest.viewNonExistentEntity)"
}{
    "event": "test",
    "suite": "api",
    "test": "check i can not view a non existent entity (CG.Order.Test.Api.Cest.OrderBatchEntityCest.viewNonExistentEntity)",
    "status": "pass",
    "time": 0.37519192695618,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "update primary entity (CG.Order.Test.Api.Cest.OrderBatchEntityCest.updatePrimaryEntity)"
}{
    "event": "test",
    "suite": "api",
    "test": "update primary entity (CG.Order.Test.Api.Cest.OrderBatchEntityCest.updatePrimaryEntity)",
    "status": "pass",
    "time": 3.3134031295776,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "update primary entity then get (CG.Order.Test.Api.Cest.OrderBatchEntityCest.updatePrimaryEntityThenGet)"
}{
    "event": "test",
    "suite": "api",
    "test": "update primary entity then get (CG.Order.Test.Api.Cest.OrderBatchEntityCest.updatePrimaryEntityThenGet)",
    "status": "pass",
    "time": 0.27239990234375,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "update primary entity with empty data (CG.Order.Test.Api.Cest.OrderBatchEntityCest.updatePrimaryEntityWithEmptyData)"
}{
    "event": "test",
    "suite": "api",
    "test": "update primary entity with empty data (CG.Order.Test.Api.Cest.OrderBatchEntityCest.updatePrimaryEntityWithEmptyData)",
    "status": "pass",
    "time": 0.25938200950623,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "update primary entity with invalid data (CG.Order.Test.Api.Cest.OrderBatchEntityCest.updatePrimaryEntityWithInvalidData)"
}{
    "event": "test",
    "suite": "api",
    "test": "update primary entity with invalid data (CG.Order.Test.Api.Cest.OrderBatchEntityCest.updatePrimaryEntityWithInvalidData)",
    "status": "pass",
    "time": 0.27906584739685,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "update primary entity with additional fields (CG.Order.Test.Api.Cest.OrderBatchEntityCest.updatePrimaryEntityWithAdditionalFields)"
}{
    "event": "test",
    "suite": "api",
    "test": "update primary entity with additional fields (CG.Order.Test.Api.Cest.OrderBatchEntityCest.updatePrimaryEntityWithAdditionalFields)",
    "status": "pass",
    "time": 0.29446506500244,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check i delete the primary entity (CG.Order.Test.Api.Cest.OrderBatchEntityCest.deletePrimaryEntity)"
}{
    "event": "test",
    "suite": "api",
    "test": "check i delete the primary entity (CG.Order.Test.Api.Cest.OrderBatchEntityCest.deletePrimaryEntity)",
    "status": "pass",
    "time": 0.38782286643982,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check i delete the primary entity (CG.Order.Test.Api.Cest.OrderBatchEntityCest.deletePrimaryEntityWithGet)"
}{
    "event": "test",
    "suite": "api",
    "test": "check i delete the primary entity (CG.Order.Test.Api.Cest.OrderBatchEntityCest.deletePrimaryEntityWithGet)",
    "status": "pass",
    "time": 0.40084981918335,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check i delete the primary entity (CG.Order.Test.Api.Cest.OrderBatchEntityCest.deletePrimaryEntityWithGetCollection)"
}{
    "event": "test",
    "suite": "api",
    "test": "check i delete the primary entity (CG.Order.Test.Api.Cest.OrderBatchEntityCest.deletePrimaryEntityWithGetCollection)",
    "status": "pass",
    "time": 0.4685230255127,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check i can not delete a non existent entity (CG.Order.Test.Api.Cest.OrderBatchEntityCest.deleteNonExistentEntity)"
}{
    "event": "test",
    "suite": "api",
    "test": "check i can not delete a non existent entity (CG.Order.Test.Api.Cest.OrderBatchEntityCest.deleteNonExistentEntity)",
    "status": "pass",
    "time": 0.34747195243835,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check entity embed (CG.Order.Test.Api.Cest.OrderBatchEntityCest.checkEntityEmbed)"
}{
    "event": "test",
    "suite": "api",
    "test": "check entity embed (CG.Order.Test.Api.Cest.OrderBatchEntityCest.checkEntityEmbed)",
    "status": "pass",
    "time": 0.29348587989807,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check children endpoints with wrong parent id (CG.Order.Test.Api.Cest.OrderBatchEntityCest.checkChildrenEndpointsWithWrongParentId)"
}{
    "event": "test",
    "suite": "api",
    "test": "check children endpoints with wrong parent id (CG.Order.Test.Api.Cest.OrderBatchEntityCest.checkChildrenEndpointsWithWrongParentId)",
    "status": "pass",
    "time": 0.29336595535278,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check put children endpoints with wrong parent id (CG.Order.Test.Api.Cest.OrderBatchEntityCest.checkPutChildrenEndpointsWithWrongParentId)"
}{
    "event": "test",
    "suite": "api",
    "test": "check put children endpoints with wrong parent id (CG.Order.Test.Api.Cest.OrderBatchEntityCest.checkPutChildrenEndpointsWithWrongParentId)",
    "status": "pass",
    "time": 0.28841400146484,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "see a resource endpoint contains hal (CG.Order.Test.Api.Cest.OrderBatchEntityCest.viewInHal)"
}{
    "event": "test",
    "suite": "api",
    "test": "see a resource endpoint contains hal (CG.Order.Test.Api.Cest.OrderBatchEntityCest.viewInHal)",
    "status": "pass",
    "time": 0.37351202964783,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check only the allowed methods are allowed (CG.Order.Test.Api.Cest.OrderBatchEntityCest.checkAllowedMethods)"
}{
    "event": "test",
    "suite": "api",
    "test": "check only the allowed methods are allowed (CG.Order.Test.Api.Cest.OrderBatchEntityCest.checkAllowedMethods)",
    "status": "pass",
    "time": 0.44577383995056,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check the up link is set as the parents url (CG.Order.Test.Api.Cest.OrderBatchEntityCest.checkUplink)"
}{
    "event": "test",
    "suite": "api",
    "test": "check the up link is set as the parents url (CG.Order.Test.Api.Cest.OrderBatchEntityCest.checkUplink)",
    "status": "pass",
    "time": 0.36800193786621,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check headers for head request and that body is empty (CG.Order.Test.Api.Cest.OrderBatchEntityCest.checkHeadRequest)"
}{
    "event": "test",
    "suite": "api",
    "test": "check headers for head request and that body is empty (CG.Order.Test.Api.Cest.OrderBatchEntityCest.checkHeadRequest)",
    "status": "pass",
    "time": 0.45350813865662,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "has e tag header (CG.Order.Test.Api.Cest.OrderBatchEntityCest.hasETagHeader)"
}{
    "event": "test",
    "suite": "api",
    "test": "has e tag header (CG.Order.Test.Api.Cest.OrderBatchEntityCest.hasETagHeader)",
    "status": "pass",
    "time": 0.37280297279358,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "get a 304 when i send the etag on a second get request (CG.Order.Test.Api.Cest.OrderBatchEntityCest.sendETagGet304)"
}{
    "event": "test",
    "suite": "api",
    "test": "get a 304 when i send the etag on a second get request (CG.Order.Test.Api.Cest.OrderBatchEntityCest.sendETagGet304)",
    "status": "pass",
    "time": 0.39592313766479,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check that if i send an invalid etag i get the entity (CG.Order.Test.Api.Cest.OrderBatchEntityCest.sendInvalidETagGetNewETag)"
}{
    "event": "test",
    "suite": "api",
    "test": "check that if i send an invalid etag i get the entity (CG.Order.Test.Api.Cest.OrderBatchEntityCest.sendInvalidETagGetNewETag)",
    "status": "pass",
    "time": 0.35631704330444,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "update the primary entity with matching etag (CG.Order.Test.Api.Cest.OrderBatchEntityCest.updateEntityWithETag)"
}{
    "event": "test",
    "suite": "api",
    "test": "update the primary entity with matching etag (CG.Order.Test.Api.Cest.OrderBatchEntityCest.updateEntityWithETag)",
    "status": "fail",
    "time": 0.44202208518982,
    "trace": [
        {
            "file": "\/var\/www\/cg_app\/current\/tests\/api\/ApiGuy.php",
            "line": 222,
            "function": "runStep",
            "class": "Codeception\\Scenario",
            "type": "->",
            "args": [

            ]
        },
        {
            "file": "\/var\/www\/cg_app\/current\/vendor\/channelgrabber\/codeception\/CG\/Codeception\/Cest\/Rest\/EntityETagTrait.php",
            "line": 84,
            "function": "seeResponseCodeIs",
            "class": "ApiGuy",
            "type": "->",
            "args": [
                200
            ]
        }
    ],
    "message": "Failed asserting that 500 matches expected 200.",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "update the primary entity with matching etag then get (CG.Order.Test.Api.Cest.OrderBatchEntityCest.updateEntityWithETagThenGet)"
}{
    "event": "test",
    "suite": "api",
    "test": "update the primary entity with matching etag then get (CG.Order.Test.Api.Cest.OrderBatchEntityCest.updateEntityWithETagThenGet)",
    "status": "fail",
    "time": 0.46396994590759,
    "trace": [
        {
            "file": "\/var\/www\/cg_app\/current\/tests\/api\/ApiGuy.php",
            "line": 222,
            "function": "runStep",
            "class": "Codeception\\Scenario",
            "type": "->",
            "args": [

            ]
        },
        {
            "file": "\/var\/www\/cg_app\/current\/vendor\/channelgrabber\/codeception\/CG\/Codeception\/Cest\/Rest\/EntityETagTrait.php",
            "line": 108,
            "function": "seeResponseCodeIs",
            "class": "ApiGuy",
            "type": "->",
            "args": [
                200
            ]
        }
    ],
    "message": "Failed asserting that 500 matches expected 200.",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "update the primary entity with matching etag and identical data (CG.Order.Test.Api.Cest.OrderBatchEntityCest.updateEntityWithETagAndIdenticalData)"
}{
    "event": "test",
    "suite": "api",
    "test": "update the primary entity with matching etag and identical data (CG.Order.Test.Api.Cest.OrderBatchEntityCest.updateEntityWithETagAndIdenticalData)",
    "status": "pass",
    "time": 0.44625401496887,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check i can't update the primary entity with an invalid etag (CG.Order.Test.Api.Cest.OrderBatchEntityCest.updateEntityWithInvalidETag)"
}{
    "event": "test",
    "suite": "api",
    "test": "check i can't update the primary entity with an invalid etag (CG.Order.Test.Api.Cest.OrderBatchEntityCest.updateEntityWithInvalidETag)",
    "status": "pass",
    "time": 0.37148189544678,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check i can't update the primary entity with an invalid etag and identical data (CG.Order.Test.Api.Cest.OrderBatchEntityCest.updateEntityWithInvalidETagAndIdenticalData)"
}{
    "event": "test",
    "suite": "api",
    "test": "check i can't update the primary entity with an invalid etag and identical data (CG.Order.Test.Api.Cest.OrderBatchEntityCest.updateEntityWithInvalidETagAndIdenticalData)",
    "status": "pass",
    "time": 0.38481998443604,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check getting other entities doesn't cause \"\/orderbatch\/1-1\"'s etag to change (CG.Order.Test.Api.Cest.OrderBatchEntityCest.checkDuplicateClassNameETagIssue)"
}{
    "event": "test",
    "suite": "api",
    "test": "check getting other entities doesn't cause \"\/orderbatch\/1-1\"'s etag to change (CG.Order.Test.Api.Cest.OrderBatchEntityCest.checkDuplicateClassNameETagIssue)",
    "status": "pass",
    "time": 2.2846689224243,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "update the primary entity without etag (CG.Order.Test.Api.Cest.OrderBatchEntityCest.updateEntityWithoutEtagShouldFail)"
}{
    "event": "test",
    "suite": "api",
    "test": "update the primary entity without etag (CG.Order.Test.Api.Cest.OrderBatchEntityCest.updateEntityWithoutEtagShouldFail)",
    "status": "pass",
    "time": 0.38644099235535,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "update the primary entity with empty etag (CG.Order.Test.Api.Cest.OrderBatchEntityCest.updateEntityWithEmptyEtagShouldFail)"
}{
    "event": "test",
    "suite": "api",
    "test": "update the primary entity with empty etag (CG.Order.Test.Api.Cest.OrderBatchEntityCest.updateEntityWithEmptyEtagShouldFail)",
    "status": "pass",
    "time": 0.38587999343872,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check put children endpoints with wrong parent idwith e tags (CG.Order.Test.Api.Cest.OrderBatchEntityCest.checkPutChildrenEndpointsWithWrongParentIdwithETags)"
}{
    "event": "test",
    "suite": "api",
    "test": "check put children endpoints with wrong parent idwith e tags (CG.Order.Test.Api.Cest.OrderBatchEntityCest.checkPutChildrenEndpointsWithWrongParentIdwithETags)",
    "status": "pass",
    "time": 0.26855993270874,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check posting to \/orderfilter and then filtering by orderfilter returns correct orders (CG.Order.Test.Api.Cest.OrderCest.postingFilterAndFilteringOrdersByFilterIdReturnsExpectedResults)"
}{
    "event": "test",
    "suite": "api",
    "test": "check posting to \/orderfilter and then filtering by orderfilter returns correct orders (CG.Order.Test.Api.Cest.OrderCest.postingFilterAndFilteringOrdersByFilterIdReturnsExpectedResults)",
    "status": "pass",
    "time": 0.59519100189209,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check sending mutually exclusive filters throw a 400 bad request (CG.Order.Test.Api.Cest.OrderCest.requestingMutuallyExclusiveFiltersReturns400)"
}{
    "event": "test",
    "suite": "api",
    "test": "check sending mutually exclusive filters throw a 400 bad request (CG.Order.Test.Api.Cest.OrderCest.requestingMutuallyExclusiveFiltersReturns400)",
    "status": "pass",
    "time": 0.35516500473022,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "see the order collection returns correct results when filtered by country (CG.Order.Test.Api.Cest.OrderCest.checkCountryFilter)"
}{
    "event": "test",
    "suite": "api",
    "test": "see the order collection returns correct results when filtered by country (CG.Order.Test.Api.Cest.OrderCest.checkCountryFilter)",
    "status": "fail",
    "time": 0.41465306282043,
    "trace": [
        {
            "file": "\/var\/www\/cg_app\/current\/tests\/api\/ApiGuy.php",
            "line": 222,
            "function": "runStep",
            "class": "Codeception\\Scenario",
            "type": "->",
            "args": [

            ]
        },
        {
            "file": "\/var\/www\/cg_app\/current\/tests\/api\/CG\/Order\/Test\/Api\/Cest\/OrderCest.php",
            "line": 78,
            "function": "seeResponseCodeIs",
            "class": "ApiGuy",
            "type": "->",
            "args": [
                200
            ]
        }
    ],
    "message": "Failed asserting that 404 matches expected 200.",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "see the order collection returns correct results when filtered by country (CG.Order.Test.Api.Cest.OrderCest.checkCountryExcludeFilter)"
}{
    "event": "test",
    "suite": "api",
    "test": "see the order collection returns correct results when filtered by country (CG.Order.Test.Api.Cest.OrderCest.checkCountryExcludeFilter)",
    "status": "pass",
    "time": 0.46898818016052,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "see the order collection returns correct results when filtered by multiline orders (CG.Order.Test.Api.Cest.OrderCest.checkMultiLineFilter)"
}{
    "event": "test",
    "suite": "api",
    "test": "see the order collection returns correct results when filtered by multiline orders (CG.Order.Test.Api.Cest.OrderCest.checkMultiLineFilter)",
    "status": "fail",
    "time": 0.54927706718445,
    "trace": [
        {
            "file": "\/var\/www\/cg_app\/current\/vendor\/channelgrabber\/codeception\/CG\/Codeception\/ApiHelper.php",
            "line": 117,
            "function": "fail",
            "class": "Codeception\\Module",
            "type": "->",
            "args": [
                "Failed asserting that 5 is equal to 1"
            ]
        },
        {
            "file": "\/var\/www\/cg_app\/current\/vendor\/channelgrabber\/codeception\/CG\/Codeception\/ApiHelper.php",
            "line": 95,
            "function": "isOfSize",
            "class": "CG\\Codeception\\ApiHelper",
            "type": "->",
            "args": [
                5,
                1
            ]
        },
        {
            "file": "\/var\/www\/cg_app\/current\/vendor\/channelgrabber\/codeception\/CG\/Codeception\/ApiHelper.php",
            "line": 38,
            "function": "seeFieldIsOfSize",
            "class": "CG\\Codeception\\ApiHelper",
            "type": "->",
            "args": [
                "_embedded.order",
                1
            ]
        },
        {
            "file": "\/var\/www\/cg_app\/current\/tests\/api\/ApiGuy.php",
            "line": 2889,
            "function": "runStep",
            "class": "Codeception\\Scenario",
            "type": "->",
            "args": [

            ]
        },
        {
            "file": "\/var\/www\/cg_app\/current\/tests\/api\/CG\/Order\/Test\/Api\/Cest\/OrderCest.php",
            "line": 127,
            "function": "seeEmbeddedTypeIsOfSize",
            "class": "ApiGuy",
            "type": "->",
            "args": [
                "order",
                1
            ]
        }
    ],
    "message": "Failed asserting that 5 is equal to 1",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "see the order collection returns correct results when filtered by multi same item orders (CG.Order.Test.Api.Cest.OrderCest.checkMultiSameItemFilter)"
}{
    "event": "test",
    "suite": "api",
    "test": "see the order collection returns correct results when filtered by multi same item orders (CG.Order.Test.Api.Cest.OrderCest.checkMultiSameItemFilter)",
    "status": "fail",
    "time": 0.51714205741882,
    "trace": [
        {
            "file": "\/var\/www\/cg_app\/current\/vendor\/channelgrabber\/codeception\/CG\/Codeception\/ApiHelper.php",
            "line": 117,
            "function": "fail",
            "class": "Codeception\\Module",
            "type": "->",
            "args": [
                "Failed asserting that 5 is equal to 2"
            ]
        },
        {
            "file": "\/var\/www\/cg_app\/current\/vendor\/channelgrabber\/codeception\/CG\/Codeception\/ApiHelper.php",
            "line": 95,
            "function": "isOfSize",
            "class": "CG\\Codeception\\ApiHelper",
            "type": "->",
            "args": [
                5,
                2
            ]
        },
        {
            "file": "\/var\/www\/cg_app\/current\/vendor\/channelgrabber\/codeception\/CG\/Codeception\/ApiHelper.php",
            "line": 38,
            "function": "seeFieldIsOfSize",
            "class": "CG\\Codeception\\ApiHelper",
            "type": "->",
            "args": [
                "_embedded.order",
                2
            ]
        },
        {
            "file": "\/var\/www\/cg_app\/current\/tests\/api\/ApiGuy.php",
            "line": 2889,
            "function": "runStep",
            "class": "Codeception\\Scenario",
            "type": "->",
            "args": [

            ]
        },
        {
            "file": "\/var\/www\/cg_app\/current\/tests\/api\/CG\/Order\/Test\/Api\/Cest\/OrderCest.php",
            "line": 155,
            "function": "seeEmbeddedTypeIsOfSize",
            "class": "ApiGuy",
            "type": "->",
            "args": [
                "order",
                2
            ]
        }
    ],
    "message": "Failed asserting that 5 is equal to 2",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check archive filter works for this collection (CG.Order.Test.Api.Cest.OrderCest.checkIncludeArchivedFilter)"
}{
    "event": "test",
    "suite": "api",
    "test": "check archive filter works for this collection (CG.Order.Test.Api.Cest.OrderCest.checkIncludeArchivedFilter)",
    "status": "fail",
    "time": 0.40981483459473,
    "trace": [
        {
            "file": "\/var\/www\/cg_app\/current\/vendor\/channelgrabber\/codeception\/CG\/Codeception\/ApiHelper.php",
            "line": 262,
            "function": "fail",
            "class": "Codeception\\Module",
            "type": "->",
            "args": [
                "Response Json does not have required key: _embedded.order"
            ]
        },
        {
            "file": "\/var\/www\/cg_app\/current\/vendor\/channelgrabber\/codeception\/CG\/Codeception\/ApiHelper.php",
            "line": 268,
            "function": "seeJsonHasField",
            "class": "CG\\Codeception\\ApiHelper",
            "type": "->",
            "args": [
                "_embedded.order"
            ]
        },
        {
            "file": "\/var\/www\/cg_app\/current\/vendor\/channelgrabber\/codeception\/CG\/Codeception\/ApiHelper.php",
            "line": 276,
            "function": "getArrayFromJsonField",
            "class": "CG\\Codeception\\ApiHelper",
            "type": "->",
            "args": [
                "_embedded.order"
            ]
        },
        {
            "file": "\/var\/www\/cg_app\/current\/tests\/api\/ApiGuy.php",
            "line": 3410,
            "function": "runStep",
            "class": "Codeception\\Scenario",
            "type": "->",
            "args": [

            ]
        },
        {
            "file": "\/var\/www\/cg_app\/current\/tests\/api\/CG\/Order\/Test\/Api\/Cest\/OrderCest.php",
            "line": 182,
            "function": "seeJsonFieldContainsArrayValues",
            "class": "ApiGuy",
            "type": "->",
            "args": [
                "_embedded.order",
                [

                ]
            ]
        }
    ],
    "message": "Response Json does not have required key: _embedded.order",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "view a collection (CG.Order.Test.Api.Cest.OrderCest.viewCollection)"
}{
    "event": "test",
    "suite": "api",
    "test": "view a collection (CG.Order.Test.Api.Cest.OrderCest.viewCollection)",
    "status": "pass",
    "time": 0.49278497695923,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "view a collection by page (CG.Order.Test.Api.Cest.OrderCest.checkPagination)"
}{
    "event": "test",
    "suite": "api",
    "test": "view a collection by page (CG.Order.Test.Api.Cest.OrderCest.checkPagination)",
    "status": "pass",
    "time": 0.9736340045929,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "view a collection by page (CG.Order.Test.Api.Cest.OrderCest.checkCollectionCache)"
}{
    "event": "test",
    "suite": "api",
    "test": "view a collection by page (CG.Order.Test.Api.Cest.OrderCest.checkCollectionCache)",
    "status": "pass",
    "time": 0.55670595169067,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "has filters (CG.Order.Test.Api.Cest.OrderCest.hasFilters)"
}{
    "event": "test",
    "suite": "api",
    "test": "has filters (CG.Order.Test.Api.Cest.OrderCest.hasFilters)",
    "status": "pass",
    "time": 0.27369713783264,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check filters work for this collection (CG.Order.Test.Api.Cest.OrderCest.checkFilters)"
}{
    "event": "test",
    "suite": "api",
    "test": "check filters work for this collection (CG.Order.Test.Api.Cest.OrderCest.checkFilters)",
    "status": "pass",
    "time": 0.46481704711914,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check filters work for this collection (CG.Order.Test.Api.Cest.OrderCest.checkMultiFilters)"
}{
    "event": "test",
    "suite": "api",
    "test": "check filters work for this collection (CG.Order.Test.Api.Cest.OrderCest.checkMultiFilters)",
    "status": "pass",
    "time": 0.45449686050415,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "create entity (CG.Order.Test.Api.Cest.OrderCest.createEntity)"
}{
    "event": "test",
    "suite": "api",
    "test": "create entity (CG.Order.Test.Api.Cest.OrderCest.createEntity)",
    "status": "pass",
    "time": 0.23156881332397,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "create entity then get (CG.Order.Test.Api.Cest.OrderCest.createEntityThenGet)"
}{
    "event": "test",
    "suite": "api",
    "test": "create entity then get (CG.Order.Test.Api.Cest.OrderCest.createEntityThenGet)",
    "status": "pass",
    "time": 0.28474998474121,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "create entity then get collection (CG.Order.Test.Api.Cest.OrderCest.createEntityThenGetCollection)"
}{
    "event": "test",
    "suite": "api",
    "test": "create entity then get collection (CG.Order.Test.Api.Cest.OrderCest.createEntityThenGetCollection)",
    "status": "pass",
    "time": 0.30088210105896,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "create entity then get collection with filters (CG.Order.Test.Api.Cest.OrderCest.createEntityThenGetCollectionWithFilters)"
}{
    "event": "test",
    "suite": "api",
    "test": "create entity then get collection with filters (CG.Order.Test.Api.Cest.OrderCest.createEntityThenGetCollectionWithFilters)",
    "status": "pass",
    "time": 0.29276299476624,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "create entity put entity then get collection (CG.Order.Test.Api.Cest.OrderCest.createEntityPutEntityThenGetCollection)"
}{
    "event": "test",
    "suite": "api",
    "test": "create entity put entity then get collection (CG.Order.Test.Api.Cest.OrderCest.createEntityPutEntityThenGetCollection)",
    "status": "pass",
    "time": 0.31460499763489,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "create empty entity (CG.Order.Test.Api.Cest.OrderCest.createEmptyEntity)"
}{
    "event": "test",
    "suite": "api",
    "test": "create empty entity (CG.Order.Test.Api.Cest.OrderCest.createEmptyEntity)",
    "status": "pass",
    "time": 0.25369811058044,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "create invalid entity (CG.Order.Test.Api.Cest.OrderCest.createInvalidEntity)"
}{
    "event": "test",
    "suite": "api",
    "test": "create invalid entity (CG.Order.Test.Api.Cest.OrderCest.createInvalidEntity)",
    "status": "pass",
    "time": 0.25250697135925,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "create entity with additional fields (CG.Order.Test.Api.Cest.OrderCest.createEntityWithAdditionalFields)"
}{
    "event": "test",
    "suite": "api",
    "test": "create entity with additional fields (CG.Order.Test.Api.Cest.OrderCest.createEntityWithAdditionalFields)",
    "status": "pass",
    "time": 0.28071403503418,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "create entity with invalid date range (CG.Order.Test.Api.Cest.OrderCest.createEntityWithInvalidDateRange)"
}{
    "event": "test",
    "suite": "api",
    "test": "create entity with invalid date range (CG.Order.Test.Api.Cest.OrderCest.createEntityWithInvalidDateRange)",
    "status": "pass",
    "time": 0.2512378692627,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "test single date filter (CG.Order.Test.Api.Cest.OrderCest.testSingleDateFilter)"
}{
    "event": "test",
    "suite": "api",
    "test": "test single date filter (CG.Order.Test.Api.Cest.OrderCest.testSingleDateFilter)",
    "status": "pass",
    "time": 0.28600597381592,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "test date range filter (CG.Order.Test.Api.Cest.OrderCest.testDateRangeFilter)"
}{
    "event": "test",
    "suite": "api",
    "test": "test date range filter (CG.Order.Test.Api.Cest.OrderCest.testDateRangeFilter)",
    "status": "pass",
    "time": 0.29108381271362,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "view a collection by a single range filter. (CG.Order.Test.Api.Cest.OrderCest.testRangeFilters)"
}{
    "event": "test",
    "suite": "api",
    "test": "view a collection by a single range filter. (CG.Order.Test.Api.Cest.OrderCest.testRangeFilters)",
    "status": "fail",
    "time": 0.34658193588257,
    "trace": [
        {
            "file": "\/var\/www\/cg_app\/current\/vendor\/channelgrabber\/codeception\/CG\/Codeception\/ApiHelper.php",
            "line": 262,
            "function": "fail",
            "class": "Codeception\\Module",
            "type": "->",
            "args": [
                "Response Json does not have required key: _embedded.order"
            ]
        },
        {
            "file": "\/var\/www\/cg_app\/current\/vendor\/channelgrabber\/codeception\/CG\/Codeception\/ApiHelper.php",
            "line": 268,
            "function": "seeJsonHasField",
            "class": "CG\\Codeception\\ApiHelper",
            "type": "->",
            "args": [
                "_embedded.order"
            ]
        },
        {
            "file": "\/var\/www\/cg_app\/current\/vendor\/channelgrabber\/codeception\/CG\/Codeception\/ApiHelper.php",
            "line": 276,
            "function": "getArrayFromJsonField",
            "class": "CG\\Codeception\\ApiHelper",
            "type": "->",
            "args": [
                "_embedded.order"
            ]
        },
        {
            "file": "\/var\/www\/cg_app\/current\/tests\/api\/ApiGuy.php",
            "line": 3410,
            "function": "runStep",
            "class": "Codeception\\Scenario",
            "type": "->",
            "args": [

            ]
        },
        {
            "file": "\/var\/www\/cg_app\/current\/vendor\/channelgrabber\/codeception\/CG\/Codeception\/Cest\/Rest\/CollectionTrait.php",
            "line": 653,
            "function": "seeJsonFieldContainsArrayValues",
            "class": "ApiGuy",
            "type": "->",
            "args": [
                "_embedded.order",
                [
                    {
                        "id": "1412-20",
                        "accountId": 1412,
                        "externalId": "20",
                        "channel": "ebay2",
                        "organisationUnitId": 2,
                        "total": 22.99,
                        "status": "2",
                        "shippingPrice": 20.99,
                        "shippingMethod": "standard2",
                        "currencyCode": "GBP",
                        "billingAddressCompanyName": "Company Name 2",
                        "billingAddressFullName": "Full Name 2",
                        "billingAddress1": "address 1 - 2",
                        "billingAddress2": "address 2 - 2",
                        "billingAddress3": "address 3 - 2",
                        "billingAddressCity": "City2",
                        "billingAddressCounty": "County2",
                        "billingAddressCountry": "UK",
                        "billingAddressPostcode": "Postcode2",
                        "billingEmailAddress": "emailaddress2@channelgrabber.com",
                        "billingPhoneNumber": "01942673432",
                        "billingAddressCountryCode": "GB",
                        "shippingAddressCompanyName": "Shipping Company Name 2",
                        "shippingAddressFullName": "Full Name 2",
                        "shippingAddress1": "shipping address 1 - 2",
                        "shippingAddress2": "shipping address 2 - 2",
                        "shippingAddress3": "shipping address 3 - 2",
                        "shippingAddressCity": "shipping City 2",
                        "shippingAddressCounty": "Shipping County 2",
                        "shippingAddressCountry": "UK",
                        "shippingAddressPostcode": "shipPostcode2",
                        "shippingEmailAddress": "shippingemail2@channelgrabber.com",
                        "shippingPhoneNumber": "07415878962",
                        "shippingAddressCountryCode": "GB",
                        "totalDiscount": 0.02,
                        "buyerMessage": "Hello, please leave at the door2",
                        "purchaseDate": "2013-10-10 00:20:00",
                        "paymentDate": "2013-10-10 01:20:00",
                        "printedDate": "2013-10-10 10:20:00",
                        "dispatchDate": "2013-10-10 10:20:10",
                        "archived": false,
                        "tag": [
                            "tag2",
                            "tag3"
                        ],
                        "cancellations": [

                        ],
                        "custom": [

                        ],
                        "batch": 1,
                        "paymentMethod": "paymentMethod2",
                        "paymentReference": "paymentReference2"
                    },
                    {
                        "id": "1413-30",
                        "accountId": 1413,
                        "externalId": "30",
                        "channel": "ebay3",
                        "organisationUnitId": 3,
                        "total": 23.99,
                        "status": "3",
                        "shippingPrice": 30.99,
                        "shippingMethod": "standard3",
                        "currencyCode": "GBP",
                        "billingAddressCompanyName": "Company Name 3",
                        "billingAddressFullName": "Full Name 3",
                        "billingAddress1": "address 1 - 3",
                        "billingAddress2": "address 2 - 3",
                        "billingAddress3": "address 3 - 3",
                        "billingAddressCity": "City3",
                        "billingAddressCounty": "County3",
                        "billingAddressCountry": "UK",
                        "billingAddressPostcode": "Postcode3",
                        "billingEmailAddress": "emailaddress3@channelgrabber.com",
                        "billingPhoneNumber": "01942673433",
                        "billingAddressCountryCode": "GB",
                        "shippingAddressCompanyName": "Shipping Company Name 3",
                        "shippingAddressFullName": "Full Name 3",
                        "shippingAddress1": "shipping address 1 - 3",
                        "shippingAddress2": "shipping address 2 - 3",
                        "shippingAddress3": "shipping address 3 - 3",
                        "shippingAddressCity": "shipping City 3",
                        "shippingAddressCounty": "Shipping County 3",
                        "shippingAddressCountry": "UK",
                        "shippingAddressPostcode": "shipPostcode3",
                        "shippingEmailAddress": "shippingemail3@channelgrabber.com",
                        "shippingPhoneNumber": "07415878963",
                        "shippingAddressCountryCode": "GB",
                        "totalDiscount": 0.03,
                        "buyerMessage": "Hello, please leave at the door3",
                        "purchaseDate": "2013-10-10 00:30:00",
                        "paymentDate": "2013-10-10 01:30:00",
                        "printedDate": "2013-10-10 10:30:00",
                        "dispatchDate": "2013-10-10 10:30:10",
                        "archived": false,
                        "tag": [
                            "tag3",
                            "tag4"
                        ],
                        "cancellations": [

                        ],
                        "custom": [

                        ],
                        "batch": 1,
                        "paymentMethod": "paymentMethod3",
                        "paymentReference": "paymentReference3"
                    },
                    {
                        "id": "1414-40",
                        "accountId": 1414,
                        "externalId": "40",
                        "channel": "ebay4",
                        "organisationUnitId": 4,
                        "total": 24.99,
                        "status": "4",
                        "shippingPrice": 40.99,
                        "shippingMethod": "standard4",
                        "currencyCode": "GBP",
                        "billingAddressCompanyName": "Company Name 4",
                        "billingAddressFullName": "Full Name 4",
                        "billingAddress1": "address 1 - 4",
                        "billingAddress2": "address 2 - 4",
                        "billingAddress3": "address 3 - 4",
                        "billingAddressCity": "City4",
                        "billingAddressCounty": "County4",
                        "billingAddressCountry": "UK",
                        "billingAddressPostcode": "Postcode4",
                        "billingEmailAddress": "emailaddress4@channelgrabber.com",
                        "billingPhoneNumber": "01942673434",
                        "billingAddressCountryCode": "GB",
                        "shippingAddressCompanyName": "Shipping Company Name 4",
                        "shippingAddressFullName": "Full Name 4",
                        "shippingAddress1": "shipping address 1 - 4",
                        "shippingAddress2": "shipping address 2 - 4",
                        "shippingAddress3": "shipping address 3 - 4",
                        "shippingAddressCity": "shipping City 4",
                        "shippingAddressCounty": "Shipping County 4",
                        "shippingAddressCountry": "UK",
                        "shippingAddressPostcode": "shipPostcode4",
                        "shippingEmailAddress": "shippingemail4@channelgrabber.com",
                        "shippingPhoneNumber": "07415878964",
                        "shippingAddressCountryCode": "GB",
                        "totalDiscount": 0.04,
                        "buyerMessage": "Hello, please leave at the door4",
                        "purchaseDate": "2013-10-10 00:40:00",
                        "paymentDate": "2013-10-10 01:40:00",
                        "printedDate": "2013-10-10 10:40:00",
                        "dispatchDate": "2013-10-10 10:40:10",
                        "archived": false,
                        "tag": [
                            "tag4",
                            "tag5"
                        ],
                        "cancellations": [

                        ],
                        "custom": [

                        ],
                        "batch": 1,
                        "paymentMethod": "paymentMethod4",
                        "paymentReference": "paymentReference4"
                    }
                ]
            ]
        }
    ],
    "message": "Response Json does not have required key: _embedded.order",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "test array filters. (CG.Order.Test.Api.Cest.OrderCest.testArrayFiltersDontAcceptString)"
}{
    "event": "test",
    "suite": "api",
    "test": "test array filters. (CG.Order.Test.Api.Cest.OrderCest.testArrayFiltersDontAcceptString)",
    "status": "pass",
    "time": 0.894611120224,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "test string filters dont accept array (CG.Order.Test.Api.Cest.OrderCest.testStringFiltersDontAcceptArray)"
}{
    "event": "test",
    "suite": "api",
    "test": "test string filters dont accept array (CG.Order.Test.Api.Cest.OrderCest.testStringFiltersDontAcceptArray)",
    "status": "pass",
    "time": 0.26659393310547,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "see the order collection returns correct results when filtered by searchterm (CG.Order.Test.Api.Cest.OrderCest.checkSearchTermFilters)"
}{
    "event": "test",
    "suite": "api",
    "test": "see the order collection returns correct results when filtered by searchterm (CG.Order.Test.Api.Cest.OrderCest.checkSearchTermFilters)",
    "status": "fail",
    "time": 3.8875660896301,
    "trace": [
        {
            "file": "\/var\/www\/cg_app\/current\/tests\/api\/ApiGuy.php",
            "line": 222,
            "function": "runStep",
            "class": "Codeception\\Scenario",
            "type": "->",
            "args": [

            ]
        },
        {
            "file": "\/var\/www\/cg_app\/current\/vendor\/channelgrabber\/codeception\/CG\/Codeception\/Cest\/Rest\/CollectionTrait.php",
            "line": 793,
            "function": "seeResponseCodeIs",
            "class": "ApiGuy",
            "type": "->",
            "args": [
                200
            ]
        },
        {
            "file": "\/var\/www\/cg_app\/current\/vendor\/channelgrabber\/codeception\/CG\/Codeception\/Cest\/Rest\/CollectionTrait.php",
            "line": 757,
            "function": "checkSearchTermFilter",
            "class": "CG\\Order\\Test\\Api\\Cest\\OrderCest",
            "type": "->",
            "args": [
                {

                },
                "test-sku-1",
                [

                ]
            ]
        }
    ],
    "message": "Failed asserting that 404 matches expected 200.",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "see a resource endpoint contains hal (CG.Order.Test.Api.Cest.OrderCest.viewInHal)"
}{
    "event": "test",
    "suite": "api",
    "test": "see a resource endpoint contains hal (CG.Order.Test.Api.Cest.OrderCest.viewInHal)",
    "status": "pass",
    "time": 0.47751498222351,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check only the allowed methods are allowed (CG.Order.Test.Api.Cest.OrderCest.checkAllowedMethods)"
}{
    "event": "test",
    "suite": "api",
    "test": "check only the allowed methods are allowed (CG.Order.Test.Api.Cest.OrderCest.checkAllowedMethods)",
    "status": "pass",
    "time": 0.49506807327271,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check the up link is set as the parents url (CG.Order.Test.Api.Cest.OrderCest.checkUplink)"
}{
    "event": "test",
    "suite": "api",
    "test": "check the up link is set as the parents url (CG.Order.Test.Api.Cest.OrderCest.checkUplink)",
    "status": "pass",
    "time": 0.52424192428589,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check headers for head request and that body is empty (CG.Order.Test.Api.Cest.OrderCest.checkHeadRequest)"
}{
    "event": "test",
    "suite": "api",
    "test": "check headers for head request and that body is empty (CG.Order.Test.Api.Cest.OrderCest.checkHeadRequest)",
    "status": "pass",
    "time": 0.69773101806641,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "create entity then get collection multiple times (CG.Order.Test.Api.Cest.OrderCest.createEntityThenGetCollectionMultipleTimes)"
}{
    "event": "test",
    "suite": "api",
    "test": "create entity then get collection multiple times (CG.Order.Test.Api.Cest.OrderCest.createEntityThenGetCollectionMultipleTimes)",
    "status": "pass",
    "time": 0.26502513885498,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "create entity then get collection multiple times from existing (CG.Order.Test.Api.Cest.OrderCest.createEntityThenGetCollectionMultipleTimesFromExisting)"
}{
    "event": "test",
    "suite": "api",
    "test": "create entity then get collection multiple times from existing (CG.Order.Test.Api.Cest.OrderCest.createEntityThenGetCollectionMultipleTimesFromExisting)",
    "status": "pass",
    "time": 0.25900101661682,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "view a collection (CG.Order.Test.Api.Cest.OrderCest.viewCollectionAll)"
}{
    "event": "test",
    "suite": "api",
    "test": "view a collection (CG.Order.Test.Api.Cest.OrderCest.viewCollectionAll)",
    "status": "pass",
    "time": 0.52990007400513,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "view a collection (CG.Order.Test.Api.Cest.OrderCest.viewCollectionZeroLimit)"
}{
    "event": "test",
    "suite": "api",
    "test": "view a collection (CG.Order.Test.Api.Cest.OrderCest.viewCollectionZeroLimit)",
    "status": "pass",
    "time": 0.35494422912598,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check filters work for this collection with pagination (CG.Order.Test.Api.Cest.OrderCest.checkFiltersPagination)"
}{
    "event": "test",
    "suite": "api",
    "test": "check filters work for this collection with pagination (CG.Order.Test.Api.Cest.OrderCest.checkFiltersPagination)",
    "status": "pass",
    "time": 3.1969470977783,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "test timestamp filter (CG.Order.Test.Api.Cest.OrderCest.testTimestampFilter)"
}{
    "event": "test",
    "suite": "api",
    "test": "test timestamp filter (CG.Order.Test.Api.Cest.OrderCest.testTimestampFilter)",
    "status": "pass",
    "time": 0.28081703186035,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "test timestamp range filters (CG.Order.Test.Api.Cest.OrderCest.testTimestampRangeFilters)"
}{
    "event": "test",
    "suite": "api",
    "test": "test timestamp range filters (CG.Order.Test.Api.Cest.OrderCest.testTimestampRangeFilters)",
    "status": "pass",
    "time": 0.29472804069519,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "get sort directions (CG.Order.Test.Api.Cest.OrderCest.getSortDirections)"
}{
    "event": "test",
    "suite": "api",
    "test": "get sort directions (CG.Order.Test.Api.Cest.OrderCest.getSortDirections)",
    "status": "pass",
    "time": 0.28075695037842,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check sort collection (CG.Order.Test.Api.Cest.OrderCest.checkSortCollection)"
}{
    "event": "test",
    "suite": "api",
    "test": "check sort collection (CG.Order.Test.Api.Cest.OrderCest.checkSortCollection)",
    "status": "fail",
    "time": 0.54855418205261,
    "trace": [
        {
            "file": "\/var\/www\/cg_app\/current\/vendor\/channelgrabber\/codeception\/CG\/Codeception\/ApiHelper.php",
            "line": 452,
            "function": "assertEquals",
            "class": "Codeception\\Module",
            "type": "->",
            "args": [
                [
                    {
                        "id": "1411-10",
                        "accountId": 1411,
                        "externalId": "10",
                        "channel": "ebay",
                        "organisationUnitId": 1,
                        "total": 21.99,
                        "status": "1",
                        "shippingPrice": 10.99,
                        "shippingMethod": "standard",
                        "currencyCode": "GBP",
                        "billingAddressCompanyName": "Company Name 1",
                        "billingAddressFullName": "Full Name 1",
                        "billingAddress1": "address 1 - 1",
                        "billingAddress2": "address 2 - 1",
                        "billingAddress3": "address 3 - 1",
                        "billingAddressCity": "City1",
                        "billingAddressCounty": "County1",
                        "billingAddressCountry": "UK",
                        "billingAddressPostcode": "Postcode1",
                        "billingEmailAddress": "emailaddress1@channelgrabber.com",
                        "billingPhoneNumber": "01942673431",
                        "billingAddressCountryCode": "GB",
                        "shippingAddressCompanyName": "Shipping Company Name 1",
                        "shippingAddressFullName": "Full Name 1",
                        "shippingAddress1": "shipping address 1 - 1",
                        "shippingAddress2": "shipping address 2 - 1",
                        "shippingAddress3": "shipping address 3 - 1",
                        "shippingAddressCity": "shipping City 1",
                        "shippingAddressCounty": "Shipping County 1",
                        "shippingAddressCountry": "UK",
                        "shippingAddressPostcode": "shipPostcode1",
                        "shippingEmailAddress": "shippingemail1@channelgrabber.com",
                        "shippingPhoneNumber": "07415878961",
                        "shippingAddressCountryCode": "GB",
                        "totalDiscount": 0,
                        "buyerMessage": "Hello, please leave at the door",
                        "purchaseDate": "2013-10-10 00:00:00",
                        "paymentDate": "2013-10-10 01:00:00",
                        "printedDate": "2013-10-10 10:00:00",
                        "dispatchDate": "2013-10-10 10:00:10",
                        "archived": false,
                        "tag": [
                            "tag1",
                            "tag2",
                            "tag5"
                        ],
                        "cancellations": [
                            {
                                "type": "cancel",
                                "timestamp": "2014-10-10 00:00:00",
                                "reason": "No Payment Received",
                                "shippingAmount": 10.99,
                                "items": [
                                    {
                                        "orderItemId": "1411-11",
                                        "sku": "test-sku-1",
                                        "quantity": 10,
                                        "amount": 0,
                                        "unitPrice": 1.99
                                    },
                                    {
                                        "orderItemId": "1411-11",
                                        "sku": "test-sku-1",
                                        "quantity": 0,
                                        "amount": 19.91,
                                        "unitPrice": 0
                                    }
                                ]
                            }
                        ],
                        "custom": [

                        ],
                        "batch": 1,
                        "paymentMethod": "paymentMethod1",
                        "paymentReference": "paymentReference1"
                    },
                    {
                        "id": "1412-20",
                        "accountId": 1412,
                        "externalId": "20",
                        "channel": "ebay2",
                        "organisationUnitId": 2,
                        "total": 22.99,
                        "status": "2",
                        "shippingPrice": 20.99,
                        "shippingMethod": "standard2",
                        "currencyCode": "GBP",
                        "billingAddressCompanyName": "Company Name 2",
                        "billingAddressFullName": "Full Name 2",
                        "billingAddress1": "address 1 - 2",
                        "billingAddress2": "address 2 - 2",
                        "billingAddress3": "address 3 - 2",
                        "billingAddressCity": "City2",
                        "billingAddressCounty": "County2",
                        "billingAddressCountry": "UK",
                        "billingAddressPostcode": "Postcode2",
                        "billingEmailAddress": "emailaddress2@channelgrabber.com",
                        "billingPhoneNumber": "01942673432",
                        "billingAddressCountryCode": "GB",
                        "shippingAddressCompanyName": "Shipping Company Name 2",
                        "shippingAddressFullName": "Full Name 2",
                        "shippingAddress1": "shipping address 1 - 2",
                        "shippingAddress2": "shipping address 2 - 2",
                        "shippingAddress3": "shipping address 3 - 2",
                        "shippingAddressCity": "shipping City 2",
                        "shippingAddressCounty": "Shipping County 2",
                        "shippingAddressCountry": "UK",
                        "shippingAddressPostcode": "shipPostcode2",
                        "shippingEmailAddress": "shippingemail2@channelgrabber.com",
                        "shippingPhoneNumber": "07415878962",
                        "shippingAddressCountryCode": "GB",
                        "totalDiscount": 0.02,
                        "buyerMessage": "Hello, please leave at the door2",
                        "purchaseDate": "2013-10-10 00:20:00",
                        "paymentDate": "2013-10-10 01:20:00",
                        "printedDate": "2013-10-10 10:20:00",
                        "dispatchDate": "2013-10-10 10:20:10",
                        "archived": false,
                        "tag": [
                            "tag2",
                            "tag3"
                        ],
                        "cancellations": [

                        ],
                        "custom": [

                        ],
                        "batch": 1,
                        "paymentMethod": "paymentMethod2",
                        "paymentReference": "paymentReference2"
                    },
                    {
                        "id": "1413-30",
                        "accountId": 1413,
                        "externalId": "30",
                        "channel": "ebay3",
                        "organisationUnitId": 3,
                        "total": 23.99,
                        "status": "3",
                        "shippingPrice": 30.99,
                        "shippingMethod": "standard3",
                        "currencyCode": "GBP",
                        "billingAddressCompanyName": "Company Name 3",
                        "billingAddressFullName": "Full Name 3",
                        "billingAddress1": "address 1 - 3",
                        "billingAddress2": "address 2 - 3",
                        "billingAddress3": "address 3 - 3",
                        "billingAddressCity": "City3",
                        "billingAddressCounty": "County3",
                        "billingAddressCountry": "UK",
                        "billingAddressPostcode": "Postcode3",
                        "billingEmailAddress": "emailaddress3@channelgrabber.com",
                        "billingPhoneNumber": "01942673433",
                        "billingAddressCountryCode": "GB",
                        "shippingAddressCompanyName": "Shipping Company Name 3",
                        "shippingAddressFullName": "Full Name 3",
                        "shippingAddress1": "shipping address 1 - 3",
                        "shippingAddress2": "shipping address 2 - 3",
                        "shippingAddress3": "shipping address 3 - 3",
                        "shippingAddressCity": "shipping City 3",
                        "shippingAddressCounty": "Shipping County 3",
                        "shippingAddressCountry": "UK",
                        "shippingAddressPostcode": "shipPostcode3",
                        "shippingEmailAddress": "shippingemail3@channelgrabber.com",
                        "shippingPhoneNumber": "07415878963",
                        "shippingAddressCountryCode": "GB",
                        "totalDiscount": 0.03,
                        "buyerMessage": "Hello, please leave at the door3",
                        "purchaseDate": "2013-10-10 00:30:00",
                        "paymentDate": "2013-10-10 01:30:00",
                        "printedDate": "2013-10-10 10:30:00",
                        "dispatchDate": "2013-10-10 10:30:10",
                        "archived": false,
                        "tag": [
                            "tag3",
                            "tag4"
                        ],
                        "cancellations": [

                        ],
                        "custom": [

                        ],
                        "batch": 1,
                        "paymentMethod": "paymentMethod3",
                        "paymentReference": "paymentReference3"
                    },
                    {
                        "id": "1414-40",
                        "accountId": 1414,
                        "externalId": "40",
                        "channel": "ebay4",
                        "organisationUnitId": 4,
                        "total": 24.99,
                        "status": "4",
                        "shippingPrice": 40.99,
                        "shippingMethod": "standard4",
                        "currencyCode": "GBP",
                        "billingAddressCompanyName": "Company Name 4",
                        "billingAddressFullName": "Full Name 4",
                        "billingAddress1": "address 1 - 4",
                        "billingAddress2": "address 2 - 4",
                        "billingAddress3": "address 3 - 4",
                        "billingAddressCity": "City4",
                        "billingAddressCounty": "County4",
                        "billingAddressCountry": "UK",
                        "billingAddressPostcode": "Postcode4",
                        "billingEmailAddress": "emailaddress4@channelgrabber.com",
                        "billingPhoneNumber": "01942673434",
                        "billingAddressCountryCode": "GB",
                        "shippingAddressCompanyName": "Shipping Company Name 4",
                        "shippingAddressFullName": "Full Name 4",
                        "shippingAddress1": "shipping address 1 - 4",
                        "shippingAddress2": "shipping address 2 - 4",
                        "shippingAddress3": "shipping address 3 - 4",
                        "shippingAddressCity": "shipping City 4",
                        "shippingAddressCounty": "Shipping County 4",
                        "shippingAddressCountry": "UK",
                        "shippingAddressPostcode": "shipPostcode4",
                        "shippingEmailAddress": "shippingemail4@channelgrabber.com",
                        "shippingPhoneNumber": "07415878964",
                        "shippingAddressCountryCode": "GB",
                        "totalDiscount": 0.04,
                        "buyerMessage": "Hello, please leave at the door4",
                        "purchaseDate": "2013-10-10 00:40:00",
                        "paymentDate": "2013-10-10 01:40:00",
                        "printedDate": "2013-10-10 10:40:00",
                        "dispatchDate": "2013-10-10 10:40:10",
                        "archived": false,
                        "tag": [
                            "tag4",
                            "tag5"
                        ],
                        "cancellations": [

                        ],
                        "custom": [

                        ],
                        "batch": 1,
                        "paymentMethod": "paymentMethod4",
                        "paymentReference": "paymentReference4"
                    },
                    {
                        "id": "1415-50",
                        "accountId": 1415,
                        "externalId": "50",
                        "channel": "ebay5",
                        "organisationUnitId": 5,
                        "total": 25.99,
                        "status": "5",
                        "shippingPrice": 50.99,
                        "shippingMethod": "standard5",
                        "currencyCode": "GBP",
                        "billingAddressCompanyName": "Company Name 5",
                        "billingAddressFullName": "Full Name 5",
                        "billingAddress1": "address 1 - 5",
                        "billingAddress2": "address 2 - 5",
                        "billingAddress3": "address 3 - 5",
                        "billingAddressCity": "City5",
                        "billingAddressCounty": "County5",
                        "billingAddressCountry": "France",
                        "billingAddressPostcode": "Postcode5",
                        "billingEmailAddress": "emailaddress5@channelgrabber.com",
                        "billingPhoneNumber": "01942673435",
                        "billingAddressCountryCode": "FR",
                        "shippingAddressCompanyName": "Shipping Company Name 5",
                        "shippingAddressFullName": "Full Name 5",
                        "shippingAddress1": "shipping address 1 - 5",
                        "shippingAddress2": "shipping address 2 - 5",
                        "shippingAddress3": "shipping address 3 - 5",
                        "shippingAddressCity": "shipping City 5",
                        "shippingAddressCounty": "Shipping County 5",
                        "shippingAddressCountry": "France",
                        "shippingAddressPostcode": "shipPostcode5",
                        "shippingEmailAddress": "shippingemail5@channelgrabber.com",
                        "shippingPhoneNumber": "07415878965",
                        "shippingAddressCountryCode": "FR",
                        "totalDiscount": 0.05,
                        "buyerMessage": "Hello, please leave at the door5",
                        "purchaseDate": "2013-10-10 00:50:00",
                        "paymentDate": "2013-10-10 01:50:00",
                        "printedDate": "2013-10-10 10:50:00",
                        "dispatchDate": "2013-10-10 10:50:10",
                        "archived": false,
                        "tag": [

                        ],
                        "cancellations": [

                        ],
                        "custom": [

                        ],
                        "batch": 2,
                        "paymentMethod": "paymentMethod5",
                        "paymentReference": "paymentReference5"
                    }
                ],
                [
                    {
                        "id": "1411-10",
                        "accountId": 1411,
                        "externalId": "10",
                        "channel": "ebay",
                        "organisationUnitId": 1,
                        "total": 21.99,
                        "status": "1",
                        "shippingPrice": 10.99,
                        "shippingMethod": "standard",
                        "billingAddressCompanyName": "Company Name 1",
                        "billingAddressFullName": "Full Name 1",
                        "billingAddress1": "address 1 - 1",
                        "billingAddress2": "address 2 - 1",
                        "billingAddress3": "address 3 - 1",
                        "billingAddressCity": "City1",
                        "billingAddressCounty": "County1",
                        "billingAddressCountry": "UK",
                        "billingAddressPostcode": "Postcode1",
                        "billingEmailAddress": "emailaddress1@channelgrabber.com",
                        "billingPhoneNumber": "01942673431",
                        "billingAddressCountryCode": "GB",
                        "shippingAddressCompanyName": "Shipping Company Name 1",
                        "shippingAddressFullName": "Full Name 1",
                        "shippingAddress1": "shipping address 1 - 1",
                        "shippingAddress2": "shipping address 2 - 1",
                        "shippingAddress3": "shipping address 3 - 1",
                        "shippingAddressCity": "shipping City 1",
                        "shippingAddressCounty": "Shipping County 1",
                        "shippingAddressCountry": "UK",
                        "shippingAddressPostcode": "shipPostcode1",
                        "shippingEmailAddress": "shippingemail1@channelgrabber.com",
                        "shippingPhoneNumber": "07415878961",
                        "shippingAddressCountryCode": "GB",
                        "totalDiscount": 0,
                        "buyerMessage": "Hello, please leave at the door",
                        "purchaseDate": "2013-10-10 00:00:00",
                        "paymentDate": "2013-10-10 01:00:00",
                        "printedDate": "2013-10-10 10:00:00",
                        "dispatchDate": "2013-10-10 10:00:10",
                        "currencyCode": "GBP",
                        "archived": false,
                        "tag": [
                            "tag1",
                            "tag2",
                            "tag5"
                        ],
                        "custom": [

                        ],
                        "batch": 1,
                        "paymentMethod": "paymentMethod1",
                        "paymentReference": "paymentReference1",
                        "cancellations": [
                            {
                                "type": "cancel",
                                "timestamp": "2014-10-10 00:00:00",
                                "reason": "No Payment Received",
                                "items": [
                                    {
                                        "orderItemId": "1411-11",
                                        "sku": "test-sku-1",
                                        "quantity": 10,
                                        "amount": 0,
                                        "unitPrice": 1.99
                                    },
                                    {
                                        "orderItemId": "1411-11",
                                        "sku": "test-sku-1",
                                        "quantity": 0,
                                        "amount": 19.91,
                                        "unitPrice": 0
                                    }
                                ],
                                "shippingAmount": 10.99
                            }
                        ],
                        "_links": {
                            "self": {
                                "href": "\/order\/1411-10"
                            },
                            "up": {
                                "href": "\/order"
                            }
                        },
                        "_embedded": {
                            "item": [
                                {
                                    "id": "1411-11",
                                    "externalId": null,
                                    "orderId": "1411-10",
                                    "accountId": 1411,
                                    "itemName": "Order Item 1",
                                    "itemSku": "test-sku-1",
                                    "individualItemPrice": 1.99,
                                    "itemQuantity": 10,
                                    "itemTaxPercentage": 0.1,
                                    "individualItemDiscountPrice": 0.199,
                                    "itemVariationAttribute": {
                                        "colour": "red",
                                        "size": "10cm"
                                    },
                                    "organisationUnitId": 1,
                                    "_links": {
                                        "self": {
                                            "href": "\/orderItem\/1411-11"
                                        },
                                        "up": {
                                            "href": "\/orderItem"
                                        }
                                    },
                                    "_embedded": {
                                        "fee": [
                                            {
                                                "name": "eBayFee",
                                                "amount": 1.99,
                                                "orderItemId": "1411-11",
                                                "id": 1,
                                                "organisationUnitId": 1,
                                                "_links": {
                                                    "self": {
                                                        "href": "\/orderItem\/1411-11\/fee\/1"
                                                    },
                                                    "up": {
                                                        "href": "\/orderItem\/1411-11\/fee"
                                                    }
                                                }
                                            },
                                            {
                                                "name": "eBayFee",
                                                "amount": 2.99,
                                                "orderItemId": "1411-11",
                                                "id": 2,
                                                "organisationUnitId": 1,
                                                "_links": {
                                                    "self": {
                                                        "href": "\/orderItem\/1411-11\/fee\/2"
                                                    },
                                                    "up": {
                                                        "href": "\/orderItem\/1411-11\/fee"
                                                    }
                                                }
                                            },
                                            {
                                                "name": "eBayFee",
                                                "amount": 3.99,
                                                "orderItemId": "1411-11",
                                                "id": 3,
                                                "organisationUnitId": 1,
                                                "_links": {
                                                    "self": {
                                                        "href": "\/orderItem\/1411-11\/fee\/3"
                                                    },
                                                    "up": {
                                                        "href": "\/orderItem\/1411-11\/fee"
                                                    }
                                                }
                                            },
                                            {
                                                "name": "eBayFee",
                                                "amount": 4.99,
                                                "orderItemId": "1411-11",
                                                "id": 4,
                                                "organisationUnitId": 1,
                                                "_links": {
                                                    "self": {
                                                        "href": "\/orderItem\/1411-11\/fee\/4"
                                                    },
                                                    "up": {
                                                        "href": "\/orderItem\/1411-11\/fee"
                                                    }
                                                }
                                            },
                                            {
                                                "name": "eBayFee",
                                                "amount": 6.99,
                                                "orderItemId": "1411-11",
                                                "id": 6,
                                                "organisationUnitId": 1,
                                                "_links": {
                                                    "self": {
                                                        "href": "\/orderItem\/1411-11\/fee\/6"
                                                    },
                                                    "up": {
                                                        "href": "\/orderItem\/1411-11\/fee"
                                                    }
                                                }
                                            }
                                        ],
                                        "giftWrap": [
                                            {
                                                "giftWrapType": "Standard",
                                                "giftWrapMessage": "Wrap Message 1",
                                                "giftWrapPrice": 1.99,
                                                "giftWrapTaxPercentage": 0.1,
                                                "orderItemId": "1411-11",
                                                "id": 1,
                                                "organisationUnitId": 1,
                                                "_links": {
                                                    "self": {
                                                        "href": "\/orderItem\/1411-11\/giftWrap\/1"
                                                    },
                                                    "up": {
                                                        "href": "\/orderItem\/1411-11\/giftWrap"
                                                    }
                                                }
                                            },
                                            {
                                                "giftWrapType": "Standard",
                                                "giftWrapMessage": "Wrap Message 2",
                                                "giftWrapPrice": 2.99,
                                                "giftWrapTaxPercentage": 0.2,
                                                "orderItemId": "1411-11",
                                                "id": 2,
                                                "organisationUnitId": 1,
                                                "_links": {
                                                    "self": {
                                                        "href": "\/orderItem\/1411-11\/giftWrap\/2"
                                                    },
                                                    "up": {
                                                        "href": "\/orderItem\/1411-11\/giftWrap"
                                                    }
                                                }
                                            },
                                            {
                                                "giftWrapType": "Standard",
                                                "giftWrapMessage": "Wrap Message 3",
                                                "giftWrapPrice": 3.99,
                                                "giftWrapTaxPercentage": 0.3,
                                                "orderItemId": "1411-11",
                                                "id": 3,
                                                "organisationUnitId": 1,
                                                "_links": {
                                                    "self": {
                                                        "href": "\/orderItem\/1411-11\/giftWrap\/3"
                                                    },
                                                    "up": {
                                                        "href": "\/orderItem\/1411-11\/giftWrap"
                                                    }
                                                }
                                            },
                                            {
                                                "giftWrapType": "Standard",
                                                "giftWrapMessage": "Wrap Message 4",
                                                "giftWrapPrice": 4.99,
                                                "giftWrapTaxPercentage": 0.4,
                                                "orderItemId": "1411-11",
                                                "id": 4,
                                                "organisationUnitId": 1,
                                                "_links": {
                                                    "self": {
                                                        "href": "\/orderItem\/1411-11\/giftWrap\/4"
                                                    },
                                                    "up": {
                                                        "href": "\/orderItem\/1411-11\/giftWrap"
                                                    }
                                                }
                                            },
                                            {
                                                "giftWrapType": "Standard",
                                                "giftWrapMessage": "Wrap Message 6",
                                                "giftWrapPrice": 6.99,
                                                "giftWrapTaxPercentage": 0.6,
                                                "orderItemId": "1411-11",
                                                "id": 6,
                                                "organisationUnitId": 1,
                                                "_links": {
                                                    "self": {
                                                        "href": "\/orderItem\/1411-11\/giftWrap\/6"
                                                    },
                                                    "up": {
                                                        "href": "\/orderItem\/1411-11\/giftWrap"
                                                    }
                                                }
                                            }
                                        ]
                                    }
                                },
                                {
                                    "id": "1411-12",
                                    "externalId": null,
                                    "orderId": "1411-10",
                                    "accountId": 1411,
                                    "itemName": "Order Item 2",
                                    "itemSku": "test-sku-2",
                                    "individualItemPrice": 2.99,
                                    "itemQuantity": 20,
                                    "itemTaxPercentage": 0.2,
                                    "individualItemDiscountPrice": 0.299,
                                    "itemVariationAttribute": {
                                        "colour": "blue",
                                        "size": "20cm"
                                    },
                                    "organisationUnitId": 1,
                                    "_links": {
                                        "self": {
                                            "href": "\/orderItem\/1411-12"
                                        },
                                        "up": {
                                            "href": "\/orderItem"
                                        }
                                    },
                                    "_embedded": {
                                        "fee": [
                                            {
                                                "name": "eBayFee",
                                                "amount": 5.99,
                                                "orderItemId": "1411-12",
                                                "id": 5,
                                                "organisationUnitId": 1,
                                                "_links": {
                                                    "self": {
                                                        "href": "\/orderItem\/1411-12\/fee\/5"
                                                    },
                                                    "up": {
                                                        "href": "\/orderItem\/1411-12\/fee"
                                                    }
                                                }
                                            }
                                        ],
                                        "giftWrap": [
                                            {
                                                "giftWrapType": "Standard",
                                                "giftWrapMessage": "Wrap Message 5",
                                                "giftWrapPrice": 5.99,
                                                "giftWrapTaxPercentage": 0.5,
                                                "orderItemId": "1411-12",
                                                "id": 5,
                                                "organisationUnitId": 1,
                                                "_links": {
                                                    "self": {
                                                        "href": "\/orderItem\/1411-12\/giftWrap\/5"
                                                    },
                                                    "up": {
                                                        "href": "\/orderItem\/1411-12\/giftWrap"
                                                    }
                                                }
                                            }
                                        ]
                                    }
                                },
                                {
                                    "id": "1411-13",
                                    "externalId": null,
                                    "orderId": "1411-10",
                                    "accountId": 1411,
                                    "itemName": "Order Item 3",
                                    "itemSku": "test-sku-3",
                                    "individualItemPrice": 3.99,
                                    "itemQuantity": 30,
                                    "itemTaxPercentage": 0.3,
                                    "individualItemDiscountPrice": 0.399,
                                    "itemVariationAttribute": {
                                        "colour": "yellow",
                                        "size": "30cm"
                                    },
                                    "organisationUnitId": 1,
                                    "_links": {
                                        "self": {
                                            "href": "\/orderItem\/1411-13"
                                        },
                                        "up": {
                                            "href": "\/orderItem"
                                        }
                                    }
                                },
                                {
                                    "id": "1411-44",
                                    "externalId": null,
                                    "orderId": "1411-10",
                                    "accountId": 1411,
                                    "itemName": "Order Item-1",
                                    "itemSku": "test-sku-4",
                                    "individualItemPrice": 4.99,
                                    "itemQuantity": 40,
                                    "itemTaxPercentage": 0.4,
                                    "individualItemDiscountPrice": 0.499,
                                    "itemVariationAttribute": {
                                        "colour": "green",
                                        "size": "40cm"
                                    },
                                    "organisationUnitId": 1,
                                    "_links": {
                                        "self": {
                                            "href": "\/orderItem\/1411-44"
                                        },
                                        "up": {
                                            "href": "\/orderItem"
                                        }
                                    }
                                },
                                {
                                    "id": "1411-46",
                                    "externalId": null,
                                    "orderId": "1411-10",
                                    "accountId": 1411,
                                    "itemName": "Order Item-6",
                                    "itemSku": "test-sku-6",
                                    "individualItemPrice": 6.99,
                                    "itemQuantity": 60,
                                    "itemTaxPercentage": 0.6,
                                    "individualItemDiscountPrice": 0.699,
                                    "itemVariationAttribute": {
                                        "colour": "red",
                                        "size": "60cm"
                                    },
                                    "organisationUnitId": 1,
                                    "_links": {
                                        "self": {
                                            "href": "\/orderItem\/1411-46"
                                        },
                                        "up": {
                                            "href": "\/orderItem"
                                        }
                                    }
                                }
                            ],
                            "alert": [
                                {
                                    "orderId": "1411-10",
                                    "userId": 6,
                                    "alert": "alert 6",
                                    "timestamp": "2013-10-10 06:00:00",
                                    "id": 6,
                                    "organisationUnitId": 1,
                                    "_links": {
                                        "self": {
                                            "href": "\/order\/1411-10\/alert\/6"
                                        },
                                        "up": {
                                            "href": "\/order\/1411-10\/alert"
                                        }
                                    }
                                },
                                {
                                    "orderId": "1411-10",
                                    "userId": 4,
                                    "alert": "alert 4",
                                    "timestamp": "2013-10-10 04:00:00",
                                    "id": 4,
                                    "organisationUnitId": 1,
                                    "_links": {
                                        "self": {
                                            "href": "\/order\/1411-10\/alert\/4"
                                        },
                                        "up": {
                                            "href": "\/order\/1411-10\/alert"
                                        }
                                    }
                                },
                                {
                                    "orderId": "1411-10",
                                    "userId": 3,
                                    "alert": "alert 3",
                                    "timestamp": "2013-10-10 03:00:00",
                                    "id": 3,
                                    "organisationUnitId": 1,
                                    "_links": {
                                        "self": {
                                            "href": "\/order\/1411-10\/alert\/3"
                                        },
                                        "up": {
                                            "href": "\/order\/1411-10\/alert"
                                        }
                                    }
                                },
                                {
                                    "orderId": "1411-10",
                                    "userId": 2,
                                    "alert": "alert 2",
                                    "timestamp": "2013-10-10 02:00:00",
                                    "id": 2,
                                    "organisationUnitId": 1,
                                    "_links": {
                                        "self": {
                                            "href": "\/order\/1411-10\/alert\/2"
                                        },
                                        "up": {
                                            "href": "\/order\/1411-10\/alert"
                                        }
                                    }
                                },
                                {
                                    "orderId": "1411-10",
                                    "userId": 1,
                                    "alert": "alert 1",
                                    "timestamp": "2013-10-10 01:00:00",
                                    "id": 1,
                                    "organisationUnitId": 1,
                                    "_links": {
                                        "self": {
                                            "href": "\/order\/1411-10\/alert\/1"
                                        },
                                        "up": {
                                            "href": "\/order\/1411-10\/alert"
                                        }
                                    }
                                }
                            ],
                            "note": [
                                {
                                    "id": 6,
                                    "orderId": "1411-10",
                                    "userId": 6,
                                    "note": "Note 6",
                                    "timestamp": "2013-10-10 06:00:00",
                                    "organisationUnitId": 1,
                                    "_links": {
                                        "self": {
                                            "href": "\/order\/1411-10\/note\/6"
                                        },
                                        "up": {
                                            "href": "\/order\/1411-10\/note"
                                        }
                                    }
                                },
                                {
                                    "id": 4,
                                    "orderId": "1411-10",
                                    "userId": 4,
                                    "note": "Note 4",
                                    "timestamp": "2013-10-10 04:00:00",
                                    "organisationUnitId": 1,
                                    "_links": {
                                        "self": {
                                            "href": "\/order\/1411-10\/note\/4"
                                        },
                                        "up": {
                                            "href": "\/order\/1411-10\/note"
                                        }
                                    }
                                },
                                {
                                    "id": 3,
                                    "orderId": "1411-10",
                                    "userId": 3,
                                    "note": "Note 3",
                                    "timestamp": "2013-10-10 03:00:00",
                                    "organisationUnitId": 1,
                                    "_links": {
                                        "self": {
                                            "href": "\/order\/1411-10\/note\/3"
                                        },
                                        "up": {
                                            "href": "\/order\/1411-10\/note"
                                        }
                                    }
                                },
                                {
                                    "id": 2,
                                    "orderId": "1411-10",
                                    "userId": 2,
                                    "note": "Note 2",
                                    "timestamp": "2013-10-10 02:00:00",
                                    "organisationUnitId": 1,
                                    "_links": {
                                        "self": {
                                            "href": "\/order\/1411-10\/note\/2"
                                        },
                                        "up": {
                                            "href": "\/order\/1411-10\/note"
                                        }
                                    }
                                },
                                {
                                    "id": 1,
                                    "orderId": "1411-10",
                                    "userId": 1,
                                    "note": "Note 1",
                                    "timestamp": "2013-10-10 01:00:00",
                                    "organisationUnitId": 1,
                                    "_links": {
                                        "self": {
                                            "href": "\/order\/1411-10\/note\/1"
                                        },
                                        "up": {
                                            "href": "\/order\/1411-10\/note"
                                        }
                                    }
                                }
                            ],
                            "tracking": [
                                {
                                    "orderId": "1411-10",
                                    "userId": 6,
                                    "number": "1236",
                                    "carrier": "carrier 6",
                                    "timestamp": "2013-10-10 06:00:00",
                                    "id": 6,
                                    "organisationUnitId": 1,
                                    "_links": {
                                        "self": {
                                            "href": "\/order\/1411-10\/tracking\/6"
                                        },
                                        "up": {
                                            "href": "\/order\/1411-10\/tracking"
                                        }
                                    }
                                },
                                {
                                    "orderId": "1411-10",
                                    "userId": 4,
                                    "number": "1234",
                                    "carrier": "carrier 4",
                                    "timestamp": "2013-10-10 04:00:00",
                                    "id": 4,
                                    "organisationUnitId": 1,
                                    "_links": {
                                        "self": {
                                            "href": "\/order\/1411-10\/tracking\/4"
                                        },
                                        "up": {
                                            "href": "\/order\/1411-10\/tracking"
                                        }
                                    }
                                },
                                {
                                    "orderId": "1411-10",
                                    "userId": 3,
                                    "number": "1233",
                                    "carrier": "carrier 3",
                                    "timestamp": "2013-10-10 03:00:00",
                                    "id": 3,
                                    "organisationUnitId": 1,
                                    "_links": {
                                        "self": {
                                            "href": "\/order\/1411-10\/tracking\/3"
                                        },
                                        "up": {
                                            "href": "\/order\/1411-10\/tracking"
                                        }
                                    }
                                },
                                {
                                    "orderId": "1411-10",
                                    "userId": 2,
                                    "number": "1232",
                                    "carrier": "carrier 2",
                                    "timestamp": "2013-10-10 02:00:00",
                                    "id": 2,
                                    "organisationUnitId": 1,
                                    "_links": {
                                        "self": {
                                            "href": "\/order\/1411-10\/tracking\/2"
                                        },
                                        "up": {
                                            "href": "\/order\/1411-10\/tracking"
                                        }
                                    }
                                },
                                {
                                    "orderId": "1411-10",
                                    "userId": 1,
                                    "number": "1231",
                                    "carrier": "carrier 1",
                                    "timestamp": "2013-10-10 01:00:00",
                                    "id": 1,
                                    "organisationUnitId": 1,
                                    "_links": {
                                        "self": {
                                            "href": "\/order\/1411-10\/tracking\/1"
                                        },
                                        "up": {
                                            "href": "\/order\/1411-10\/tracking"
                                        }
                                    }
                                }
                            ],
                            "userChange": [
                                {
                                    "orderId": "1411-10",
                                    "changes": {
                                        "shippingAddressCompanyName": "Wilki Ltd"
                                    },
                                    "organisationUnitId": 1,
                                    "_links": {
                                        "self": {
                                            "href": "\/order\/1411-10\/userChange"
                                        },
                                        "up": {
                                            "href": "\/order\/1411-10"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "id": "1412-20",
                        "accountId": 1412,
                        "externalId": "20",
                        "channel": "ebay2",
                        "organisationUnitId": 2,
                        "total": 22.99,
                        "status": "2",
                        "shippingPrice": 20.99,
                        "shippingMethod": "standard2",
                        "billingAddressCompanyName": "Company Name 2",
                        "billingAddressFullName": "Full Name 2",
                        "billingAddress1": "address 1 - 2",
                        "billingAddress2": "address 2 - 2",
                        "billingAddress3": "address 3 - 2",
                        "billingAddressCity": "City2",
                        "billingAddressCounty": "County2",
                        "billingAddressCountry": "UK",
                        "billingAddressPostcode": "Postcode2",
                        "billingEmailAddress": "emailaddress2@channelgrabber.com",
                        "billingPhoneNumber": "01942673432",
                        "billingAddressCountryCode": "GB",
                        "shippingAddressCompanyName": "Shipping Company Name 2",
                        "shippingAddressFullName": "Full Name 2",
                        "shippingAddress1": "shipping address 1 - 2",
                        "shippingAddress2": "shipping address 2 - 2",
                        "shippingAddress3": "shipping address 3 - 2",
                        "shippingAddressCity": "shipping City 2",
                        "shippingAddressCounty": "Shipping County 2",
                        "shippingAddressCountry": "UK",
                        "shippingAddressPostcode": "shipPostcode2",
                        "shippingEmailAddress": "shippingemail2@channelgrabber.com",
                        "shippingPhoneNumber": "07415878962",
                        "shippingAddressCountryCode": "GB",
                        "totalDiscount": 0.02,
                        "buyerMessage": "Hello, please leave at the door2",
                        "purchaseDate": "2013-10-10 00:20:00",
                        "paymentDate": "2013-10-10 01:20:00",
                        "printedDate": "2013-10-10 10:20:00",
                        "dispatchDate": "2013-10-10 10:20:10",
                        "currencyCode": "GBP",
                        "archived": false,
                        "tag": [
                            "tag2",
                            "tag3"
                        ],
                        "custom": [

                        ],
                        "batch": 1,
                        "paymentMethod": "paymentMethod2",
                        "paymentReference": "paymentReference2",
                        "cancellations": [

                        ],
                        "_links": {
                            "self": {
                                "href": "\/order\/1412-20"
                            },
                            "up": {
                                "href": "\/order"
                            }
                        },
                        "_embedded": {
                            "item": [
                                {
                                    "id": "1411-45",
                                    "externalId": null,
                                    "orderId": "1412-20",
                                    "accountId": 1411,
                                    "itemName": "Order Item-2",
                                    "itemSku": "test-sku-5",
                                    "individualItemPrice": 5.99,
                                    "itemQuantity": 50,
                                    "itemTaxPercentage": 0.5,
                                    "individualItemDiscountPrice": 0.599,
                                    "itemVariationAttribute": {
                                        "colour": "red",
                                        "size": "50cm"
                                    },
                                    "organisationUnitId": 2,
                                    "_links": {
                                        "self": {
                                            "href": "\/orderItem\/1411-45"
                                        },
                                        "up": {
                                            "href": "\/orderItem"
                                        }
                                    }
                                }
                            ],
                            "alert": [
                                {
                                    "orderId": "1412-20",
                                    "userId": 5,
                                    "alert": "alert 5",
                                    "timestamp": "2013-10-10 05:00:00",
                                    "id": 5,
                                    "organisationUnitId": 2,
                                    "_links": {
                                        "self": {
                                            "href": "\/order\/1412-20\/alert\/5"
                                        },
                                        "up": {
                                            "href": "\/order\/1412-20\/alert"
                                        }
                                    }
                                }
                            ],
                            "note": [
                                {
                                    "id": 5,
                                    "orderId": "1412-20",
                                    "userId": 5,
                                    "note": "Note 5",
                                    "timestamp": "2013-10-10 05:00:00",
                                    "organisationUnitId": 2,
                                    "_links": {
                                        "self": {
                                            "href": "\/order\/1412-20\/note\/5"
                                        },
                                        "up": {
                                            "href": "\/order\/1412-20\/note"
                                        }
                                    }
                                }
                            ],
                            "tracking": [
                                {
                                    "orderId": "1412-20",
                                    "userId": 5,
                                    "number": "1235",
                                    "carrier": "carrier 5",
                                    "timestamp": "2013-10-10 05:00:00",
                                    "id": 5,
                                    "organisationUnitId": 2,
                                    "_links": {
                                        "self": {
                                            "href": "\/order\/1412-20\/tracking\/5"
                                        },
                                        "up": {
                                            "href": "\/order\/1412-20\/tracking"
                                        }
                                    }
                                }
                            ],
                            "userChange": [
                                {
                                    "orderId": "1412-20",
                                    "changes": {
                                        "totalDiscount": 0.1
                                    },
                                    "organisationUnitId": 2,
                                    "_links": {
                                        "self": {
                                            "href": "\/order\/1412-20\/userChange"
                                        },
                                        "up": {
                                            "href": "\/order\/1412-20"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "id": "1413-30",
                        "accountId": 1413,
                        "externalId": "30",
                        "channel": "ebay3",
                        "organisationUnitId": 3,
                        "total": 23.99,
                        "status": "3",
                        "shippingPrice": 30.99,
                        "shippingMethod": "standard3",
                        "billingAddressCompanyName": "Company Name 3",
                        "billingAddressFullName": "Full Name 3",
                        "billingAddress1": "address 1 - 3",
                        "billingAddress2": "address 2 - 3",
                        "billingAddress3": "address 3 - 3",
                        "billingAddressCity": "City3",
                        "billingAddressCounty": "County3",
                        "billingAddressCountry": "UK",
                        "billingAddressPostcode": "Postcode3",
                        "billingEmailAddress": "emailaddress3@channelgrabber.com",
                        "billingPhoneNumber": "01942673433",
                        "billingAddressCountryCode": "GB",
                        "shippingAddressCompanyName": "Shipping Company Name 3",
                        "shippingAddressFullName": "Full Name 3",
                        "shippingAddress1": "shipping address 1 - 3",
                        "shippingAddress2": "shipping address 2 - 3",
                        "shippingAddress3": "shipping address 3 - 3",
                        "shippingAddressCity": "shipping City 3",
                        "shippingAddressCounty": "Shipping County 3",
                        "shippingAddressCountry": "UK",
                        "shippingAddressPostcode": "shipPostcode3",
                        "shippingEmailAddress": "shippingemail3@channelgrabber.com",
                        "shippingPhoneNumber": "07415878963",
                        "shippingAddressCountryCode": "GB",
                        "totalDiscount": 0.03,
                        "buyerMessage": "Hello, please leave at the door3",
                        "purchaseDate": "2013-10-10 00:30:00",
                        "paymentDate": "2013-10-10 01:30:00",
                        "printedDate": "2013-10-10 10:30:00",
                        "dispatchDate": "2013-10-10 10:30:10",
                        "currencyCode": "GBP",
                        "archived": false,
                        "tag": [
                            "tag3",
                            "tag4"
                        ],
                        "custom": [

                        ],
                        "batch": 1,
                        "paymentMethod": "paymentMethod3",
                        "paymentReference": "paymentReference3",
                        "cancellations": [

                        ],
                        "_links": {
                            "self": {
                                "href": "\/order\/1413-30"
                            },
                            "up": {
                                "href": "\/order"
                            }
                        },
                        "_embedded": {
                            "userChange": [
                                {
                                    "orderId": "1413-30",
                                    "changes": {
                                        "billingAddressCompanyName": "Wilki Ltd",
                                        "billingAddressFullName": "Matthew King"
                                    },
                                    "organisationUnitId": 3,
                                    "_links": {
                                        "self": {
                                            "href": "\/order\/1413-30\/userChange"
                                        },
                                        "up": {
                                            "href": "\/order\/1413-30"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "id": "1414-40",
                        "accountId": 1414,
                        "externalId": "40",
                        "channel": "ebay4",
                        "organisationUnitId": 4,
                        "total": 24.99,
                        "status": "4",
                        "shippingPrice": 40.99,
                        "shippingMethod": "standard4",
                        "billingAddressCompanyName": "Company Name 4",
                        "billingAddressFullName": "Full Name 4",
                        "billingAddress1": "address 1 - 4",
                        "billingAddress2": "address 2 - 4",
                        "billingAddress3": "address 3 - 4",
                        "billingAddressCity": "City4",
                        "billingAddressCounty": "County4",
                        "billingAddressCountry": "UK",
                        "billingAddressPostcode": "Postcode4",
                        "billingEmailAddress": "emailaddress4@channelgrabber.com",
                        "billingPhoneNumber": "01942673434",
                        "billingAddressCountryCode": "GB",
                        "shippingAddressCompanyName": "Shipping Company Name 4",
                        "shippingAddressFullName": "Full Name 4",
                        "shippingAddress1": "shipping address 1 - 4",
                        "shippingAddress2": "shipping address 2 - 4",
                        "shippingAddress3": "shipping address 3 - 4",
                        "shippingAddressCity": "shipping City 4",
                        "shippingAddressCounty": "Shipping County 4",
                        "shippingAddressCountry": "UK",
                        "shippingAddressPostcode": "shipPostcode4",
                        "shippingEmailAddress": "shippingemail4@channelgrabber.com",
                        "shippingPhoneNumber": "07415878964",
                        "shippingAddressCountryCode": "GB",
                        "totalDiscount": 0.04,
                        "buyerMessage": "Hello, please leave at the door4",
                        "purchaseDate": "2013-10-10 00:40:00",
                        "paymentDate": "2013-10-10 01:40:00",
                        "printedDate": "2013-10-10 10:40:00",
                        "dispatchDate": "2013-10-10 10:40:10",
                        "currencyCode": "GBP",
                        "archived": false,
                        "tag": [
                            "tag4",
                            "tag5"
                        ],
                        "custom": [

                        ],
                        "batch": 1,
                        "paymentMethod": "paymentMethod4",
                        "paymentReference": "paymentReference4",
                        "cancellations": [

                        ],
                        "_links": {
                            "self": {
                                "href": "\/order\/1414-40"
                            },
                            "up": {
                                "href": "\/order"
                            }
                        },
                        "_embedded": {
                            "userChange": [
                                {
                                    "orderId": "1414-40",
                                    "changes": {
                                        "totalDiscount": 0.1,
                                        "shippingAddressCompanyName": "Wilki Ltd",
                                        "shippingAddressFullName": "Matthew King"
                                    },
                                    "organisationUnitId": 4,
                                    "_links": {
                                        "self": {
                                            "href": "\/order\/1414-40\/userChange"
                                        },
                                        "up": {
                                            "href": "\/order\/1414-40"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    {
                        "id": "1415-50",
                        "accountId": 1415,
                        "externalId": "50",
                        "channel": "ebay5",
                        "organisationUnitId": 5,
                        "total": 25.99,
                        "status": "5",
                        "shippingPrice": 50.99,
                        "shippingMethod": "standard5",
                        "billingAddressCompanyName": "Company Name 5",
                        "billingAddressFullName": "Full Name 5",
                        "billingAddress1": "address 1 - 5",
                        "billingAddress2": "address 2 - 5",
                        "billingAddress3": "address 3 - 5",
                        "billingAddressCity": "City5",
                        "billingAddressCounty": "County5",
                        "billingAddressCountry": "France",
                        "billingAddressPostcode": "Postcode5",
                        "billingEmailAddress": "emailaddress5@channelgrabber.com",
                        "billingPhoneNumber": "01942673435",
                        "billingAddressCountryCode": "FR",
                        "shippingAddressCompanyName": "Shipping Company Name 5",
                        "shippingAddressFullName": "Full Name 5",
                        "shippingAddress1": "shipping address 1 - 5",
                        "shippingAddress2": "shipping address 2 - 5",
                        "shippingAddress3": "shipping address 3 - 5",
                        "shippingAddressCity": "shipping City 5",
                        "shippingAddressCounty": "Shipping County 5",
                        "shippingAddressCountry": "France",
                        "shippingAddressPostcode": "shipPostcode5",
                        "shippingEmailAddress": "shippingemail5@channelgrabber.com",
                        "shippingPhoneNumber": "07415878965",
                        "shippingAddressCountryCode": "FR",
                        "totalDiscount": 0.05,
                        "buyerMessage": "Hello, please leave at the door5",
                        "purchaseDate": "2013-10-10 00:50:00",
                        "paymentDate": "2013-10-10 01:50:00",
                        "printedDate": "2013-10-10 10:50:00",
                        "dispatchDate": "2013-10-10 10:50:10",
                        "currencyCode": "GBP",
                        "archived": false,
                        "tag": [

                        ],
                        "custom": [

                        ],
                        "batch": 2,
                        "paymentMethod": "paymentMethod5",
                        "paymentReference": "paymentReference5",
                        "cancellations": [

                        ],
                        "_links": {
                            "self": {
                                "href": "\/order\/1415-50"
                            },
                            "up": {
                                "href": "\/order"
                            }
                        },
                        "_embedded": {
                            "userChange": [
                                {
                                    "orderId": "1415-50",
                                    "changes": {
                                        "total": 23.99,
                                        "shippingPrice": 13.99,
                                        "totalDiscount": 0.1,
                                        "billingAddressCompanyName": "Wilki Ltd",
                                        "billingAddressFullName": "Matthew King"
                                    },
                                    "organisationUnitId": 5,
                                    "_links": {
                                        "self": {
                                            "href": "\/order\/1415-50\/userChange"
                                        },
                                        "up": {
                                            "href": "\/order\/1415-50"
                                        }
                                    }
                                }
                            ]
                        }
                    }
                ]
            ]
        },
        {
            "file": "\/var\/www\/cg_app\/current\/tests\/api\/ApiGuy.php",
            "line": 3561,
            "function": "runStep",
            "class": "Codeception\\Scenario",
            "type": "->",
            "args": [

            ]
        },
        {
            "file": "\/var\/www\/cg_app\/current\/vendor\/channelgrabber\/codeception\/CG\/Codeception\/Cest\/Rest\/Collection\/SortTrait.php",
            "line": 38,
            "function": "checkCustomFilter",
            "class": "ApiGuy",
            "type": "->",
            "args": [
                {

                },
                "CG\\Order\\Test\\Api\\Page\\OrderPage",
                "\/order?orderBy=id&orderDirection=ASC",
                [
                    {
                        "id": "1411-10",
                        "accountId": 1411,
                        "externalId": "10",
                        "channel": "ebay",
                        "organisationUnitId": 1,
                        "total": 21.99,
                        "status": "1",
                        "shippingPrice": 10.99,
                        "shippingMethod": "standard",
                        "currencyCode": "GBP",
                        "billingAddressCompanyName": "Company Name 1",
                        "billingAddressFullName": "Full Name 1",
                        "billingAddress1": "address 1 - 1",
                        "billingAddress2": "address 2 - 1",
                        "billingAddress3": "address 3 - 1",
                        "billingAddressCity": "City1",
                        "billingAddressCounty": "County1",
                        "billingAddressCountry": "UK",
                        "billingAddressPostcode": "Postcode1",
                        "billingEmailAddress": "emailaddress1@channelgrabber.com",
                        "billingPhoneNumber": "01942673431",
                        "billingAddressCountryCode": "GB",
                        "shippingAddressCompanyName": "Shipping Company Name 1",
                        "shippingAddressFullName": "Full Name 1",
                        "shippingAddress1": "shipping address 1 - 1",
                        "shippingAddress2": "shipping address 2 - 1",
                        "shippingAddress3": "shipping address 3 - 1",
                        "shippingAddressCity": "shipping City 1",
                        "shippingAddressCounty": "Shipping County 1",
                        "shippingAddressCountry": "UK",
                        "shippingAddressPostcode": "shipPostcode1",
                        "shippingEmailAddress": "shippingemail1@channelgrabber.com",
                        "shippingPhoneNumber": "07415878961",
                        "shippingAddressCountryCode": "GB",
                        "totalDiscount": 0,
                        "buyerMessage": "Hello, please leave at the door",
                        "purchaseDate": "2013-10-10 00:00:00",
                        "paymentDate": "2013-10-10 01:00:00",
                        "printedDate": "2013-10-10 10:00:00",
                        "dispatchDate": "2013-10-10 10:00:10",
                        "archived": false,
                        "tag": [
                            "tag1",
                            "tag2",
                            "tag5"
                        ],
                        "cancellations": [
                            {
                                "type": "cancel",
                                "timestamp": "2014-10-10 00:00:00",
                                "reason": "No Payment Received",
                                "shippingAmount": 10.99,
                                "items": [
                                    {
                                        "orderItemId": "1411-11",
                                        "sku": "test-sku-1",
                                        "quantity": 10,
                                        "amount": 0,
                                        "unitPrice": 1.99
                                    },
                                    {
                                        "orderItemId": "1411-11",
                                        "sku": "test-sku-1",
                                        "quantity": 0,
                                        "amount": 19.91,
                                        "unitPrice": 0
                                    }
                                ]
                            }
                        ],
                        "custom": [

                        ],
                        "batch": 1,
                        "paymentMethod": "paymentMethod1",
                        "paymentReference": "paymentReference1"
                    },
                    {
                        "id": "1412-20",
                        "accountId": 1412,
                        "externalId": "20",
                        "channel": "ebay2",
                        "organisationUnitId": 2,
                        "total": 22.99,
                        "status": "2",
                        "shippingPrice": 20.99,
                        "shippingMethod": "standard2",
                        "currencyCode": "GBP",
                        "billingAddressCompanyName": "Company Name 2",
                        "billingAddressFullName": "Full Name 2",
                        "billingAddress1": "address 1 - 2",
                        "billingAddress2": "address 2 - 2",
                        "billingAddress3": "address 3 - 2",
                        "billingAddressCity": "City2",
                        "billingAddressCounty": "County2",
                        "billingAddressCountry": "UK",
                        "billingAddressPostcode": "Postcode2",
                        "billingEmailAddress": "emailaddress2@channelgrabber.com",
                        "billingPhoneNumber": "01942673432",
                        "billingAddressCountryCode": "GB",
                        "shippingAddressCompanyName": "Shipping Company Name 2",
                        "shippingAddressFullName": "Full Name 2",
                        "shippingAddress1": "shipping address 1 - 2",
                        "shippingAddress2": "shipping address 2 - 2",
                        "shippingAddress3": "shipping address 3 - 2",
                        "shippingAddressCity": "shipping City 2",
                        "shippingAddressCounty": "Shipping County 2",
                        "shippingAddressCountry": "UK",
                        "shippingAddressPostcode": "shipPostcode2",
                        "shippingEmailAddress": "shippingemail2@channelgrabber.com",
                        "shippingPhoneNumber": "07415878962",
                        "shippingAddressCountryCode": "GB",
                        "totalDiscount": 0.02,
                        "buyerMessage": "Hello, please leave at the door2",
                        "purchaseDate": "2013-10-10 00:20:00",
                        "paymentDate": "2013-10-10 01:20:00",
                        "printedDate": "2013-10-10 10:20:00",
                        "dispatchDate": "2013-10-10 10:20:10",
                        "archived": false,
                        "tag": [
                            "tag2",
                            "tag3"
                        ],
                        "cancellations": [

                        ],
                        "custom": [

                        ],
                        "batch": 1,
                        "paymentMethod": "paymentMethod2",
                        "paymentReference": "paymentReference2"
                    },
                    {
                        "id": "1413-30",
                        "accountId": 1413,
                        "externalId": "30",
                        "channel": "ebay3",
                        "organisationUnitId": 3,
                        "total": 23.99,
                        "status": "3",
                        "shippingPrice": 30.99,
                        "shippingMethod": "standard3",
                        "currencyCode": "GBP",
                        "billingAddressCompanyName": "Company Name 3",
                        "billingAddressFullName": "Full Name 3",
                        "billingAddress1": "address 1 - 3",
                        "billingAddress2": "address 2 - 3",
                        "billingAddress3": "address 3 - 3",
                        "billingAddressCity": "City3",
                        "billingAddressCounty": "County3",
                        "billingAddressCountry": "UK",
                        "billingAddressPostcode": "Postcode3",
                        "billingEmailAddress": "emailaddress3@channelgrabber.com",
                        "billingPhoneNumber": "01942673433",
                        "billingAddressCountryCode": "GB",
                        "shippingAddressCompanyName": "Shipping Company Name 3",
                        "shippingAddressFullName": "Full Name 3",
                        "shippingAddress1": "shipping address 1 - 3",
                        "shippingAddress2": "shipping address 2 - 3",
                        "shippingAddress3": "shipping address 3 - 3",
                        "shippingAddressCity": "shipping City 3",
                        "shippingAddressCounty": "Shipping County 3",
                        "shippingAddressCountry": "UK",
                        "shippingAddressPostcode": "shipPostcode3",
                        "shippingEmailAddress": "shippingemail3@channelgrabber.com",
                        "shippingPhoneNumber": "07415878963",
                        "shippingAddressCountryCode": "GB",
                        "totalDiscount": 0.03,
                        "buyerMessage": "Hello, please leave at the door3",
                        "purchaseDate": "2013-10-10 00:30:00",
                        "paymentDate": "2013-10-10 01:30:00",
                        "printedDate": "2013-10-10 10:30:00",
                        "dispatchDate": "2013-10-10 10:30:10",
                        "archived": false,
                        "tag": [
                            "tag3",
                            "tag4"
                        ],
                        "cancellations": [

                        ],
                        "custom": [

                        ],
                        "batch": 1,
                        "paymentMethod": "paymentMethod3",
                        "paymentReference": "paymentReference3"
                    },
                    {
                        "id": "1414-40",
                        "accountId": 1414,
                        "externalId": "40",
                        "channel": "ebay4",
                        "organisationUnitId": 4,
                        "total": 24.99,
                        "status": "4",
                        "shippingPrice": 40.99,
                        "shippingMethod": "standard4",
                        "currencyCode": "GBP",
                        "billingAddressCompanyName": "Company Name 4",
                        "billingAddressFullName": "Full Name 4",
                        "billingAddress1": "address 1 - 4",
                        "billingAddress2": "address 2 - 4",
                        "billingAddress3": "address 3 - 4",
                        "billingAddressCity": "City4",
                        "billingAddressCounty": "County4",
                        "billingAddressCountry": "UK",
                        "billingAddressPostcode": "Postcode4",
                        "billingEmailAddress": "emailaddress4@channelgrabber.com",
                        "billingPhoneNumber": "01942673434",
                        "billingAddressCountryCode": "GB",
                        "shippingAddressCompanyName": "Shipping Company Name 4",
                        "shippingAddressFullName": "Full Name 4",
                        "shippingAddress1": "shipping address 1 - 4",
                        "shippingAddress2": "shipping address 2 - 4",
                        "shippingAddress3": "shipping address 3 - 4",
                        "shippingAddressCity": "shipping City 4",
                        "shippingAddressCounty": "Shipping County 4",
                        "shippingAddressCountry": "UK",
                        "shippingAddressPostcode": "shipPostcode4",
                        "shippingEmailAddress": "shippingemail4@channelgrabber.com",
                        "shippingPhoneNumber": "07415878964",
                        "shippingAddressCountryCode": "GB",
                        "totalDiscount": 0.04,
                        "buyerMessage": "Hello, please leave at the door4",
                        "purchaseDate": "2013-10-10 00:40:00",
                        "paymentDate": "2013-10-10 01:40:00",
                        "printedDate": "2013-10-10 10:40:00",
                        "dispatchDate": "2013-10-10 10:40:10",
                        "archived": false,
                        "tag": [
                            "tag4",
                            "tag5"
                        ],
                        "cancellations": [

                        ],
                        "custom": [

                        ],
                        "batch": 1,
                        "paymentMethod": "paymentMethod4",
                        "paymentReference": "paymentReference4"
                    },
                    {
                        "id": "1415-50",
                        "accountId": 1415,
                        "externalId": "50",
                        "channel": "ebay5",
                        "organisationUnitId": 5,
                        "total": 25.99,
                        "status": "5",
                        "shippingPrice": 50.99,
                        "shippingMethod": "standard5",
                        "currencyCode": "GBP",
                        "billingAddressCompanyName": "Company Name 5",
                        "billingAddressFullName": "Full Name 5",
                        "billingAddress1": "address 1 - 5",
                        "billingAddress2": "address 2 - 5",
                        "billingAddress3": "address 3 - 5",
                        "billingAddressCity": "City5",
                        "billingAddressCounty": "County5",
                        "billingAddressCountry": "France",
                        "billingAddressPostcode": "Postcode5",
                        "billingEmailAddress": "emailaddress5@channelgrabber.com",
                        "billingPhoneNumber": "01942673435",
                        "billingAddressCountryCode": "FR",
                        "shippingAddressCompanyName": "Shipping Company Name 5",
                        "shippingAddressFullName": "Full Name 5",
                        "shippingAddress1": "shipping address 1 - 5",
                        "shippingAddress2": "shipping address 2 - 5",
                        "shippingAddress3": "shipping address 3 - 5",
                        "shippingAddressCity": "shipping City 5",
                        "shippingAddressCounty": "Shipping County 5",
                        "shippingAddressCountry": "France",
                        "shippingAddressPostcode": "shipPostcode5",
                        "shippingEmailAddress": "shippingemail5@channelgrabber.com",
                        "shippingPhoneNumber": "07415878965",
                        "shippingAddressCountryCode": "FR",
                        "totalDiscount": 0.05,
                        "buyerMessage": "Hello, please leave at the door5",
                        "purchaseDate": "2013-10-10 00:50:00",
                        "paymentDate": "2013-10-10 01:50:00",
                        "printedDate": "2013-10-10 10:50:00",
                        "dispatchDate": "2013-10-10 10:50:10",
                        "archived": false,
                        "tag": [

                        ],
                        "cancellations": [

                        ],
                        "custom": [

                        ],
                        "batch": 2,
                        "paymentMethod": "paymentMethod5",
                        "paymentReference": "paymentReference5"
                    }
                ],
                true
            ]
        }
    ],
    "message": "Failed asserting that two arrays are equal.",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "view the primary entity (CG.Order.Test.Api.Cest.OrderEntityCest.viewPrimaryEntity)"
}{
    "event": "test",
    "suite": "api",
    "test": "view the primary entity (CG.Order.Test.Api.Cest.OrderEntityCest.viewPrimaryEntity)",
    "status": "pass",
    "time": 0.47868394851685,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "view the secondary entity (CG.Order.Test.Api.Cest.OrderEntityCest.viewSecondaryEntity)"
}{
    "event": "test",
    "suite": "api",
    "test": "view the secondary entity (CG.Order.Test.Api.Cest.OrderEntityCest.viewSecondaryEntity)",
    "status": "pass",
    "time": 0.41823887825012,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check i can not view a non existent entity (CG.Order.Test.Api.Cest.OrderEntityCest.viewNonExistentEntity)"
}{
    "event": "test",
    "suite": "api",
    "test": "check i can not view a non existent entity (CG.Order.Test.Api.Cest.OrderEntityCest.viewNonExistentEntity)",
    "status": "pass",
    "time": 0.38711285591125,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "update primary entity (CG.Order.Test.Api.Cest.OrderEntityCest.updatePrimaryEntity)"
}{
    "event": "test",
    "suite": "api",
    "test": "update primary entity (CG.Order.Test.Api.Cest.OrderEntityCest.updatePrimaryEntity)",
    "status": "pass",
    "time": 0.24033904075623,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "update primary entity then get (CG.Order.Test.Api.Cest.OrderEntityCest.updatePrimaryEntityThenGet)"
}{
    "event": "test",
    "suite": "api",
    "test": "update primary entity then get (CG.Order.Test.Api.Cest.OrderEntityCest.updatePrimaryEntityThenGet)",
    "status": "pass",
    "time": 0.23979878425598,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "update primary entity with empty data (CG.Order.Test.Api.Cest.OrderEntityCest.updatePrimaryEntityWithEmptyData)"
}{
    "event": "test",
    "suite": "api",
    "test": "update primary entity with empty data (CG.Order.Test.Api.Cest.OrderEntityCest.updatePrimaryEntityWithEmptyData)",
    "status": "pass",
    "time": 0.28792786598206,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "update primary entity with invalid data (CG.Order.Test.Api.Cest.OrderEntityCest.updatePrimaryEntityWithInvalidData)"
}{
    "event": "test",
    "suite": "api",
    "test": "update primary entity with invalid data (CG.Order.Test.Api.Cest.OrderEntityCest.updatePrimaryEntityWithInvalidData)",
    "status": "pass",
    "time": 0.26199316978455,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "update primary entity with additional fields (CG.Order.Test.Api.Cest.OrderEntityCest.updatePrimaryEntityWithAdditionalFields)"
}{
    "event": "test",
    "suite": "api",
    "test": "update primary entity with additional fields (CG.Order.Test.Api.Cest.OrderEntityCest.updatePrimaryEntityWithAdditionalFields)",
    "status": "pass",
    "time": 0.25658917427063,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check i delete the primary entity (CG.Order.Test.Api.Cest.OrderEntityCest.deletePrimaryEntity)"
}{
    "event": "test",
    "suite": "api",
    "test": "check i delete the primary entity (CG.Order.Test.Api.Cest.OrderEntityCest.deletePrimaryEntity)",
    "status": "pass",
    "time": 0.43305897712708,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check i delete the primary entity (CG.Order.Test.Api.Cest.OrderEntityCest.deletePrimaryEntityWithGet)"
}{
    "event": "test",
    "suite": "api",
    "test": "check i delete the primary entity (CG.Order.Test.Api.Cest.OrderEntityCest.deletePrimaryEntityWithGet)",
    "status": "pass",
    "time": 0.52616119384766,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check i delete the primary entity (CG.Order.Test.Api.Cest.OrderEntityCest.deletePrimaryEntityWithGetCollection)"
}{
    "event": "test",
    "suite": "api",
    "test": "check i delete the primary entity (CG.Order.Test.Api.Cest.OrderEntityCest.deletePrimaryEntityWithGetCollection)",
    "status": "pass",
    "time": 0.61521792411804,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check i can not delete a non existent entity (CG.Order.Test.Api.Cest.OrderEntityCest.deleteNonExistentEntity)"
}{
    "event": "test",
    "suite": "api",
    "test": "check i can not delete a non existent entity (CG.Order.Test.Api.Cest.OrderEntityCest.deleteNonExistentEntity)",
    "status": "pass",
    "time": 0.34915709495544,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "see that entity contains correct embedded data (CG.Order.Test.Api.Cest.OrderEntityCest.checkEntityEmbed)"
}{
    "event": "test",
    "suite": "api",
    "test": "see that entity contains correct embedded data (CG.Order.Test.Api.Cest.OrderEntityCest.checkEntityEmbed)",
    "status": "pass",
    "time": 0.58924412727356,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check i can not view an entity with the wrong parent id (CG.Order.Test.Api.Cest.OrderEntityCest.checkChildrenEndpointsWithWrongParentId)"
}{
    "event": "test",
    "suite": "api",
    "test": "check i can not view an entity with the wrong parent id (CG.Order.Test.Api.Cest.OrderEntityCest.checkChildrenEndpointsWithWrongParentId)",
    "status": "pass",
    "time": 1.7577438354492,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check put children endpoints with wrong parent id (CG.Order.Test.Api.Cest.OrderEntityCest.checkPutChildrenEndpointsWithWrongParentId)"
}{
    "event": "test",
    "suite": "api",
    "test": "check put children endpoints with wrong parent id (CG.Order.Test.Api.Cest.OrderEntityCest.checkPutChildrenEndpointsWithWrongParentId)",
    "status": "pass",
    "time": 0.2727210521698,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "see a resource endpoint contains hal (CG.Order.Test.Api.Cest.OrderEntityCest.viewInHal)"
}{
    "event": "test",
    "suite": "api",
    "test": "see a resource endpoint contains hal (CG.Order.Test.Api.Cest.OrderEntityCest.viewInHal)",
    "status": "pass",
    "time": 0.45904994010925,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check only the allowed methods are allowed (CG.Order.Test.Api.Cest.OrderEntityCest.checkAllowedMethods)"
}{
    "event": "test",
    "suite": "api",
    "test": "check only the allowed methods are allowed (CG.Order.Test.Api.Cest.OrderEntityCest.checkAllowedMethods)",
    "status": "pass",
    "time": 0.37747406959534,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check the up link is set as the parents url (CG.Order.Test.Api.Cest.OrderEntityCest.checkUplink)"
}{
    "event": "test",
    "suite": "api",
    "test": "check the up link is set as the parents url (CG.Order.Test.Api.Cest.OrderEntityCest.checkUplink)",
    "status": "pass",
    "time": 0.40298008918762,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check headers for head request and that body is empty (CG.Order.Test.Api.Cest.OrderEntityCest.checkHeadRequest)"
}{
    "event": "test",
    "suite": "api",
    "test": "check headers for head request and that body is empty (CG.Order.Test.Api.Cest.OrderEntityCest.checkHeadRequest)",
    "status": "pass",
    "time": 0.60330581665039,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "has e tag header (CG.Order.Test.Api.Cest.OrderEntityCest.hasETagHeader)"
}{
    "event": "test",
    "suite": "api",
    "test": "has e tag header (CG.Order.Test.Api.Cest.OrderEntityCest.hasETagHeader)",
    "status": "pass",
    "time": 0.46461009979248,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "get a 304 when i send the etag on a second get request (CG.Order.Test.Api.Cest.OrderEntityCest.sendETagGet304)"
}{
    "event": "test",
    "suite": "api",
    "test": "get a 304 when i send the etag on a second get request (CG.Order.Test.Api.Cest.OrderEntityCest.sendETagGet304)",
    "status": "pass",
    "time": 0.55322098731995,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check that if i send an invalid etag i get the entity (CG.Order.Test.Api.Cest.OrderEntityCest.sendInvalidETagGetNewETag)"
}{
    "event": "test",
    "suite": "api",
    "test": "check that if i send an invalid etag i get the entity (CG.Order.Test.Api.Cest.OrderEntityCest.sendInvalidETagGetNewETag)",
    "status": "pass",
    "time": 0.44649815559387,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "update the primary entity with matching etag (CG.Order.Test.Api.Cest.OrderEntityCest.updateEntityWithETag)"
}{
    "event": "test",
    "suite": "api",
    "test": "update the primary entity with matching etag (CG.Order.Test.Api.Cest.OrderEntityCest.updateEntityWithETag)",
    "status": "pass",
    "time": 0.65823698043823,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "update the primary entity with matching etag then get (CG.Order.Test.Api.Cest.OrderEntityCest.updateEntityWithETagThenGet)"
}{
    "event": "test",
    "suite": "api",
    "test": "update the primary entity with matching etag then get (CG.Order.Test.Api.Cest.OrderEntityCest.updateEntityWithETagThenGet)",
    "status": "pass",
    "time": 0.80482578277588,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "update the primary entity with matching etag and identical data (CG.Order.Test.Api.Cest.OrderEntityCest.updateEntityWithETagAndIdenticalData)"
}{
    "event": "test",
    "suite": "api",
    "test": "update the primary entity with matching etag and identical data (CG.Order.Test.Api.Cest.OrderEntityCest.updateEntityWithETagAndIdenticalData)",
    "status": "pass",
    "time": 0.60899901390076,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check i can't update the primary entity with an invalid etag (CG.Order.Test.Api.Cest.OrderEntityCest.updateEntityWithInvalidETag)"
}{
    "event": "test",
    "suite": "api",
    "test": "check i can't update the primary entity with an invalid etag (CG.Order.Test.Api.Cest.OrderEntityCest.updateEntityWithInvalidETag)",
    "status": "pass",
    "time": 0.47675490379333,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check i can't update the primary entity with an invalid etag and identical data (CG.Order.Test.Api.Cest.OrderEntityCest.updateEntityWithInvalidETagAndIdenticalData)"
}{
    "event": "test",
    "suite": "api",
    "test": "check i can't update the primary entity with an invalid etag and identical data (CG.Order.Test.Api.Cest.OrderEntityCest.updateEntityWithInvalidETagAndIdenticalData)",
    "status": "pass",
    "time": 0.49764013290405,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check getting other entities doesn't cause \"\/order\/1411-10\"'s etag to change (CG.Order.Test.Api.Cest.OrderEntityCest.checkDuplicateClassNameETagIssue)"
}{
    "event": "test",
    "suite": "api",
    "test": "check getting other entities doesn't cause \"\/order\/1411-10\"'s etag to change (CG.Order.Test.Api.Cest.OrderEntityCest.checkDuplicateClassNameETagIssue)",
    "status": "pass",
    "time": 3.2192919254303,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "update the primary entity without etag (CG.Order.Test.Api.Cest.OrderEntityCest.updateEntityWithoutEtagShouldFail)"
}{
    "event": "test",
    "suite": "api",
    "test": "update the primary entity without etag (CG.Order.Test.Api.Cest.OrderEntityCest.updateEntityWithoutEtagShouldFail)",
    "status": "pass",
    "time": 0.49245595932007,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "update the primary entity with empty etag (CG.Order.Test.Api.Cest.OrderEntityCest.updateEntityWithEmptyEtagShouldFail)"
}{
    "event": "test",
    "suite": "api",
    "test": "update the primary entity with empty etag (CG.Order.Test.Api.Cest.OrderEntityCest.updateEntityWithEmptyEtagShouldFail)",
    "status": "pass",
    "time": 0.43853902816772,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check i can not update an entity with the wrong parent id (CG.Order.Test.Api.Cest.OrderEntityCest.checkPutChildrenEndpointsWithWrongParentIdwithETags)"
}{
    "event": "test",
    "suite": "api",
    "test": "check i can not update an entity with the wrong parent id (CG.Order.Test.Api.Cest.OrderEntityCest.checkPutChildrenEndpointsWithWrongParentIdwithETags)",
    "status": "fail",
    "time": 1.0534479618073,
    "trace": [
        {
            "file": "\/var\/www\/cg_app\/current\/tests\/api\/ApiGuy.php",
            "line": 222,
            "function": "runStep",
            "class": "Codeception\\Scenario",
            "type": "->",
            "args": [

            ]
        },
        {
            "file": "\/var\/www\/cg_app\/current\/vendor\/channelgrabber\/codeception\/CG\/Codeception\/ApiHelper.php",
            "line": 540,
            "function": "seeResponseCodeIs",
            "class": "ApiGuy",
            "type": "->",
            "args": [
                200
            ]
        },
        {
            "file": "\/var\/www\/cg_app\/current\/tests\/api\/ApiGuy.php",
            "line": 3674,
            "function": "runStep",
            "class": "Codeception\\Scenario",
            "type": "->",
            "args": [

            ]
        },
        {
            "file": "\/var\/www\/cg_app\/current\/vendor\/channelgrabber\/codeception\/CG\/Codeception\/Cest\/Rest\/EntityETagTrait.php",
            "line": 322,
            "function": "urlHasETagHeader",
            "class": "ApiGuy",
            "type": "->",
            "args": [
                {

                },
                "\/order\/1411-10\/note\/5",
                "CG\\Order\\Test\\Api\\Page\\OrderEntityPage"
            ]
        }
    ],
    "message": "Failed asserting that 404 matches expected 200.",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "view a collection (CG.Order.Test.Api.Cest.OrderItem.FeeCest.viewCollection)"
}{
    "event": "test",
    "suite": "api",
    "test": "view a collection (CG.Order.Test.Api.Cest.OrderItem.FeeCest.viewCollection)",
    "status": "pass",
    "time": 0.36332511901855,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "view a collection by page (CG.Order.Test.Api.Cest.OrderItem.FeeCest.checkPagination)"
}{
    "event": "test",
    "suite": "api",
    "test": "view a collection by page (CG.Order.Test.Api.Cest.OrderItem.FeeCest.checkPagination)",
    "status": "pass",
    "time": 0.64205002784729,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "view a collection by page (CG.Order.Test.Api.Cest.OrderItem.FeeCest.checkCollectionCache)"
}{
    "event": "test",
    "suite": "api",
    "test": "view a collection by page (CG.Order.Test.Api.Cest.OrderItem.FeeCest.checkCollectionCache)",
    "status": "pass",
    "time": 0.42170095443726,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "has filters (CG.Order.Test.Api.Cest.OrderItem.FeeCest.hasFilters)"
}{
    "event": "test",
    "suite": "api",
    "test": "has filters (CG.Order.Test.Api.Cest.OrderItem.FeeCest.hasFilters)",
    "status": "pass",
    "time": 0.23682188987732,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check filters (CG.Order.Test.Api.Cest.OrderItem.FeeCest.checkFilters)"
}{
    "event": "test",
    "suite": "api",
    "test": "check filters (CG.Order.Test.Api.Cest.OrderItem.FeeCest.checkFilters)",
    "status": "pass",
    "time": 0.25911712646484,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check multi filters (CG.Order.Test.Api.Cest.OrderItem.FeeCest.checkMultiFilters)"
}{
    "event": "test",
    "suite": "api",
    "test": "check multi filters (CG.Order.Test.Api.Cest.OrderItem.FeeCest.checkMultiFilters)",
    "status": "pass",
    "time": 0.26190495491028,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "create entity (CG.Order.Test.Api.Cest.OrderItem.FeeCest.createEntity)"
}{
    "event": "test",
    "suite": "api",
    "test": "create entity (CG.Order.Test.Api.Cest.OrderItem.FeeCest.createEntity)",
    "status": "pass",
    "time": 0.28691983222961,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "create entity then get (CG.Order.Test.Api.Cest.OrderItem.FeeCest.createEntityThenGet)"
}{
    "event": "test",
    "suite": "api",
    "test": "create entity then get (CG.Order.Test.Api.Cest.OrderItem.FeeCest.createEntityThenGet)",
    "status": "pass",
    "time": 0.2564709186554,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "create a new entity (CG.Order.Test.Api.Cest.OrderItem.FeeCest.createEntityThenGetCollection)"
}{
    "event": "test",
    "suite": "api",
    "test": "create a new entity (CG.Order.Test.Api.Cest.OrderItem.FeeCest.createEntityThenGetCollection)",
    "status": "pass",
    "time": 0.45817303657532,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "create entity then get collection with filters (CG.Order.Test.Api.Cest.OrderItem.FeeCest.createEntityThenGetCollectionWithFilters)"
}{
    "event": "test",
    "suite": "api",
    "test": "create entity then get collection with filters (CG.Order.Test.Api.Cest.OrderItem.FeeCest.createEntityThenGetCollectionWithFilters)",
    "status": "pass",
    "time": 0.27280306816101,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "create entity put entity then get collection (CG.Order.Test.Api.Cest.OrderItem.FeeCest.createEntityPutEntityThenGetCollection)"
}{
    "event": "test",
    "suite": "api",
    "test": "create entity put entity then get collection (CG.Order.Test.Api.Cest.OrderItem.FeeCest.createEntityPutEntityThenGetCollection)",
    "status": "pass",
    "time": 0.26230096817017,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check i can not create a entity with empty data (CG.Order.Test.Api.Cest.OrderItem.FeeCest.createEmptyEntity)"
}{
    "event": "test",
    "suite": "api",
    "test": "check i can not create a entity with empty data (CG.Order.Test.Api.Cest.OrderItem.FeeCest.createEmptyEntity)",
    "status": "pass",
    "time": 0.353276014328,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check i can not create a entity with invalid data (CG.Order.Test.Api.Cest.OrderItem.FeeCest.createInvalidEntity)"
}{
    "event": "test",
    "suite": "api",
    "test": "check i can not create a entity with invalid data (CG.Order.Test.Api.Cest.OrderItem.FeeCest.createInvalidEntity)",
    "status": "pass",
    "time": 0.32450985908508,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check i can not create a new entity if i send additional fields (CG.Order.Test.Api.Cest.OrderItem.FeeCest.createEntityWithAdditionalFields)"
}{
    "event": "test",
    "suite": "api",
    "test": "check i can not create a new entity if i send additional fields (CG.Order.Test.Api.Cest.OrderItem.FeeCest.createEntityWithAdditionalFields)",
    "status": "pass",
    "time": 0.3497359752655,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "create entity with invalid date range (CG.Order.Test.Api.Cest.OrderItem.FeeCest.createEntityWithInvalidDateRange)"
}{
    "event": "test",
    "suite": "api",
    "test": "create entity with invalid date range (CG.Order.Test.Api.Cest.OrderItem.FeeCest.createEntityWithInvalidDateRange)",
    "status": "pass",
    "time": 0.27034497261047,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "test single date filter (CG.Order.Test.Api.Cest.OrderItem.FeeCest.testSingleDateFilter)"
}{
    "event": "test",
    "suite": "api",
    "test": "test single date filter (CG.Order.Test.Api.Cest.OrderItem.FeeCest.testSingleDateFilter)",
    "status": "pass",
    "time": 0.2755491733551,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "test date range filter (CG.Order.Test.Api.Cest.OrderItem.FeeCest.testDateRangeFilter)"
}{
    "event": "test",
    "suite": "api",
    "test": "test date range filter (CG.Order.Test.Api.Cest.OrderItem.FeeCest.testDateRangeFilter)",
    "status": "pass",
    "time": 0.27504396438599,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "test range filters (CG.Order.Test.Api.Cest.OrderItem.FeeCest.testRangeFilters)"
}{
    "event": "test",
    "suite": "api",
    "test": "test range filters (CG.Order.Test.Api.Cest.OrderItem.FeeCest.testRangeFilters)",
    "status": "pass",
    "time": 0.29258489608765,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "test array filters dont accept string (CG.Order.Test.Api.Cest.OrderItem.FeeCest.testArrayFiltersDontAcceptString)"
}{
    "event": "test",
    "suite": "api",
    "test": "test array filters dont accept string (CG.Order.Test.Api.Cest.OrderItem.FeeCest.testArrayFiltersDontAcceptString)",
    "status": "pass",
    "time": 0.26716804504395,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "test string filters dont accept array (CG.Order.Test.Api.Cest.OrderItem.FeeCest.testStringFiltersDontAcceptArray)"
}{
    "event": "test",
    "suite": "api",
    "test": "test string filters dont accept array (CG.Order.Test.Api.Cest.OrderItem.FeeCest.testStringFiltersDontAcceptArray)",
    "status": "pass",
    "time": 0.2525999546051,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check search term filters (CG.Order.Test.Api.Cest.OrderItem.FeeCest.checkSearchTermFilters)"
}{
    "event": "test",
    "suite": "api",
    "test": "check search term filters (CG.Order.Test.Api.Cest.OrderItem.FeeCest.checkSearchTermFilters)",
    "status": "pass",
    "time": 0.25155520439148,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "see a resource endpoint contains hal (CG.Order.Test.Api.Cest.OrderItem.FeeCest.viewInHal)"
}{
    "event": "test",
    "suite": "api",
    "test": "see a resource endpoint contains hal (CG.Order.Test.Api.Cest.OrderItem.FeeCest.viewInHal)",
    "status": "pass",
    "time": 0.35626792907715,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check only the allowed methods are allowed (CG.Order.Test.Api.Cest.OrderItem.FeeCest.checkAllowedMethods)"
}{
    "event": "test",
    "suite": "api",
    "test": "check only the allowed methods are allowed (CG.Order.Test.Api.Cest.OrderItem.FeeCest.checkAllowedMethods)",
    "status": "pass",
    "time": 0.46536016464233,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check the up link is set as the parents url (CG.Order.Test.Api.Cest.OrderItem.FeeCest.checkUplink)"
}{
    "event": "test",
    "suite": "api",
    "test": "check the up link is set as the parents url (CG.Order.Test.Api.Cest.OrderItem.FeeCest.checkUplink)",
    "status": "pass",
    "time": 0.37288212776184,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check headers for head request and that body is empty (CG.Order.Test.Api.Cest.OrderItem.FeeCest.checkHeadRequest)"
}{
    "event": "test",
    "suite": "api",
    "test": "check headers for head request and that body is empty (CG.Order.Test.Api.Cest.OrderItem.FeeCest.checkHeadRequest)",
    "status": "pass",
    "time": 0.45357394218445,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "create entity then get collection multiple times (CG.Order.Test.Api.Cest.OrderItem.FeeCest.createEntityThenGetCollectionMultipleTimes)"
}{
    "event": "test",
    "suite": "api",
    "test": "create entity then get collection multiple times (CG.Order.Test.Api.Cest.OrderItem.FeeCest.createEntityThenGetCollectionMultipleTimes)",
    "status": "pass",
    "time": 0.22686696052551,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "create entity then get collection multiple times from existing (CG.Order.Test.Api.Cest.OrderItem.FeeCest.createEntityThenGetCollectionMultipleTimesFromExisting)"
}{
    "event": "test",
    "suite": "api",
    "test": "create entity then get collection multiple times from existing (CG.Order.Test.Api.Cest.OrderItem.FeeCest.createEntityThenGetCollectionMultipleTimesFromExisting)",
    "status": "pass",
    "time": 0.28182101249695,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "view a collection (CG.Order.Test.Api.Cest.OrderItem.FeeCest.viewCollectionAll)"
}{
    "event": "test",
    "suite": "api",
    "test": "view a collection (CG.Order.Test.Api.Cest.OrderItem.FeeCest.viewCollectionAll)",
    "status": "pass",
    "time": 0.37840104103088,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "view a collection (CG.Order.Test.Api.Cest.OrderItem.FeeCest.viewCollectionZeroLimit)"
}{
    "event": "test",
    "suite": "api",
    "test": "view a collection (CG.Order.Test.Api.Cest.OrderItem.FeeCest.viewCollectionZeroLimit)",
    "status": "pass",
    "time": 0.34837985038757,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check filters pagination (CG.Order.Test.Api.Cest.OrderItem.FeeCest.checkFiltersPagination)"
}{
    "event": "test",
    "suite": "api",
    "test": "check filters pagination (CG.Order.Test.Api.Cest.OrderItem.FeeCest.checkFiltersPagination)",
    "status": "pass",
    "time": 0.24572682380676,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "test timestamp filter (CG.Order.Test.Api.Cest.OrderItem.FeeCest.testTimestampFilter)"
}{
    "event": "test",
    "suite": "api",
    "test": "test timestamp filter (CG.Order.Test.Api.Cest.OrderItem.FeeCest.testTimestampFilter)",
    "status": "pass",
    "time": 0.27890205383301,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "test timestamp range filters (CG.Order.Test.Api.Cest.OrderItem.FeeCest.testTimestampRangeFilters)"
}{
    "event": "test",
    "suite": "api",
    "test": "test timestamp range filters (CG.Order.Test.Api.Cest.OrderItem.FeeCest.testTimestampRangeFilters)",
    "status": "pass",
    "time": 0.28129291534424,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "view the primary entity (CG.Order.Test.Api.Cest.OrderItem.FeeEntityCest.viewPrimaryEntity)"
}{
    "event": "test",
    "suite": "api",
    "test": "view the primary entity (CG.Order.Test.Api.Cest.OrderItem.FeeEntityCest.viewPrimaryEntity)",
    "status": "pass",
    "time": 3.2789978981018,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "view the secondary entity (CG.Order.Test.Api.Cest.OrderItem.FeeEntityCest.viewSecondaryEntity)"
}{
    "event": "test",
    "suite": "api",
    "test": "view the secondary entity (CG.Order.Test.Api.Cest.OrderItem.FeeEntityCest.viewSecondaryEntity)",
    "status": "pass",
    "time": 0.34839701652527,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check i can not view a non existent entity (CG.Order.Test.Api.Cest.OrderItem.FeeEntityCest.viewNonExistentEntity)"
}{
    "event": "test",
    "suite": "api",
    "test": "check i can not view a non existent entity (CG.Order.Test.Api.Cest.OrderItem.FeeEntityCest.viewNonExistentEntity)",
    "status": "pass",
    "time": 0.35526704788208,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "update primary entity (CG.Order.Test.Api.Cest.OrderItem.FeeEntityCest.updatePrimaryEntity)"
}{
    "event": "test",
    "suite": "api",
    "test": "update primary entity (CG.Order.Test.Api.Cest.OrderItem.FeeEntityCest.updatePrimaryEntity)",
    "status": "pass",
    "time": 0.2546169757843,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "update primary entity then get (CG.Order.Test.Api.Cest.OrderItem.FeeEntityCest.updatePrimaryEntityThenGet)"
}{
    "event": "test",
    "suite": "api",
    "test": "update primary entity then get (CG.Order.Test.Api.Cest.OrderItem.FeeEntityCest.updatePrimaryEntityThenGet)",
    "status": "pass",
    "time": 0.25944709777832,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "update primary entity with empty data (CG.Order.Test.Api.Cest.OrderItem.FeeEntityCest.updatePrimaryEntityWithEmptyData)"
}{
    "event": "test",
    "suite": "api",
    "test": "update primary entity with empty data (CG.Order.Test.Api.Cest.OrderItem.FeeEntityCest.updatePrimaryEntityWithEmptyData)",
    "status": "pass",
    "time": 0.27169895172119,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "update primary entity with invalid data (CG.Order.Test.Api.Cest.OrderItem.FeeEntityCest.updatePrimaryEntityWithInvalidData)"
}{
    "event": "test",
    "suite": "api",
    "test": "update primary entity with invalid data (CG.Order.Test.Api.Cest.OrderItem.FeeEntityCest.updatePrimaryEntityWithInvalidData)",
    "status": "pass",
    "time": 0.27644896507263,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "update primary entity with additional fields (CG.Order.Test.Api.Cest.OrderItem.FeeEntityCest.updatePrimaryEntityWithAdditionalFields)"
}{
    "event": "test",
    "suite": "api",
    "test": "update primary entity with additional fields (CG.Order.Test.Api.Cest.OrderItem.FeeEntityCest.updatePrimaryEntityWithAdditionalFields)",
    "status": "pass",
    "time": 0.2648549079895,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check i delete the primary entity (CG.Order.Test.Api.Cest.OrderItem.FeeEntityCest.deletePrimaryEntity)"
}{
    "event": "test",
    "suite": "api",
    "test": "check i delete the primary entity (CG.Order.Test.Api.Cest.OrderItem.FeeEntityCest.deletePrimaryEntity)",
    "status": "pass",
    "time": 0.38373112678528,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check i delete the primary entity (CG.Order.Test.Api.Cest.OrderItem.FeeEntityCest.deletePrimaryEntityWithGet)"
}{
    "event": "test",
    "suite": "api",
    "test": "check i delete the primary entity (CG.Order.Test.Api.Cest.OrderItem.FeeEntityCest.deletePrimaryEntityWithGet)",
    "status": "pass",
    "time": 0.43574786186218,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check i delete the primary entity (CG.Order.Test.Api.Cest.OrderItem.FeeEntityCest.deletePrimaryEntityWithGetCollection)"
}{
    "event": "test",
    "suite": "api",
    "test": "check i delete the primary entity (CG.Order.Test.Api.Cest.OrderItem.FeeEntityCest.deletePrimaryEntityWithGetCollection)",
    "status": "pass",
    "time": 0.44869184494019,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check i can not delete a non existent entity (CG.Order.Test.Api.Cest.OrderItem.FeeEntityCest.deleteNonExistentEntity)"
}{
    "event": "test",
    "suite": "api",
    "test": "check i can not delete a non existent entity (CG.Order.Test.Api.Cest.OrderItem.FeeEntityCest.deleteNonExistentEntity)",
    "status": "pass",
    "time": 0.3406879901886,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check entity embed (CG.Order.Test.Api.Cest.OrderItem.FeeEntityCest.checkEntityEmbed)"
}{
    "event": "test",
    "suite": "api",
    "test": "check entity embed (CG.Order.Test.Api.Cest.OrderItem.FeeEntityCest.checkEntityEmbed)",
    "status": "pass",
    "time": 0.29023408889771,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check children endpoints with wrong parent id (CG.Order.Test.Api.Cest.OrderItem.FeeEntityCest.checkChildrenEndpointsWithWrongParentId)"
}{
    "event": "test",
    "suite": "api",
    "test": "check children endpoints with wrong parent id (CG.Order.Test.Api.Cest.OrderItem.FeeEntityCest.checkChildrenEndpointsWithWrongParentId)",
    "status": "pass",
    "time": 0.25833606719971,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check put children endpoints with wrong parent id (CG.Order.Test.Api.Cest.OrderItem.FeeEntityCest.checkPutChildrenEndpointsWithWrongParentId)"
}{
    "event": "test",
    "suite": "api",
    "test": "check put children endpoints with wrong parent id (CG.Order.Test.Api.Cest.OrderItem.FeeEntityCest.checkPutChildrenEndpointsWithWrongParentId)",
    "status": "pass",
    "time": 0.28943705558777,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "see a resource endpoint contains hal (CG.Order.Test.Api.Cest.OrderItem.FeeEntityCest.viewInHal)"
}{
    "event": "test",
    "suite": "api",
    "test": "see a resource endpoint contains hal (CG.Order.Test.Api.Cest.OrderItem.FeeEntityCest.viewInHal)",
    "status": "pass",
    "time": 0.33190298080444,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check only the allowed methods are allowed (CG.Order.Test.Api.Cest.OrderItem.FeeEntityCest.checkAllowedMethods)"
}{
    "event": "test",
    "suite": "api",
    "test": "check only the allowed methods are allowed (CG.Order.Test.Api.Cest.OrderItem.FeeEntityCest.checkAllowedMethods)",
    "status": "pass",
    "time": 0.37297892570496,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check the up link is set as the parents url (CG.Order.Test.Api.Cest.OrderItem.FeeEntityCest.checkUplink)"
}{
    "event": "test",
    "suite": "api",
    "test": "check the up link is set as the parents url (CG.Order.Test.Api.Cest.OrderItem.FeeEntityCest.checkUplink)",
    "status": "pass",
    "time": 0.36613392829895,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check headers for head request and that body is empty (CG.Order.Test.Api.Cest.OrderItem.FeeEntityCest.checkHeadRequest)"
}{
    "event": "test",
    "suite": "api",
    "test": "check headers for head request and that body is empty (CG.Order.Test.Api.Cest.OrderItem.FeeEntityCest.checkHeadRequest)",
    "status": "pass",
    "time": 0.41935396194458,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "has e tag header (CG.Order.Test.Api.Cest.OrderItem.FeeEntityCest.hasETagHeader)"
}{
    "event": "test",
    "suite": "api",
    "test": "has e tag header (CG.Order.Test.Api.Cest.OrderItem.FeeEntityCest.hasETagHeader)",
    "status": "pass",
    "time": 0.34787487983704,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "get a 304 when i send the etag on a second get request (CG.Order.Test.Api.Cest.OrderItem.FeeEntityCest.sendETagGet304)"
}{
    "event": "test",
    "suite": "api",
    "test": "get a 304 when i send the etag on a second get request (CG.Order.Test.Api.Cest.OrderItem.FeeEntityCest.sendETagGet304)",
    "status": "pass",
    "time": 0.42655491828918,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check that if i send an invalid etag i get the entity (CG.Order.Test.Api.Cest.OrderItem.FeeEntityCest.sendInvalidETagGetNewETag)"
}{
    "event": "test",
    "suite": "api",
    "test": "check that if i send an invalid etag i get the entity (CG.Order.Test.Api.Cest.OrderItem.FeeEntityCest.sendInvalidETagGetNewETag)",
    "status": "pass",
    "time": 0.37106990814209,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "update the primary entity with matching etag (CG.Order.Test.Api.Cest.OrderItem.FeeEntityCest.updateEntityWithETag)"
}{
    "event": "test",
    "suite": "api",
    "test": "update the primary entity with matching etag (CG.Order.Test.Api.Cest.OrderItem.FeeEntityCest.updateEntityWithETag)",
    "status": "pass",
    "time": 0.43141293525696,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "update the primary entity with matching etag then get (CG.Order.Test.Api.Cest.OrderItem.FeeEntityCest.updateEntityWithETagThenGet)"
}{
    "event": "test",
    "suite": "api",
    "test": "update the primary entity with matching etag then get (CG.Order.Test.Api.Cest.OrderItem.FeeEntityCest.updateEntityWithETagThenGet)",
    "status": "pass",
    "time": 0.51531386375427,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "update the primary entity with matching etag and identical data (CG.Order.Test.Api.Cest.OrderItem.FeeEntityCest.updateEntityWithETagAndIdenticalData)"
}{
    "event": "test",
    "suite": "api",
    "test": "update the primary entity with matching etag and identical data (CG.Order.Test.Api.Cest.OrderItem.FeeEntityCest.updateEntityWithETagAndIdenticalData)",
    "status": "pass",
    "time": 0.44288301467896,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check i can't update the primary entity with an invalid etag (CG.Order.Test.Api.Cest.OrderItem.FeeEntityCest.updateEntityWithInvalidETag)"
}{
    "event": "test",
    "suite": "api",
    "test": "check i can't update the primary entity with an invalid etag (CG.Order.Test.Api.Cest.OrderItem.FeeEntityCest.updateEntityWithInvalidETag)",
    "status": "pass",
    "time": 0.34588289260864,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check i can't update the primary entity with an invalid etag and identical data (CG.Order.Test.Api.Cest.OrderItem.FeeEntityCest.updateEntityWithInvalidETagAndIdenticalData)"
}{
    "event": "test",
    "suite": "api",
    "test": "check i can't update the primary entity with an invalid etag and identical data (CG.Order.Test.Api.Cest.OrderItem.FeeEntityCest.updateEntityWithInvalidETagAndIdenticalData)",
    "status": "pass",
    "time": 0.36597800254822,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check getting other entities doesn't cause \"\/orderitem\/1411-11\/fee\/1\"'s etag to change (CG.Order.Test.Api.Cest.OrderItem.FeeEntityCest.checkDuplicateClassNameETagIssue)"
}{
    "event": "test",
    "suite": "api",
    "test": "check getting other entities doesn't cause \"\/orderitem\/1411-11\/fee\/1\"'s etag to change (CG.Order.Test.Api.Cest.OrderItem.FeeEntityCest.checkDuplicateClassNameETagIssue)",
    "status": "pass",
    "time": 2.3003599643707,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "update the primary entity without etag (CG.Order.Test.Api.Cest.OrderItem.FeeEntityCest.updateEntityWithoutEtagShouldFail)"
}{
    "event": "test",
    "suite": "api",
    "test": "update the primary entity without etag (CG.Order.Test.Api.Cest.OrderItem.FeeEntityCest.updateEntityWithoutEtagShouldFail)",
    "status": "pass",
    "time": 0.33276104927063,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "update the primary entity with empty etag (CG.Order.Test.Api.Cest.OrderItem.FeeEntityCest.updateEntityWithEmptyEtagShouldFail)"
}{
    "event": "test",
    "suite": "api",
    "test": "update the primary entity with empty etag (CG.Order.Test.Api.Cest.OrderItem.FeeEntityCest.updateEntityWithEmptyEtagShouldFail)",
    "status": "pass",
    "time": 0.3680419921875,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check put children endpoints with wrong parent idwith e tags (CG.Order.Test.Api.Cest.OrderItem.FeeEntityCest.checkPutChildrenEndpointsWithWrongParentIdwithETags)"
}{
    "event": "test",
    "suite": "api",
    "test": "check put children endpoints with wrong parent idwith e tags (CG.Order.Test.Api.Cest.OrderItem.FeeEntityCest.checkPutChildrenEndpointsWithWrongParentIdwithETags)",
    "status": "pass",
    "time": 0.26006889343262,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "view a collection (CG.Order.Test.Api.Cest.OrderItem.GiftWrapCest.viewCollection)"
}{
    "event": "test",
    "suite": "api",
    "test": "view a collection (CG.Order.Test.Api.Cest.OrderItem.GiftWrapCest.viewCollection)",
    "status": "pass",
    "time": 0.37101221084595,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "view a collection by page (CG.Order.Test.Api.Cest.OrderItem.GiftWrapCest.checkPagination)"
}{
    "event": "test",
    "suite": "api",
    "test": "view a collection by page (CG.Order.Test.Api.Cest.OrderItem.GiftWrapCest.checkPagination)",
    "status": "pass",
    "time": 0.60266494750977,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "view a collection by page (CG.Order.Test.Api.Cest.OrderItem.GiftWrapCest.checkCollectionCache)"
}{
    "event": "test",
    "suite": "api",
    "test": "view a collection by page (CG.Order.Test.Api.Cest.OrderItem.GiftWrapCest.checkCollectionCache)",
    "status": "pass",
    "time": 0.42802119255066,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "has filters (CG.Order.Test.Api.Cest.OrderItem.GiftWrapCest.hasFilters)"
}{
    "event": "test",
    "suite": "api",
    "test": "has filters (CG.Order.Test.Api.Cest.OrderItem.GiftWrapCest.hasFilters)",
    "status": "pass",
    "time": 0.26560807228088,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check filters (CG.Order.Test.Api.Cest.OrderItem.GiftWrapCest.checkFilters)"
}{
    "event": "test",
    "suite": "api",
    "test": "check filters (CG.Order.Test.Api.Cest.OrderItem.GiftWrapCest.checkFilters)",
    "status": "pass",
    "time": 0.28569102287292,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check multi filters (CG.Order.Test.Api.Cest.OrderItem.GiftWrapCest.checkMultiFilters)"
}{
    "event": "test",
    "suite": "api",
    "test": "check multi filters (CG.Order.Test.Api.Cest.OrderItem.GiftWrapCest.checkMultiFilters)",
    "status": "pass",
    "time": 0.26830005645752,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "create entity (CG.Order.Test.Api.Cest.OrderItem.GiftWrapCest.createEntity)"
}{
    "event": "test",
    "suite": "api",
    "test": "create entity (CG.Order.Test.Api.Cest.OrderItem.GiftWrapCest.createEntity)",
    "status": "pass",
    "time": 0.2826681137085,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "create entity then get (CG.Order.Test.Api.Cest.OrderItem.GiftWrapCest.createEntityThenGet)"
}{
    "event": "test",
    "suite": "api",
    "test": "create entity then get (CG.Order.Test.Api.Cest.OrderItem.GiftWrapCest.createEntityThenGet)",
    "status": "pass",
    "time": 0.2886381149292,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "create a new entity (CG.Order.Test.Api.Cest.OrderItem.GiftWrapCest.createEntityThenGetCollection)"
}{
    "event": "test",
    "suite": "api",
    "test": "create a new entity (CG.Order.Test.Api.Cest.OrderItem.GiftWrapCest.createEntityThenGetCollection)",
    "status": "pass",
    "time": 0.43247199058533,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "create entity then get collection with filters (CG.Order.Test.Api.Cest.OrderItem.GiftWrapCest.createEntityThenGetCollectionWithFilters)"
}{
    "event": "test",
    "suite": "api",
    "test": "create entity then get collection with filters (CG.Order.Test.Api.Cest.OrderItem.GiftWrapCest.createEntityThenGetCollectionWithFilters)",
    "status": "pass",
    "time": 0.24742412567139,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "create entity put entity then get collection (CG.Order.Test.Api.Cest.OrderItem.GiftWrapCest.createEntityPutEntityThenGetCollection)"
}{
    "event": "test",
    "suite": "api",
    "test": "create entity put entity then get collection (CG.Order.Test.Api.Cest.OrderItem.GiftWrapCest.createEntityPutEntityThenGetCollection)",
    "status": "pass",
    "time": 0.27832388877869,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check i can not create a entity with empty data (CG.Order.Test.Api.Cest.OrderItem.GiftWrapCest.createEmptyEntity)"
}{
    "event": "test",
    "suite": "api",
    "test": "check i can not create a entity with empty data (CG.Order.Test.Api.Cest.OrderItem.GiftWrapCest.createEmptyEntity)",
    "status": "pass",
    "time": 0.40011882781982,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check i can not create a entity with invalid data (CG.Order.Test.Api.Cest.OrderItem.GiftWrapCest.createInvalidEntity)"
}{
    "event": "test",
    "suite": "api",
    "test": "check i can not create a entity with invalid data (CG.Order.Test.Api.Cest.OrderItem.GiftWrapCest.createInvalidEntity)",
    "status": "pass",
    "time": 0.32185411453247,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check i can not create a new entity if i send additional fields (CG.Order.Test.Api.Cest.OrderItem.GiftWrapCest.createEntityWithAdditionalFields)"
}{
    "event": "test",
    "suite": "api",
    "test": "check i can not create a new entity if i send additional fields (CG.Order.Test.Api.Cest.OrderItem.GiftWrapCest.createEntityWithAdditionalFields)",
    "status": "pass",
    "time": 0.34986114501953,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "create entity with invalid date range (CG.Order.Test.Api.Cest.OrderItem.GiftWrapCest.createEntityWithInvalidDateRange)"
}{
    "event": "test",
    "suite": "api",
    "test": "create entity with invalid date range (CG.Order.Test.Api.Cest.OrderItem.GiftWrapCest.createEntityWithInvalidDateRange)",
    "status": "pass",
    "time": 0.27244019508362,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "test single date filter (CG.Order.Test.Api.Cest.OrderItem.GiftWrapCest.testSingleDateFilter)"
}{
    "event": "test",
    "suite": "api",
    "test": "test single date filter (CG.Order.Test.Api.Cest.OrderItem.GiftWrapCest.testSingleDateFilter)",
    "status": "pass",
    "time": 0.27511501312256,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "test date range filter (CG.Order.Test.Api.Cest.OrderItem.GiftWrapCest.testDateRangeFilter)"
}{
    "event": "test",
    "suite": "api",
    "test": "test date range filter (CG.Order.Test.Api.Cest.OrderItem.GiftWrapCest.testDateRangeFilter)",
    "status": "pass",
    "time": 0.28044581413269,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "test range filters (CG.Order.Test.Api.Cest.OrderItem.GiftWrapCest.testRangeFilters)"
}{
    "event": "test",
    "suite": "api",
    "test": "test range filters (CG.Order.Test.Api.Cest.OrderItem.GiftWrapCest.testRangeFilters)",
    "status": "pass",
    "time": 0.27847504615784,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "test array filters dont accept string (CG.Order.Test.Api.Cest.OrderItem.GiftWrapCest.testArrayFiltersDontAcceptString)"
}{
    "event": "test",
    "suite": "api",
    "test": "test array filters dont accept string (CG.Order.Test.Api.Cest.OrderItem.GiftWrapCest.testArrayFiltersDontAcceptString)",
    "status": "pass",
    "time": 0.24794292449951,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "test string filters dont accept array (CG.Order.Test.Api.Cest.OrderItem.GiftWrapCest.testStringFiltersDontAcceptArray)"
}{
    "event": "test",
    "suite": "api",
    "test": "test string filters dont accept array (CG.Order.Test.Api.Cest.OrderItem.GiftWrapCest.testStringFiltersDontAcceptArray)",
    "status": "pass",
    "time": 0.27888822555542,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check search term filters (CG.Order.Test.Api.Cest.OrderItem.GiftWrapCest.checkSearchTermFilters)"
}{
    "event": "test",
    "suite": "api",
    "test": "check search term filters (CG.Order.Test.Api.Cest.OrderItem.GiftWrapCest.checkSearchTermFilters)",
    "status": "pass",
    "time": 0.27219700813293,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "see a resource endpoint contains hal (CG.Order.Test.Api.Cest.OrderItem.GiftWrapCest.viewInHal)"
}{
    "event": "test",
    "suite": "api",
    "test": "see a resource endpoint contains hal (CG.Order.Test.Api.Cest.OrderItem.GiftWrapCest.viewInHal)",
    "status": "pass",
    "time": 0.3773410320282,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check only the allowed methods are allowed (CG.Order.Test.Api.Cest.OrderItem.GiftWrapCest.checkAllowedMethods)"
}{
    "event": "test",
    "suite": "api",
    "test": "check only the allowed methods are allowed (CG.Order.Test.Api.Cest.OrderItem.GiftWrapCest.checkAllowedMethods)",
    "status": "pass",
    "time": 0.44631409645081,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check the up link is set as the parents url (CG.Order.Test.Api.Cest.OrderItem.GiftWrapCest.checkUplink)"
}{
    "event": "test",
    "suite": "api",
    "test": "check the up link is set as the parents url (CG.Order.Test.Api.Cest.OrderItem.GiftWrapCest.checkUplink)",
    "status": "pass",
    "time": 0.36288094520569,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check headers for head request and that body is empty (CG.Order.Test.Api.Cest.OrderItem.GiftWrapCest.checkHeadRequest)"
}{
    "event": "test",
    "suite": "api",
    "test": "check headers for head request and that body is empty (CG.Order.Test.Api.Cest.OrderItem.GiftWrapCest.checkHeadRequest)",
    "status": "pass",
    "time": 0.42860794067383,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "create entity then get collection multiple times (CG.Order.Test.Api.Cest.OrderItem.GiftWrapCest.createEntityThenGetCollectionMultipleTimes)"
}{
    "event": "test",
    "suite": "api",
    "test": "create entity then get collection multiple times (CG.Order.Test.Api.Cest.OrderItem.GiftWrapCest.createEntityThenGetCollectionMultipleTimes)",
    "status": "pass",
    "time": 0.2465980052948,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "create entity then get collection multiple times from existing (CG.Order.Test.Api.Cest.OrderItem.GiftWrapCest.createEntityThenGetCollectionMultipleTimesFromExisting)"
}{
    "event": "test",
    "suite": "api",
    "test": "create entity then get collection multiple times from existing (CG.Order.Test.Api.Cest.OrderItem.GiftWrapCest.createEntityThenGetCollectionMultipleTimesFromExisting)",
    "status": "pass",
    "time": 0.27651786804199,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "view a collection (CG.Order.Test.Api.Cest.OrderItem.GiftWrapCest.viewCollectionAll)"
}{
    "event": "test",
    "suite": "api",
    "test": "view a collection (CG.Order.Test.Api.Cest.OrderItem.GiftWrapCest.viewCollectionAll)",
    "status": "pass",
    "time": 0.39488291740417,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "view a collection (CG.Order.Test.Api.Cest.OrderItem.GiftWrapCest.viewCollectionZeroLimit)"
}{
    "event": "test",
    "suite": "api",
    "test": "view a collection (CG.Order.Test.Api.Cest.OrderItem.GiftWrapCest.viewCollectionZeroLimit)",
    "status": "pass",
    "time": 0.40082097053528,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check filters pagination (CG.Order.Test.Api.Cest.OrderItem.GiftWrapCest.checkFiltersPagination)"
}{
    "event": "test",
    "suite": "api",
    "test": "check filters pagination (CG.Order.Test.Api.Cest.OrderItem.GiftWrapCest.checkFiltersPagination)",
    "status": "pass",
    "time": 0.28008508682251,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "test timestamp filter (CG.Order.Test.Api.Cest.OrderItem.GiftWrapCest.testTimestampFilter)"
}{
    "event": "test",
    "suite": "api",
    "test": "test timestamp filter (CG.Order.Test.Api.Cest.OrderItem.GiftWrapCest.testTimestampFilter)",
    "status": "pass",
    "time": 0.26671314239502,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "test timestamp range filters (CG.Order.Test.Api.Cest.OrderItem.GiftWrapCest.testTimestampRangeFilters)"
}{
    "event": "test",
    "suite": "api",
    "test": "test timestamp range filters (CG.Order.Test.Api.Cest.OrderItem.GiftWrapCest.testTimestampRangeFilters)",
    "status": "pass",
    "time": 0.25871682167053,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "view the primary entity (CG.Order.Test.Api.Cest.OrderItem.GiftWrapEntityCest.viewPrimaryEntity)"
}{
    "event": "test",
    "suite": "api",
    "test": "view the primary entity (CG.Order.Test.Api.Cest.OrderItem.GiftWrapEntityCest.viewPrimaryEntity)",
    "status": "pass",
    "time": 0.3681001663208,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "view the secondary entity (CG.Order.Test.Api.Cest.OrderItem.GiftWrapEntityCest.viewSecondaryEntity)"
}{
    "event": "test",
    "suite": "api",
    "test": "view the secondary entity (CG.Order.Test.Api.Cest.OrderItem.GiftWrapEntityCest.viewSecondaryEntity)",
    "status": "pass",
    "time": 0.36278986930847,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check i can not view a non existent entity (CG.Order.Test.Api.Cest.OrderItem.GiftWrapEntityCest.viewNonExistentEntity)"
}{
    "event": "test",
    "suite": "api",
    "test": "check i can not view a non existent entity (CG.Order.Test.Api.Cest.OrderItem.GiftWrapEntityCest.viewNonExistentEntity)",
    "status": "pass",
    "time": 0.33527588844299,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "update primary entity (CG.Order.Test.Api.Cest.OrderItem.GiftWrapEntityCest.updatePrimaryEntity)"
}{
    "event": "test",
    "suite": "api",
    "test": "update primary entity (CG.Order.Test.Api.Cest.OrderItem.GiftWrapEntityCest.updatePrimaryEntity)",
    "status": "pass",
    "time": 0.27635812759399,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "update primary entity then get (CG.Order.Test.Api.Cest.OrderItem.GiftWrapEntityCest.updatePrimaryEntityThenGet)"
}{
    "event": "test",
    "suite": "api",
    "test": "update primary entity then get (CG.Order.Test.Api.Cest.OrderItem.GiftWrapEntityCest.updatePrimaryEntityThenGet)",
    "status": "pass",
    "time": 0.24238014221191,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "update primary entity with empty data (CG.Order.Test.Api.Cest.OrderItem.GiftWrapEntityCest.updatePrimaryEntityWithEmptyData)"
}{
    "event": "test",
    "suite": "api",
    "test": "update primary entity with empty data (CG.Order.Test.Api.Cest.OrderItem.GiftWrapEntityCest.updatePrimaryEntityWithEmptyData)",
    "status": "pass",
    "time": 0.3006579875946,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "update primary entity with invalid data (CG.Order.Test.Api.Cest.OrderItem.GiftWrapEntityCest.updatePrimaryEntityWithInvalidData)"
}{
    "event": "test",
    "suite": "api",
    "test": "update primary entity with invalid data (CG.Order.Test.Api.Cest.OrderItem.GiftWrapEntityCest.updatePrimaryEntityWithInvalidData)",
    "status": "pass",
    "time": 0.29464411735535,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "update primary entity with additional fields (CG.Order.Test.Api.Cest.OrderItem.GiftWrapEntityCest.updatePrimaryEntityWithAdditionalFields)"
}{
    "event": "test",
    "suite": "api",
    "test": "update primary entity with additional fields (CG.Order.Test.Api.Cest.OrderItem.GiftWrapEntityCest.updatePrimaryEntityWithAdditionalFields)",
    "status": "pass",
    "time": 0.25354480743408,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check i delete the primary entity (CG.Order.Test.Api.Cest.OrderItem.GiftWrapEntityCest.deletePrimaryEntity)"
}{
    "event": "test",
    "suite": "api",
    "test": "check i delete the primary entity (CG.Order.Test.Api.Cest.OrderItem.GiftWrapEntityCest.deletePrimaryEntity)",
    "status": "pass",
    "time": 0.37514400482178,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check i delete the primary entity (CG.Order.Test.Api.Cest.OrderItem.GiftWrapEntityCest.deletePrimaryEntityWithGet)"
}{
    "event": "test",
    "suite": "api",
    "test": "check i delete the primary entity (CG.Order.Test.Api.Cest.OrderItem.GiftWrapEntityCest.deletePrimaryEntityWithGet)",
    "status": "pass",
    "time": 0.4190309047699,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check i delete the primary entity (CG.Order.Test.Api.Cest.OrderItem.GiftWrapEntityCest.deletePrimaryEntityWithGetCollection)"
}{
    "event": "test",
    "suite": "api",
    "test": "check i delete the primary entity (CG.Order.Test.Api.Cest.OrderItem.GiftWrapEntityCest.deletePrimaryEntityWithGetCollection)",
    "status": "pass",
    "time": 0.40450000762939,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check i can not delete a non existent entity (CG.Order.Test.Api.Cest.OrderItem.GiftWrapEntityCest.deleteNonExistentEntity)"
}{
    "event": "test",
    "suite": "api",
    "test": "check i can not delete a non existent entity (CG.Order.Test.Api.Cest.OrderItem.GiftWrapEntityCest.deleteNonExistentEntity)",
    "status": "pass",
    "time": 0.34897089004517,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check entity embed (CG.Order.Test.Api.Cest.OrderItem.GiftWrapEntityCest.checkEntityEmbed)"
}{
    "event": "test",
    "suite": "api",
    "test": "check entity embed (CG.Order.Test.Api.Cest.OrderItem.GiftWrapEntityCest.checkEntityEmbed)",
    "status": "pass",
    "time": 0.28043723106384,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check children endpoints with wrong parent id (CG.Order.Test.Api.Cest.OrderItem.GiftWrapEntityCest.checkChildrenEndpointsWithWrongParentId)"
}{
    "event": "test",
    "suite": "api",
    "test": "check children endpoints with wrong parent id (CG.Order.Test.Api.Cest.OrderItem.GiftWrapEntityCest.checkChildrenEndpointsWithWrongParentId)",
    "status": "pass",
    "time": 0.27138304710388,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check put children endpoints with wrong parent id (CG.Order.Test.Api.Cest.OrderItem.GiftWrapEntityCest.checkPutChildrenEndpointsWithWrongParentId)"
}{
    "event": "test",
    "suite": "api",
    "test": "check put children endpoints with wrong parent id (CG.Order.Test.Api.Cest.OrderItem.GiftWrapEntityCest.checkPutChildrenEndpointsWithWrongParentId)",
    "status": "pass",
    "time": 0.26460719108582,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "see a resource endpoint contains hal (CG.Order.Test.Api.Cest.OrderItem.GiftWrapEntityCest.viewInHal)"
}{
    "event": "test",
    "suite": "api",
    "test": "see a resource endpoint contains hal (CG.Order.Test.Api.Cest.OrderItem.GiftWrapEntityCest.viewInHal)",
    "status": "pass",
    "time": 0.35713505744934,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check only the allowed methods are allowed (CG.Order.Test.Api.Cest.OrderItem.GiftWrapEntityCest.checkAllowedMethods)"
}{
    "event": "test",
    "suite": "api",
    "test": "check only the allowed methods are allowed (CG.Order.Test.Api.Cest.OrderItem.GiftWrapEntityCest.checkAllowedMethods)",
    "status": "pass",
    "time": 0.41934323310852,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check the up link is set as the parents url (CG.Order.Test.Api.Cest.OrderItem.GiftWrapEntityCest.checkUplink)"
}{
    "event": "test",
    "suite": "api",
    "test": "check the up link is set as the parents url (CG.Order.Test.Api.Cest.OrderItem.GiftWrapEntityCest.checkUplink)",
    "status": "pass",
    "time": 0.36910200119019,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check headers for head request and that body is empty (CG.Order.Test.Api.Cest.OrderItem.GiftWrapEntityCest.checkHeadRequest)"
}{
    "event": "test",
    "suite": "api",
    "test": "check headers for head request and that body is empty (CG.Order.Test.Api.Cest.OrderItem.GiftWrapEntityCest.checkHeadRequest)",
    "status": "pass",
    "time": 0.43819999694824,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "has e tag header (CG.Order.Test.Api.Cest.OrderItem.GiftWrapEntityCest.hasETagHeader)"
}{
    "event": "test",
    "suite": "api",
    "test": "has e tag header (CG.Order.Test.Api.Cest.OrderItem.GiftWrapEntityCest.hasETagHeader)",
    "status": "pass",
    "time": 0.36712098121643,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "get a 304 when i send the etag on a second get request (CG.Order.Test.Api.Cest.OrderItem.GiftWrapEntityCest.sendETagGet304)"
}{
    "event": "test",
    "suite": "api",
    "test": "get a 304 when i send the etag on a second get request (CG.Order.Test.Api.Cest.OrderItem.GiftWrapEntityCest.sendETagGet304)",
    "status": "pass",
    "time": 0.43167901039124,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check that if i send an invalid etag i get the entity (CG.Order.Test.Api.Cest.OrderItem.GiftWrapEntityCest.sendInvalidETagGetNewETag)"
}{
    "event": "test",
    "suite": "api",
    "test": "check that if i send an invalid etag i get the entity (CG.Order.Test.Api.Cest.OrderItem.GiftWrapEntityCest.sendInvalidETagGetNewETag)",
    "status": "pass",
    "time": 0.35222196578979,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "update the primary entity with matching etag (CG.Order.Test.Api.Cest.OrderItem.GiftWrapEntityCest.updateEntityWithETag)"
}{
    "event": "test",
    "suite": "api",
    "test": "update the primary entity with matching etag (CG.Order.Test.Api.Cest.OrderItem.GiftWrapEntityCest.updateEntityWithETag)",
    "status": "pass",
    "time": 0.45397114753723,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "update the primary entity with matching etag then get (CG.Order.Test.Api.Cest.OrderItem.GiftWrapEntityCest.updateEntityWithETagThenGet)"
}{
    "event": "test",
    "suite": "api",
    "test": "update the primary entity with matching etag then get (CG.Order.Test.Api.Cest.OrderItem.GiftWrapEntityCest.updateEntityWithETagThenGet)",
    "status": "pass",
    "time": 3.1900701522827,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "update the primary entity with matching etag and identical data (CG.Order.Test.Api.Cest.OrderItem.GiftWrapEntityCest.updateEntityWithETagAndIdenticalData)"
}{
    "event": "test",
    "suite": "api",
    "test": "update the primary entity with matching etag and identical data (CG.Order.Test.Api.Cest.OrderItem.GiftWrapEntityCest.updateEntityWithETagAndIdenticalData)",
    "status": "pass",
    "time": 0.46079397201538,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check i can't update the primary entity with an invalid etag (CG.Order.Test.Api.Cest.OrderItem.GiftWrapEntityCest.updateEntityWithInvalidETag)"
}{
    "event": "test",
    "suite": "api",
    "test": "check i can't update the primary entity with an invalid etag (CG.Order.Test.Api.Cest.OrderItem.GiftWrapEntityCest.updateEntityWithInvalidETag)",
    "status": "pass",
    "time": 0.37702894210815,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check i can't update the primary entity with an invalid etag and identical data (CG.Order.Test.Api.Cest.OrderItem.GiftWrapEntityCest.updateEntityWithInvalidETagAndIdenticalData)"
}{
    "event": "test",
    "suite": "api",
    "test": "check i can't update the primary entity with an invalid etag and identical data (CG.Order.Test.Api.Cest.OrderItem.GiftWrapEntityCest.updateEntityWithInvalidETagAndIdenticalData)",
    "status": "pass",
    "time": 0.38005995750427,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check getting other entities doesn't cause \"\/orderitem\/1411-11\/giftwrap\/1\"'s etag to change (CG.Order.Test.Api.Cest.OrderItem.GiftWrapEntityCest.checkDuplicateClassNameETagIssue)"
}{
    "event": "test",
    "suite": "api",
    "test": "check getting other entities doesn't cause \"\/orderitem\/1411-11\/giftwrap\/1\"'s etag to change (CG.Order.Test.Api.Cest.OrderItem.GiftWrapEntityCest.checkDuplicateClassNameETagIssue)",
    "status": "pass",
    "time": 2.2923328876495,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "update the primary entity without etag (CG.Order.Test.Api.Cest.OrderItem.GiftWrapEntityCest.updateEntityWithoutEtagShouldFail)"
}{
    "event": "test",
    "suite": "api",
    "test": "update the primary entity without etag (CG.Order.Test.Api.Cest.OrderItem.GiftWrapEntityCest.updateEntityWithoutEtagShouldFail)",
    "status": "pass",
    "time": 0.37616586685181,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "update the primary entity with empty etag (CG.Order.Test.Api.Cest.OrderItem.GiftWrapEntityCest.updateEntityWithEmptyEtagShouldFail)"
}{
    "event": "test",
    "suite": "api",
    "test": "update the primary entity with empty etag (CG.Order.Test.Api.Cest.OrderItem.GiftWrapEntityCest.updateEntityWithEmptyEtagShouldFail)",
    "status": "pass",
    "time": 0.36790585517883,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check put children endpoints with wrong parent idwith e tags (CG.Order.Test.Api.Cest.OrderItem.GiftWrapEntityCest.checkPutChildrenEndpointsWithWrongParentIdwithETags)"
}{
    "event": "test",
    "suite": "api",
    "test": "check put children endpoints with wrong parent idwith e tags (CG.Order.Test.Api.Cest.OrderItem.GiftWrapEntityCest.checkPutChildrenEndpointsWithWrongParentIdwithETags)",
    "status": "pass",
    "time": 0.26040482521057,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "view a collection (CG.Order.Test.Api.Cest.OrderItemCest.viewCollection)"
}{
    "event": "test",
    "suite": "api",
    "test": "view a collection (CG.Order.Test.Api.Cest.OrderItemCest.viewCollection)",
    "status": "pass",
    "time": 0.39494895935059,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "view a collection by page (CG.Order.Test.Api.Cest.OrderItemCest.checkPagination)"
}{
    "event": "test",
    "suite": "api",
    "test": "view a collection by page (CG.Order.Test.Api.Cest.OrderItemCest.checkPagination)",
    "status": "pass",
    "time": 0.6415650844574,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "view a collection by page (CG.Order.Test.Api.Cest.OrderItemCest.checkCollectionCache)"
}{
    "event": "test",
    "suite": "api",
    "test": "view a collection by page (CG.Order.Test.Api.Cest.OrderItemCest.checkCollectionCache)",
    "status": "pass",
    "time": 0.45434880256653,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "has filters (CG.Order.Test.Api.Cest.OrderItemCest.hasFilters)"
}{
    "event": "test",
    "suite": "api",
    "test": "has filters (CG.Order.Test.Api.Cest.OrderItemCest.hasFilters)",
    "status": "pass",
    "time": 0.25324010848999,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check filters (CG.Order.Test.Api.Cest.OrderItemCest.checkFilters)"
}{
    "event": "test",
    "suite": "api",
    "test": "check filters (CG.Order.Test.Api.Cest.OrderItemCest.checkFilters)",
    "status": "pass",
    "time": 0.28407597541809,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check multi filters (CG.Order.Test.Api.Cest.OrderItemCest.checkMultiFilters)"
}{
    "event": "test",
    "suite": "api",
    "test": "check multi filters (CG.Order.Test.Api.Cest.OrderItemCest.checkMultiFilters)",
    "status": "pass",
    "time": 0.26831603050232,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "create entity (CG.Order.Test.Api.Cest.OrderItemCest.createEntity)"
}{
    "event": "test",
    "suite": "api",
    "test": "create entity (CG.Order.Test.Api.Cest.OrderItemCest.createEntity)",
    "status": "pass",
    "time": 0.27688503265381,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "create entity then get (CG.Order.Test.Api.Cest.OrderItemCest.createEntityThenGet)"
}{
    "event": "test",
    "suite": "api",
    "test": "create entity then get (CG.Order.Test.Api.Cest.OrderItemCest.createEntityThenGet)",
    "status": "pass",
    "time": 0.28544211387634,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "create entity then get collection (CG.Order.Test.Api.Cest.OrderItemCest.createEntityThenGetCollection)"
}{
    "event": "test",
    "suite": "api",
    "test": "create entity then get collection (CG.Order.Test.Api.Cest.OrderItemCest.createEntityThenGetCollection)",
    "status": "pass",
    "time": 0.30137610435486,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "create entity then get collection with filters (CG.Order.Test.Api.Cest.OrderItemCest.createEntityThenGetCollectionWithFilters)"
}{
    "event": "test",
    "suite": "api",
    "test": "create entity then get collection with filters (CG.Order.Test.Api.Cest.OrderItemCest.createEntityThenGetCollectionWithFilters)",
    "status": "pass",
    "time": 0.27648305892944,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "create entity put entity then get collection (CG.Order.Test.Api.Cest.OrderItemCest.createEntityPutEntityThenGetCollection)"
}{
    "event": "test",
    "suite": "api",
    "test": "create entity put entity then get collection (CG.Order.Test.Api.Cest.OrderItemCest.createEntityPutEntityThenGetCollection)",
    "status": "pass",
    "time": 0.30061507225037,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "create empty entity (CG.Order.Test.Api.Cest.OrderItemCest.createEmptyEntity)"
}{
    "event": "test",
    "suite": "api",
    "test": "create empty entity (CG.Order.Test.Api.Cest.OrderItemCest.createEmptyEntity)",
    "status": "pass",
    "time": 0.28373193740845,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "create invalid entity (CG.Order.Test.Api.Cest.OrderItemCest.createInvalidEntity)"
}{
    "event": "test",
    "suite": "api",
    "test": "create invalid entity (CG.Order.Test.Api.Cest.OrderItemCest.createInvalidEntity)",
    "status": "pass",
    "time": 0.28828406333923,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "create entity with additional fields (CG.Order.Test.Api.Cest.OrderItemCest.createEntityWithAdditionalFields)"
}{
    "event": "test",
    "suite": "api",
    "test": "create entity with additional fields (CG.Order.Test.Api.Cest.OrderItemCest.createEntityWithAdditionalFields)",
    "status": "pass",
    "time": 0.26480078697205,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "create entity with invalid date range (CG.Order.Test.Api.Cest.OrderItemCest.createEntityWithInvalidDateRange)"
}{
    "event": "test",
    "suite": "api",
    "test": "create entity with invalid date range (CG.Order.Test.Api.Cest.OrderItemCest.createEntityWithInvalidDateRange)",
    "status": "pass",
    "time": 0.26932287216187,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "test single date filter (CG.Order.Test.Api.Cest.OrderItemCest.testSingleDateFilter)"
}{
    "event": "test",
    "suite": "api",
    "test": "test single date filter (CG.Order.Test.Api.Cest.OrderItemCest.testSingleDateFilter)",
    "status": "pass",
    "time": 0.2828848361969,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "test date range filter (CG.Order.Test.Api.Cest.OrderItemCest.testDateRangeFilter)"
}{
    "event": "test",
    "suite": "api",
    "test": "test date range filter (CG.Order.Test.Api.Cest.OrderItemCest.testDateRangeFilter)",
    "status": "pass",
    "time": 0.61723303794861,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "test range filters (CG.Order.Test.Api.Cest.OrderItemCest.testRangeFilters)"
}{
    "event": "test",
    "suite": "api",
    "test": "test range filters (CG.Order.Test.Api.Cest.OrderItemCest.testRangeFilters)",
    "status": "pass",
    "time": 0.26949906349182,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "test array filters dont accept string (CG.Order.Test.Api.Cest.OrderItemCest.testArrayFiltersDontAcceptString)"
}{
    "event": "test",
    "suite": "api",
    "test": "test array filters dont accept string (CG.Order.Test.Api.Cest.OrderItemCest.testArrayFiltersDontAcceptString)",
    "status": "pass",
    "time": 0.29363799095154,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "test string filters dont accept array (CG.Order.Test.Api.Cest.OrderItemCest.testStringFiltersDontAcceptArray)"
}{
    "event": "test",
    "suite": "api",
    "test": "test string filters dont accept array (CG.Order.Test.Api.Cest.OrderItemCest.testStringFiltersDontAcceptArray)",
    "status": "pass",
    "time": 0.27901196479797,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check search term filters (CG.Order.Test.Api.Cest.OrderItemCest.checkSearchTermFilters)"
}{
    "event": "test",
    "suite": "api",
    "test": "check search term filters (CG.Order.Test.Api.Cest.OrderItemCest.checkSearchTermFilters)",
    "status": "pass",
    "time": 0.29724597930908,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "see a resource endpoint contains hal (CG.Order.Test.Api.Cest.OrderItemCest.viewInHal)"
}{
    "event": "test",
    "suite": "api",
    "test": "see a resource endpoint contains hal (CG.Order.Test.Api.Cest.OrderItemCest.viewInHal)",
    "status": "pass",
    "time": 0.39509010314941,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check only the allowed methods are allowed (CG.Order.Test.Api.Cest.OrderItemCest.checkAllowedMethods)"
}{
    "event": "test",
    "suite": "api",
    "test": "check only the allowed methods are allowed (CG.Order.Test.Api.Cest.OrderItemCest.checkAllowedMethods)",
    "status": "pass",
    "time": 0.54263091087341,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check the up link is set as the parents url (CG.Order.Test.Api.Cest.OrderItemCest.checkUplink)"
}{
    "event": "test",
    "suite": "api",
    "test": "check the up link is set as the parents url (CG.Order.Test.Api.Cest.OrderItemCest.checkUplink)",
    "status": "pass",
    "time": 0.37931489944458,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check headers for head request and that body is empty (CG.Order.Test.Api.Cest.OrderItemCest.checkHeadRequest)"
}{
    "event": "test",
    "suite": "api",
    "test": "check headers for head request and that body is empty (CG.Order.Test.Api.Cest.OrderItemCest.checkHeadRequest)",
    "status": "pass",
    "time": 0.49806499481201,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "create entity then get collection multiple times (CG.Order.Test.Api.Cest.OrderItemCest.createEntityThenGetCollectionMultipleTimes)"
}{
    "event": "test",
    "suite": "api",
    "test": "create entity then get collection multiple times (CG.Order.Test.Api.Cest.OrderItemCest.createEntityThenGetCollectionMultipleTimes)",
    "status": "pass",
    "time": 0.23492002487183,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "create entity then get collection multiple times from existing (CG.Order.Test.Api.Cest.OrderItemCest.createEntityThenGetCollectionMultipleTimesFromExisting)"
}{
    "event": "test",
    "suite": "api",
    "test": "create entity then get collection multiple times from existing (CG.Order.Test.Api.Cest.OrderItemCest.createEntityThenGetCollectionMultipleTimesFromExisting)",
    "status": "pass",
    "time": 0.29500317573547,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "view a collection (CG.Order.Test.Api.Cest.OrderItemCest.viewCollectionAll)"
}{
    "event": "test",
    "suite": "api",
    "test": "view a collection (CG.Order.Test.Api.Cest.OrderItemCest.viewCollectionAll)",
    "status": "pass",
    "time": 0.41180992126465,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "view a collection (CG.Order.Test.Api.Cest.OrderItemCest.viewCollectionZeroLimit)"
}{
    "event": "test",
    "suite": "api",
    "test": "view a collection (CG.Order.Test.Api.Cest.OrderItemCest.viewCollectionZeroLimit)",
    "status": "pass",
    "time": 0.33513712882996,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check filters pagination (CG.Order.Test.Api.Cest.OrderItemCest.checkFiltersPagination)"
}{
    "event": "test",
    "suite": "api",
    "test": "check filters pagination (CG.Order.Test.Api.Cest.OrderItemCest.checkFiltersPagination)",
    "status": "pass",
    "time": 0.28044605255127,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "test timestamp filter (CG.Order.Test.Api.Cest.OrderItemCest.testTimestampFilter)"
}{
    "event": "test",
    "suite": "api",
    "test": "test timestamp filter (CG.Order.Test.Api.Cest.OrderItemCest.testTimestampFilter)",
    "status": "pass",
    "time": 0.26724720001221,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "test timestamp range filters (CG.Order.Test.Api.Cest.OrderItemCest.testTimestampRangeFilters)"
}{
    "event": "test",
    "suite": "api",
    "test": "test timestamp range filters (CG.Order.Test.Api.Cest.OrderItemCest.testTimestampRangeFilters)",
    "status": "pass",
    "time": 0.29101204872131,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "view the primary entity (CG.Order.Test.Api.Cest.OrderItemEntityCest.viewPrimaryEntity)"
}{
    "event": "test",
    "suite": "api",
    "test": "view the primary entity (CG.Order.Test.Api.Cest.OrderItemEntityCest.viewPrimaryEntity)",
    "status": "pass",
    "time": 0.41283106803894,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "view the secondary entity (CG.Order.Test.Api.Cest.OrderItemEntityCest.viewSecondaryEntity)"
}{
    "event": "test",
    "suite": "api",
    "test": "view the secondary entity (CG.Order.Test.Api.Cest.OrderItemEntityCest.viewSecondaryEntity)",
    "status": "pass",
    "time": 0.37226605415344,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check i can not view a non existent entity (CG.Order.Test.Api.Cest.OrderItemEntityCest.viewNonExistentEntity)"
}{
    "event": "test",
    "suite": "api",
    "test": "check i can not view a non existent entity (CG.Order.Test.Api.Cest.OrderItemEntityCest.viewNonExistentEntity)",
    "status": "pass",
    "time": 0.35318899154663,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "update primary entity (CG.Order.Test.Api.Cest.OrderItemEntityCest.updatePrimaryEntity)"
}{
    "event": "test",
    "suite": "api",
    "test": "update primary entity (CG.Order.Test.Api.Cest.OrderItemEntityCest.updatePrimaryEntity)",
    "status": "pass",
    "time": 0.26006102561951,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "update primary entity then get (CG.Order.Test.Api.Cest.OrderItemEntityCest.updatePrimaryEntityThenGet)"
}{
    "event": "test",
    "suite": "api",
    "test": "update primary entity then get (CG.Order.Test.Api.Cest.OrderItemEntityCest.updatePrimaryEntityThenGet)",
    "status": "pass",
    "time": 0.2780179977417,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "update primary entity with empty data (CG.Order.Test.Api.Cest.OrderItemEntityCest.updatePrimaryEntityWithEmptyData)"
}{
    "event": "test",
    "suite": "api",
    "test": "update primary entity with empty data (CG.Order.Test.Api.Cest.OrderItemEntityCest.updatePrimaryEntityWithEmptyData)",
    "status": "pass",
    "time": 0.29104280471802,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "update primary entity with invalid data (CG.Order.Test.Api.Cest.OrderItemEntityCest.updatePrimaryEntityWithInvalidData)"
}{
    "event": "test",
    "suite": "api",
    "test": "update primary entity with invalid data (CG.Order.Test.Api.Cest.OrderItemEntityCest.updatePrimaryEntityWithInvalidData)",
    "status": "pass",
    "time": 0.26274394989014,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "update primary entity with additional fields (CG.Order.Test.Api.Cest.OrderItemEntityCest.updatePrimaryEntityWithAdditionalFields)"
}{
    "event": "test",
    "suite": "api",
    "test": "update primary entity with additional fields (CG.Order.Test.Api.Cest.OrderItemEntityCest.updatePrimaryEntityWithAdditionalFields)",
    "status": "pass",
    "time": 0.26011514663696,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check i delete the primary entity (CG.Order.Test.Api.Cest.OrderItemEntityCest.deletePrimaryEntity)"
}{
    "event": "test",
    "suite": "api",
    "test": "check i delete the primary entity (CG.Order.Test.Api.Cest.OrderItemEntityCest.deletePrimaryEntity)",
    "status": "pass",
    "time": 0.40005707740784,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check i delete the primary entity (CG.Order.Test.Api.Cest.OrderItemEntityCest.deletePrimaryEntityWithGet)"
}{
    "event": "test",
    "suite": "api",
    "test": "check i delete the primary entity (CG.Order.Test.Api.Cest.OrderItemEntityCest.deletePrimaryEntityWithGet)",
    "status": "pass",
    "time": 0.44006896018982,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check i delete the primary entity (CG.Order.Test.Api.Cest.OrderItemEntityCest.deletePrimaryEntityWithGetCollection)"
}{
    "event": "test",
    "suite": "api",
    "test": "check i delete the primary entity (CG.Order.Test.Api.Cest.OrderItemEntityCest.deletePrimaryEntityWithGetCollection)",
    "status": "pass",
    "time": 0.47424006462097,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check i can not delete a non existent entity (CG.Order.Test.Api.Cest.OrderItemEntityCest.deleteNonExistentEntity)"
}{
    "event": "test",
    "suite": "api",
    "test": "check i can not delete a non existent entity (CG.Order.Test.Api.Cest.OrderItemEntityCest.deleteNonExistentEntity)",
    "status": "pass",
    "time": 0.36492896080017,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "see that entity contains correct embedded data (CG.Order.Test.Api.Cest.OrderItemEntityCest.checkEntityEmbed)"
}{
    "event": "test",
    "suite": "api",
    "test": "see that entity contains correct embedded data (CG.Order.Test.Api.Cest.OrderItemEntityCest.checkEntityEmbed)",
    "status": "pass",
    "time": 0.47562718391418,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check i can not view an entity with the wrong parent id (CG.Order.Test.Api.Cest.OrderItemEntityCest.checkChildrenEndpointsWithWrongParentId)"
}{
    "event": "test",
    "suite": "api",
    "test": "check i can not view an entity with the wrong parent id (CG.Order.Test.Api.Cest.OrderItemEntityCest.checkChildrenEndpointsWithWrongParentId)",
    "status": "pass",
    "time": 1.2807219028473,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check put children endpoints with wrong parent id (CG.Order.Test.Api.Cest.OrderItemEntityCest.checkPutChildrenEndpointsWithWrongParentId)"
}{
    "event": "test",
    "suite": "api",
    "test": "check put children endpoints with wrong parent id (CG.Order.Test.Api.Cest.OrderItemEntityCest.checkPutChildrenEndpointsWithWrongParentId)",
    "status": "pass",
    "time": 0.27517700195312,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "see a resource endpoint contains hal (CG.Order.Test.Api.Cest.OrderItemEntityCest.viewInHal)"
}{
    "event": "test",
    "suite": "api",
    "test": "see a resource endpoint contains hal (CG.Order.Test.Api.Cest.OrderItemEntityCest.viewInHal)",
    "status": "pass",
    "time": 0.40072298049927,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check only the allowed methods are allowed (CG.Order.Test.Api.Cest.OrderItemEntityCest.checkAllowedMethods)"
}{
    "event": "test",
    "suite": "api",
    "test": "check only the allowed methods are allowed (CG.Order.Test.Api.Cest.OrderItemEntityCest.checkAllowedMethods)",
    "status": "pass",
    "time": 0.39686799049377,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check the up link is set as the parents url (CG.Order.Test.Api.Cest.OrderItemEntityCest.checkUplink)"
}{
    "event": "test",
    "suite": "api",
    "test": "check the up link is set as the parents url (CG.Order.Test.Api.Cest.OrderItemEntityCest.checkUplink)",
    "status": "pass",
    "time": 0.35050010681152,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check headers for head request and that body is empty (CG.Order.Test.Api.Cest.OrderItemEntityCest.checkHeadRequest)"
}{
    "event": "test",
    "suite": "api",
    "test": "check headers for head request and that body is empty (CG.Order.Test.Api.Cest.OrderItemEntityCest.checkHeadRequest)",
    "status": "pass",
    "time": 0.49372100830078,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "has e tag header (CG.Order.Test.Api.Cest.OrderItemEntityCest.hasETagHeader)"
}{
    "event": "test",
    "suite": "api",
    "test": "has e tag header (CG.Order.Test.Api.Cest.OrderItemEntityCest.hasETagHeader)",
    "status": "pass",
    "time": 0.3958261013031,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "get a 304 when i send the etag on a second get request (CG.Order.Test.Api.Cest.OrderItemEntityCest.sendETagGet304)"
}{
    "event": "test",
    "suite": "api",
    "test": "get a 304 when i send the etag on a second get request (CG.Order.Test.Api.Cest.OrderItemEntityCest.sendETagGet304)",
    "status": "pass",
    "time": 0.48042702674866,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check that if i send an invalid etag i get the entity (CG.Order.Test.Api.Cest.OrderItemEntityCest.sendInvalidETagGetNewETag)"
}{
    "event": "test",
    "suite": "api",
    "test": "check that if i send an invalid etag i get the entity (CG.Order.Test.Api.Cest.OrderItemEntityCest.sendInvalidETagGetNewETag)",
    "status": "pass",
    "time": 0.38277912139893,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "update the primary entity with matching etag (CG.Order.Test.Api.Cest.OrderItemEntityCest.updateEntityWithETag)"
}{
    "event": "test",
    "suite": "api",
    "test": "update the primary entity with matching etag (CG.Order.Test.Api.Cest.OrderItemEntityCest.updateEntityWithETag)",
    "status": "pass",
    "time": 0.47963309288025,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "update the primary entity with matching etag then get (CG.Order.Test.Api.Cest.OrderItemEntityCest.updateEntityWithETagThenGet)"
}{
    "event": "test",
    "suite": "api",
    "test": "update the primary entity with matching etag then get (CG.Order.Test.Api.Cest.OrderItemEntityCest.updateEntityWithETagThenGet)",
    "status": "pass",
    "time": 0.58187007904053,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "update the primary entity with matching etag and identical data (CG.Order.Test.Api.Cest.OrderItemEntityCest.updateEntityWithETagAndIdenticalData)"
}{
    "event": "test",
    "suite": "api",
    "test": "update the primary entity with matching etag and identical data (CG.Order.Test.Api.Cest.OrderItemEntityCest.updateEntityWithETagAndIdenticalData)",
    "status": "pass",
    "time": 0.45474195480347,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check i can't update the primary entity with an invalid etag (CG.Order.Test.Api.Cest.OrderItemEntityCest.updateEntityWithInvalidETag)"
}{
    "event": "test",
    "suite": "api",
    "test": "check i can't update the primary entity with an invalid etag (CG.Order.Test.Api.Cest.OrderItemEntityCest.updateEntityWithInvalidETag)",
    "status": "pass",
    "time": 0.40830993652344,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check i can't update the primary entity with an invalid etag and identical data (CG.Order.Test.Api.Cest.OrderItemEntityCest.updateEntityWithInvalidETagAndIdenticalData)"
}{
    "event": "test",
    "suite": "api",
    "test": "check i can't update the primary entity with an invalid etag and identical data (CG.Order.Test.Api.Cest.OrderItemEntityCest.updateEntityWithInvalidETagAndIdenticalData)",
    "status": "pass",
    "time": 0.39599299430847,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check getting other entities doesn't cause \"\/orderitem\/1411-11\"'s etag to change (CG.Order.Test.Api.Cest.OrderItemEntityCest.checkDuplicateClassNameETagIssue)"
}{
    "event": "test",
    "suite": "api",
    "test": "check getting other entities doesn't cause \"\/orderitem\/1411-11\"'s etag to change (CG.Order.Test.Api.Cest.OrderItemEntityCest.checkDuplicateClassNameETagIssue)",
    "status": "pass",
    "time": 2.5993938446045,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "update the primary entity without etag (CG.Order.Test.Api.Cest.OrderItemEntityCest.updateEntityWithoutEtagShouldFail)"
}{
    "event": "test",
    "suite": "api",
    "test": "update the primary entity without etag (CG.Order.Test.Api.Cest.OrderItemEntityCest.updateEntityWithoutEtagShouldFail)",
    "status": "pass",
    "time": 0.39738917350769,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "update the primary entity with empty etag (CG.Order.Test.Api.Cest.OrderItemEntityCest.updateEntityWithEmptyEtagShouldFail)"
}{
    "event": "test",
    "suite": "api",
    "test": "update the primary entity with empty etag (CG.Order.Test.Api.Cest.OrderItemEntityCest.updateEntityWithEmptyEtagShouldFail)",
    "status": "pass",
    "time": 0.38163495063782,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check i can not update an entity with the wrong parent id (CG.Order.Test.Api.Cest.OrderItemEntityCest.checkPutChildrenEndpointsWithWrongParentIdwithETags)"
}{
    "event": "test",
    "suite": "api",
    "test": "check i can not update an entity with the wrong parent id (CG.Order.Test.Api.Cest.OrderItemEntityCest.checkPutChildrenEndpointsWithWrongParentIdwithETags)",
    "status": "fail",
    "time": 1.0601768493652,
    "trace": [
        {
            "file": "\/var\/www\/cg_app\/current\/tests\/api\/ApiGuy.php",
            "line": 222,
            "function": "runStep",
            "class": "Codeception\\Scenario",
            "type": "->",
            "args": [

            ]
        },
        {
            "file": "\/var\/www\/cg_app\/current\/vendor\/channelgrabber\/codeception\/CG\/Codeception\/ApiHelper.php",
            "line": 540,
            "function": "seeResponseCodeIs",
            "class": "ApiGuy",
            "type": "->",
            "args": [
                200
            ]
        },
        {
            "file": "\/var\/www\/cg_app\/current\/tests\/api\/ApiGuy.php",
            "line": 3674,
            "function": "runStep",
            "class": "Codeception\\Scenario",
            "type": "->",
            "args": [

            ]
        },
        {
            "file": "\/var\/www\/cg_app\/current\/vendor\/channelgrabber\/codeception\/CG\/Codeception\/Cest\/Rest\/EntityETagTrait.php",
            "line": 322,
            "function": "urlHasETagHeader",
            "class": "ApiGuy",
            "type": "->",
            "args": [
                {

                },
                "\/orderItem\/1411-11\/fee\/5",
                "CG\\Order\\Test\\Api\\Page\\OrderItemEntityPage"
            ]
        }
    ],
    "message": "Failed asserting that 404 matches expected 200.",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "view a collection (CG.Order.Test.Api.Cest.OrderTagCest.viewCollection)"
}{
    "event": "test",
    "suite": "api",
    "test": "view a collection (CG.Order.Test.Api.Cest.OrderTagCest.viewCollection)",
    "status": "pass",
    "time": 3.7127220630646,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "view a collection by page (CG.Order.Test.Api.Cest.OrderTagCest.checkPagination)"
}{
    "event": "test",
    "suite": "api",
    "test": "view a collection by page (CG.Order.Test.Api.Cest.OrderTagCest.checkPagination)",
    "status": "pass",
    "time": 0.64455604553223,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "view a collection by page (CG.Order.Test.Api.Cest.OrderTagCest.checkCollectionCache)"
}{
    "event": "test",
    "suite": "api",
    "test": "view a collection by page (CG.Order.Test.Api.Cest.OrderTagCest.checkCollectionCache)",
    "status": "pass",
    "time": 0.47227311134338,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "has filters (CG.Order.Test.Api.Cest.OrderTagCest.hasFilters)"
}{
    "event": "test",
    "suite": "api",
    "test": "has filters (CG.Order.Test.Api.Cest.OrderTagCest.hasFilters)",
    "status": "pass",
    "time": 0.2556779384613,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check filters work for this collection (CG.Order.Test.Api.Cest.OrderTagCest.checkFilters)"
}{
    "event": "test",
    "suite": "api",
    "test": "check filters work for this collection (CG.Order.Test.Api.Cest.OrderTagCest.checkFilters)",
    "status": "pass",
    "time": 0.41046690940857,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check filters work for this collection (CG.Order.Test.Api.Cest.OrderTagCest.checkMultiFilters)"
}{
    "event": "test",
    "suite": "api",
    "test": "check filters work for this collection (CG.Order.Test.Api.Cest.OrderTagCest.checkMultiFilters)",
    "status": "pass",
    "time": 0.38208699226379,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "create entity (CG.Order.Test.Api.Cest.OrderTagCest.createEntity)"
}{
    "event": "test",
    "suite": "api",
    "test": "create entity (CG.Order.Test.Api.Cest.OrderTagCest.createEntity)",
    "status": "pass",
    "time": 0.25042605400085,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "create entity then get (CG.Order.Test.Api.Cest.OrderTagCest.createEntityThenGet)"
}{
    "event": "test",
    "suite": "api",
    "test": "create entity then get (CG.Order.Test.Api.Cest.OrderTagCest.createEntityThenGet)",
    "status": "pass",
    "time": 0.24223113059998,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "create entity then get collection (CG.Order.Test.Api.Cest.OrderTagCest.createEntityThenGetCollection)"
}{
    "event": "test",
    "suite": "api",
    "test": "create entity then get collection (CG.Order.Test.Api.Cest.OrderTagCest.createEntityThenGetCollection)",
    "status": "pass",
    "time": 0.27661204338074,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "create entity then get collection with filters (CG.Order.Test.Api.Cest.OrderTagCest.createEntityThenGetCollectionWithFilters)"
}{
    "event": "test",
    "suite": "api",
    "test": "create entity then get collection with filters (CG.Order.Test.Api.Cest.OrderTagCest.createEntityThenGetCollectionWithFilters)",
    "status": "pass",
    "time": 0.26829814910889,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "create entity put entity then get collection (CG.Order.Test.Api.Cest.OrderTagCest.createEntityPutEntityThenGetCollection)"
}{
    "event": "test",
    "suite": "api",
    "test": "create entity put entity then get collection (CG.Order.Test.Api.Cest.OrderTagCest.createEntityPutEntityThenGetCollection)",
    "status": "pass",
    "time": 0.28502893447876,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "create empty entity (CG.Order.Test.Api.Cest.OrderTagCest.createEmptyEntity)"
}{
    "event": "test",
    "suite": "api",
    "test": "create empty entity (CG.Order.Test.Api.Cest.OrderTagCest.createEmptyEntity)",
    "status": "pass",
    "time": 0.27218294143677,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "create invalid entity (CG.Order.Test.Api.Cest.OrderTagCest.createInvalidEntity)"
}{
    "event": "test",
    "suite": "api",
    "test": "create invalid entity (CG.Order.Test.Api.Cest.OrderTagCest.createInvalidEntity)",
    "status": "pass",
    "time": 0.27535700798035,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "create entity with additional fields (CG.Order.Test.Api.Cest.OrderTagCest.createEntityWithAdditionalFields)"
}{
    "event": "test",
    "suite": "api",
    "test": "create entity with additional fields (CG.Order.Test.Api.Cest.OrderTagCest.createEntityWithAdditionalFields)",
    "status": "pass",
    "time": 0.26454186439514,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "create entity with invalid date range (CG.Order.Test.Api.Cest.OrderTagCest.createEntityWithInvalidDateRange)"
}{
    "event": "test",
    "suite": "api",
    "test": "create entity with invalid date range (CG.Order.Test.Api.Cest.OrderTagCest.createEntityWithInvalidDateRange)",
    "status": "pass",
    "time": 0.29563999176025,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "test single date filter (CG.Order.Test.Api.Cest.OrderTagCest.testSingleDateFilter)"
}{
    "event": "test",
    "suite": "api",
    "test": "test single date filter (CG.Order.Test.Api.Cest.OrderTagCest.testSingleDateFilter)",
    "status": "pass",
    "time": 0.26158094406128,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "test date range filter (CG.Order.Test.Api.Cest.OrderTagCest.testDateRangeFilter)"
}{
    "event": "test",
    "suite": "api",
    "test": "test date range filter (CG.Order.Test.Api.Cest.OrderTagCest.testDateRangeFilter)",
    "status": "pass",
    "time": 0.27996182441711,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "test range filters (CG.Order.Test.Api.Cest.OrderTagCest.testRangeFilters)"
}{
    "event": "test",
    "suite": "api",
    "test": "test range filters (CG.Order.Test.Api.Cest.OrderTagCest.testRangeFilters)",
    "status": "pass",
    "time": 0.28906488418579,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "test array filters. (CG.Order.Test.Api.Cest.OrderTagCest.testArrayFiltersDontAcceptString)"
}{
    "event": "test",
    "suite": "api",
    "test": "test array filters. (CG.Order.Test.Api.Cest.OrderTagCest.testArrayFiltersDontAcceptString)",
    "status": "pass",
    "time": 0.40456604957581,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "test string filters dont accept array (CG.Order.Test.Api.Cest.OrderTagCest.testStringFiltersDontAcceptArray)"
}{
    "event": "test",
    "suite": "api",
    "test": "test string filters dont accept array (CG.Order.Test.Api.Cest.OrderTagCest.testStringFiltersDontAcceptArray)",
    "status": "pass",
    "time": 0.27942109107971,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check search term filters (CG.Order.Test.Api.Cest.OrderTagCest.checkSearchTermFilters)"
}{
    "event": "test",
    "suite": "api",
    "test": "check search term filters (CG.Order.Test.Api.Cest.OrderTagCest.checkSearchTermFilters)",
    "status": "pass",
    "time": 0.30106806755066,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "see a resource endpoint contains hal (CG.Order.Test.Api.Cest.OrderTagCest.viewInHal)"
}{
    "event": "test",
    "suite": "api",
    "test": "see a resource endpoint contains hal (CG.Order.Test.Api.Cest.OrderTagCest.viewInHal)",
    "status": "pass",
    "time": 0.34620094299316,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check only the allowed methods are allowed (CG.Order.Test.Api.Cest.OrderTagCest.checkAllowedMethods)"
}{
    "event": "test",
    "suite": "api",
    "test": "check only the allowed methods are allowed (CG.Order.Test.Api.Cest.OrderTagCest.checkAllowedMethods)",
    "status": "pass",
    "time": 0.51748895645142,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check the up link is set as the parents url (CG.Order.Test.Api.Cest.OrderTagCest.checkUplink)"
}{
    "event": "test",
    "suite": "api",
    "test": "check the up link is set as the parents url (CG.Order.Test.Api.Cest.OrderTagCest.checkUplink)",
    "status": "pass",
    "time": 0.36398983001709,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check headers for head request and that body is empty (CG.Order.Test.Api.Cest.OrderTagCest.checkHeadRequest)"
}{
    "event": "test",
    "suite": "api",
    "test": "check headers for head request and that body is empty (CG.Order.Test.Api.Cest.OrderTagCest.checkHeadRequest)",
    "status": "pass",
    "time": 0.42476201057434,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "create entity then get collection multiple times (CG.Order.Test.Api.Cest.OrderTagCest.createEntityThenGetCollectionMultipleTimes)"
}{
    "event": "test",
    "suite": "api",
    "test": "create entity then get collection multiple times (CG.Order.Test.Api.Cest.OrderTagCest.createEntityThenGetCollectionMultipleTimes)",
    "status": "pass",
    "time": 0.27923679351807,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "create entity then get collection multiple times from existing (CG.Order.Test.Api.Cest.OrderTagCest.createEntityThenGetCollectionMultipleTimesFromExisting)"
}{
    "event": "test",
    "suite": "api",
    "test": "create entity then get collection multiple times from existing (CG.Order.Test.Api.Cest.OrderTagCest.createEntityThenGetCollectionMultipleTimesFromExisting)",
    "status": "pass",
    "time": 0.28528094291687,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "view a collection (CG.Order.Test.Api.Cest.OrderTagCest.viewCollectionAll)"
}{
    "event": "test",
    "suite": "api",
    "test": "view a collection (CG.Order.Test.Api.Cest.OrderTagCest.viewCollectionAll)",
    "status": "pass",
    "time": 0.37651896476746,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "view a collection (CG.Order.Test.Api.Cest.OrderTagCest.viewCollectionZeroLimit)"
}{
    "event": "test",
    "suite": "api",
    "test": "view a collection (CG.Order.Test.Api.Cest.OrderTagCest.viewCollectionZeroLimit)",
    "status": "pass",
    "time": 0.35453796386719,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check filters work for this collection with pagination (CG.Order.Test.Api.Cest.OrderTagCest.checkFiltersPagination)"
}{
    "event": "test",
    "suite": "api",
    "test": "check filters work for this collection with pagination (CG.Order.Test.Api.Cest.OrderTagCest.checkFiltersPagination)",
    "status": "pass",
    "time": 0.41114211082458,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "test timestamp filter (CG.Order.Test.Api.Cest.OrderTagCest.testTimestampFilter)"
}{
    "event": "test",
    "suite": "api",
    "test": "test timestamp filter (CG.Order.Test.Api.Cest.OrderTagCest.testTimestampFilter)",
    "status": "pass",
    "time": 0.27822113037109,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "test timestamp range filters (CG.Order.Test.Api.Cest.OrderTagCest.testTimestampRangeFilters)"
}{
    "event": "test",
    "suite": "api",
    "test": "test timestamp range filters (CG.Order.Test.Api.Cest.OrderTagCest.testTimestampRangeFilters)",
    "status": "pass",
    "time": 0.28721809387207,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "get page class (CG.Order.Test.Api.Cest.OrderTagEntityCest.getPageClass)"
}{
    "event": "test",
    "suite": "api",
    "test": "get page class (CG.Order.Test.Api.Cest.OrderTagEntityCest.getPageClass)",
    "status": "pass",
    "time": 0.27817606925964,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "view the primary entity (CG.Order.Test.Api.Cest.OrderTagEntityCest.viewPrimaryEntity)"
}{
    "event": "test",
    "suite": "api",
    "test": "view the primary entity (CG.Order.Test.Api.Cest.OrderTagEntityCest.viewPrimaryEntity)",
    "status": "pass",
    "time": 0.36004710197449,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "view the secondary entity (CG.Order.Test.Api.Cest.OrderTagEntityCest.viewSecondaryEntity)"
}{
    "event": "test",
    "suite": "api",
    "test": "view the secondary entity (CG.Order.Test.Api.Cest.OrderTagEntityCest.viewSecondaryEntity)",
    "status": "pass",
    "time": 0.37056994438171,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check i can not view a non existent entity (CG.Order.Test.Api.Cest.OrderTagEntityCest.viewNonExistentEntity)"
}{
    "event": "test",
    "suite": "api",
    "test": "check i can not view a non existent entity (CG.Order.Test.Api.Cest.OrderTagEntityCest.viewNonExistentEntity)",
    "status": "pass",
    "time": 0.39051699638367,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "update primary entity (CG.Order.Test.Api.Cest.OrderTagEntityCest.updatePrimaryEntity)"
}{
    "event": "test",
    "suite": "api",
    "test": "update primary entity (CG.Order.Test.Api.Cest.OrderTagEntityCest.updatePrimaryEntity)",
    "status": "pass",
    "time": 0.26262497901917,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "update primary entity then get (CG.Order.Test.Api.Cest.OrderTagEntityCest.updatePrimaryEntityThenGet)"
}{
    "event": "test",
    "suite": "api",
    "test": "update primary entity then get (CG.Order.Test.Api.Cest.OrderTagEntityCest.updatePrimaryEntityThenGet)",
    "status": "pass",
    "time": 0.27638912200928,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "update primary entity with empty data (CG.Order.Test.Api.Cest.OrderTagEntityCest.updatePrimaryEntityWithEmptyData)"
}{
    "event": "test",
    "suite": "api",
    "test": "update primary entity with empty data (CG.Order.Test.Api.Cest.OrderTagEntityCest.updatePrimaryEntityWithEmptyData)",
    "status": "pass",
    "time": 0.30232286453247,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "update primary entity with invalid data (CG.Order.Test.Api.Cest.OrderTagEntityCest.updatePrimaryEntityWithInvalidData)"
}{
    "event": "test",
    "suite": "api",
    "test": "update primary entity with invalid data (CG.Order.Test.Api.Cest.OrderTagEntityCest.updatePrimaryEntityWithInvalidData)",
    "status": "pass",
    "time": 0.24973511695862,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "update primary entity with additional fields (CG.Order.Test.Api.Cest.OrderTagEntityCest.updatePrimaryEntityWithAdditionalFields)"
}{
    "event": "test",
    "suite": "api",
    "test": "update primary entity with additional fields (CG.Order.Test.Api.Cest.OrderTagEntityCest.updatePrimaryEntityWithAdditionalFields)",
    "status": "pass",
    "time": 0.24560594558716,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check i delete the primary entity (CG.Order.Test.Api.Cest.OrderTagEntityCest.deletePrimaryEntity)"
}{
    "event": "test",
    "suite": "api",
    "test": "check i delete the primary entity (CG.Order.Test.Api.Cest.OrderTagEntityCest.deletePrimaryEntity)",
    "status": "pass",
    "time": 0.38892912864685,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check i delete the primary entity (CG.Order.Test.Api.Cest.OrderTagEntityCest.deletePrimaryEntityWithGet)"
}{
    "event": "test",
    "suite": "api",
    "test": "check i delete the primary entity (CG.Order.Test.Api.Cest.OrderTagEntityCest.deletePrimaryEntityWithGet)",
    "status": "pass",
    "time": 0.42858719825745,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check i delete the primary entity (CG.Order.Test.Api.Cest.OrderTagEntityCest.deletePrimaryEntityWithGetCollection)"
}{
    "event": "test",
    "suite": "api",
    "test": "check i delete the primary entity (CG.Order.Test.Api.Cest.OrderTagEntityCest.deletePrimaryEntityWithGetCollection)",
    "status": "pass",
    "time": 0.43410110473633,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check i can not delete a non existent entity (CG.Order.Test.Api.Cest.OrderTagEntityCest.deleteNonExistentEntity)"
}{
    "event": "test",
    "suite": "api",
    "test": "check i can not delete a non existent entity (CG.Order.Test.Api.Cest.OrderTagEntityCest.deleteNonExistentEntity)",
    "status": "pass",
    "time": 0.33303689956665,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check entity embed (CG.Order.Test.Api.Cest.OrderTagEntityCest.checkEntityEmbed)"
}{
    "event": "test",
    "suite": "api",
    "test": "check entity embed (CG.Order.Test.Api.Cest.OrderTagEntityCest.checkEntityEmbed)",
    "status": "pass",
    "time": 0.26529216766357,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check children endpoints with wrong parent id (CG.Order.Test.Api.Cest.OrderTagEntityCest.checkChildrenEndpointsWithWrongParentId)"
}{
    "event": "test",
    "suite": "api",
    "test": "check children endpoints with wrong parent id (CG.Order.Test.Api.Cest.OrderTagEntityCest.checkChildrenEndpointsWithWrongParentId)",
    "status": "pass",
    "time": 0.26386904716492,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check put children endpoints with wrong parent id (CG.Order.Test.Api.Cest.OrderTagEntityCest.checkPutChildrenEndpointsWithWrongParentId)"
}{
    "event": "test",
    "suite": "api",
    "test": "check put children endpoints with wrong parent id (CG.Order.Test.Api.Cest.OrderTagEntityCest.checkPutChildrenEndpointsWithWrongParentId)",
    "status": "pass",
    "time": 0.26860189437866,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "see a resource endpoint contains hal (CG.Order.Test.Api.Cest.OrderTagEntityCest.viewInHal)"
}{
    "event": "test",
    "suite": "api",
    "test": "see a resource endpoint contains hal (CG.Order.Test.Api.Cest.OrderTagEntityCest.viewInHal)",
    "status": "pass",
    "time": 0.41359496116638,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check only the allowed methods are allowed (CG.Order.Test.Api.Cest.OrderTagEntityCest.checkAllowedMethods)"
}{
    "event": "test",
    "suite": "api",
    "test": "check only the allowed methods are allowed (CG.Order.Test.Api.Cest.OrderTagEntityCest.checkAllowedMethods)",
    "status": "pass",
    "time": 0.3894350528717,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check the up link is set as the parents url (CG.Order.Test.Api.Cest.OrderTagEntityCest.checkUplink)"
}{
    "event": "test",
    "suite": "api",
    "test": "check the up link is set as the parents url (CG.Order.Test.Api.Cest.OrderTagEntityCest.checkUplink)",
    "status": "pass",
    "time": 0.35394501686096,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check headers for head request and that body is empty (CG.Order.Test.Api.Cest.OrderTagEntityCest.checkHeadRequest)"
}{
    "event": "test",
    "suite": "api",
    "test": "check headers for head request and that body is empty (CG.Order.Test.Api.Cest.OrderTagEntityCest.checkHeadRequest)",
    "status": "pass",
    "time": 0.42067408561707,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "view the \/ endpoints (CG.Order.Test.Api.Cest.RootCest.viewEndpoints)"
}{
    "event": "test",
    "suite": "api",
    "test": "view the \/ endpoints (CG.Order.Test.Api.Cest.RootCest.viewEndpoints)",
    "status": "pass",
    "time": 0.34589695930481,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "see a resource endpoint contains hal (CG.Order.Test.Api.Cest.RootCest.viewInHal)"
}{
    "event": "test",
    "suite": "api",
    "test": "see a resource endpoint contains hal (CG.Order.Test.Api.Cest.RootCest.viewInHal)",
    "status": "pass",
    "time": 0.35967707633972,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check only the allowed methods are allowed (CG.Order.Test.Api.Cest.RootCest.checkAllowedMethods)"
}{
    "event": "test",
    "suite": "api",
    "test": "check only the allowed methods are allowed (CG.Order.Test.Api.Cest.RootCest.checkAllowedMethods)",
    "status": "pass",
    "time": 0.4982168674469,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check uplink (CG.Order.Test.Api.Cest.RootCest.checkUplink)"
}{
    "event": "test",
    "suite": "api",
    "test": "check uplink (CG.Order.Test.Api.Cest.RootCest.checkUplink)",
    "status": "pass",
    "time": 0.25890898704529,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check headers for head request and that body is empty (CG.Order.Test.Api.Cest.RootCest.checkHeadRequest)"
}{
    "event": "test",
    "suite": "api",
    "test": "check headers for head request and that body is empty (CG.Order.Test.Api.Cest.RootCest.checkHeadRequest)",
    "status": "pass",
    "time": 0.39910793304443,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "view a collection (CG.Order.Test.Api.Cest.TemplateCest.viewCollection)"
}{
    "event": "test",
    "suite": "api",
    "test": "view a collection (CG.Order.Test.Api.Cest.TemplateCest.viewCollection)",
    "status": "pass",
    "time": 0.36719584465027,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "view a collection by page (CG.Order.Test.Api.Cest.TemplateCest.checkPagination)"
}{
    "event": "test",
    "suite": "api",
    "test": "view a collection by page (CG.Order.Test.Api.Cest.TemplateCest.checkPagination)",
    "status": "pass",
    "time": 0.67578315734863,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "view a collection by page (CG.Order.Test.Api.Cest.TemplateCest.checkCollectionCache)"
}{
    "event": "test",
    "suite": "api",
    "test": "view a collection by page (CG.Order.Test.Api.Cest.TemplateCest.checkCollectionCache)",
    "status": "pass",
    "time": 0.45567607879639,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "has filters (CG.Order.Test.Api.Cest.TemplateCest.hasFilters)"
}{
    "event": "test",
    "suite": "api",
    "test": "has filters (CG.Order.Test.Api.Cest.TemplateCest.hasFilters)",
    "status": "pass",
    "time": 0.29109716415405,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check filters work for this collection (CG.Order.Test.Api.Cest.TemplateCest.checkFilters)"
}{
    "event": "test",
    "suite": "api",
    "test": "check filters work for this collection (CG.Order.Test.Api.Cest.TemplateCest.checkFilters)",
    "status": "pass",
    "time": 0.37748217582703,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check filters work for this collection (CG.Order.Test.Api.Cest.TemplateCest.checkMultiFilters)"
}{
    "event": "test",
    "suite": "api",
    "test": "check filters work for this collection (CG.Order.Test.Api.Cest.TemplateCest.checkMultiFilters)",
    "status": "pass",
    "time": 0.36642694473267,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "create entity (CG.Order.Test.Api.Cest.TemplateCest.createEntity)"
}{
    "event": "test",
    "suite": "api",
    "test": "create entity (CG.Order.Test.Api.Cest.TemplateCest.createEntity)",
    "status": "pass",
    "time": 0.27821207046509,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "create entity then get (CG.Order.Test.Api.Cest.TemplateCest.createEntityThenGet)"
}{
    "event": "test",
    "suite": "api",
    "test": "create entity then get (CG.Order.Test.Api.Cest.TemplateCest.createEntityThenGet)",
    "status": "pass",
    "time": 0.2653751373291,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "create a new entity (CG.Order.Test.Api.Cest.TemplateCest.createEntityThenGetCollection)"
}{
    "event": "test",
    "suite": "api",
    "test": "create a new entity (CG.Order.Test.Api.Cest.TemplateCest.createEntityThenGetCollection)",
    "status": "pass",
    "time": 0.50181198120117,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "create a new entity (CG.Order.Test.Api.Cest.TemplateCest.createEntityThenGetCollectionWithFilters)"
}{
    "event": "test",
    "suite": "api",
    "test": "create a new entity (CG.Order.Test.Api.Cest.TemplateCest.createEntityThenGetCollectionWithFilters)",
    "status": "pass",
    "time": 0.70966792106628,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "create entity put entity then get collection (CG.Order.Test.Api.Cest.TemplateCest.createEntityPutEntityThenGetCollection)"
}{
    "event": "test",
    "suite": "api",
    "test": "create entity put entity then get collection (CG.Order.Test.Api.Cest.TemplateCest.createEntityPutEntityThenGetCollection)",
    "status": "pass",
    "time": 0.25516796112061,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check i can not create a entity with empty data (CG.Order.Test.Api.Cest.TemplateCest.createEmptyEntity)"
}{
    "event": "test",
    "suite": "api",
    "test": "check i can not create a entity with empty data (CG.Order.Test.Api.Cest.TemplateCest.createEmptyEntity)",
    "status": "pass",
    "time": 0.39403796195984,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check i can not create a entity with invalid data (CG.Order.Test.Api.Cest.TemplateCest.createInvalidEntity)"
}{
    "event": "test",
    "suite": "api",
    "test": "check i can not create a entity with invalid data (CG.Order.Test.Api.Cest.TemplateCest.createInvalidEntity)",
    "status": "pass",
    "time": 0.34520196914673,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check i can not create a new entity if i send additional fields (CG.Order.Test.Api.Cest.TemplateCest.createEntityWithAdditionalFields)"
}{
    "event": "test",
    "suite": "api",
    "test": "check i can not create a new entity if i send additional fields (CG.Order.Test.Api.Cest.TemplateCest.createEntityWithAdditionalFields)",
    "status": "pass",
    "time": 0.36826205253601,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "create entity with invalid date range (CG.Order.Test.Api.Cest.TemplateCest.createEntityWithInvalidDateRange)"
}{
    "event": "test",
    "suite": "api",
    "test": "create entity with invalid date range (CG.Order.Test.Api.Cest.TemplateCest.createEntityWithInvalidDateRange)",
    "status": "pass",
    "time": 0.27338290214539,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "test single date filter (CG.Order.Test.Api.Cest.TemplateCest.testSingleDateFilter)"
}{
    "event": "test",
    "suite": "api",
    "test": "test single date filter (CG.Order.Test.Api.Cest.TemplateCest.testSingleDateFilter)",
    "status": "pass",
    "time": 0.29864192008972,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "test date range filter (CG.Order.Test.Api.Cest.TemplateCest.testDateRangeFilter)"
}{
    "event": "test",
    "suite": "api",
    "test": "test date range filter (CG.Order.Test.Api.Cest.TemplateCest.testDateRangeFilter)",
    "status": "pass",
    "time": 0.28835391998291,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "test range filters (CG.Order.Test.Api.Cest.TemplateCest.testRangeFilters)"
}{
    "event": "test",
    "suite": "api",
    "test": "test range filters (CG.Order.Test.Api.Cest.TemplateCest.testRangeFilters)",
    "status": "pass",
    "time": 0.25637888908386,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "test array filters. (CG.Order.Test.Api.Cest.TemplateCest.testArrayFiltersDontAcceptString)"
}{
    "event": "test",
    "suite": "api",
    "test": "test array filters. (CG.Order.Test.Api.Cest.TemplateCest.testArrayFiltersDontAcceptString)",
    "status": "pass",
    "time": 0.5087890625,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "test string filters dont accept array (CG.Order.Test.Api.Cest.TemplateCest.testStringFiltersDontAcceptArray)"
}{
    "event": "test",
    "suite": "api",
    "test": "test string filters dont accept array (CG.Order.Test.Api.Cest.TemplateCest.testStringFiltersDontAcceptArray)",
    "status": "pass",
    "time": 0.25902009010315,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check search term filters (CG.Order.Test.Api.Cest.TemplateCest.checkSearchTermFilters)"
}{
    "event": "test",
    "suite": "api",
    "test": "check search term filters (CG.Order.Test.Api.Cest.TemplateCest.checkSearchTermFilters)",
    "status": "pass",
    "time": 0.27495002746582,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "see a resource endpoint contains hal (CG.Order.Test.Api.Cest.TemplateCest.viewInHal)"
}{
    "event": "test",
    "suite": "api",
    "test": "see a resource endpoint contains hal (CG.Order.Test.Api.Cest.TemplateCest.viewInHal)",
    "status": "pass",
    "time": 0.41147994995117,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check only the allowed methods are allowed (CG.Order.Test.Api.Cest.TemplateCest.checkAllowedMethods)"
}{
    "event": "test",
    "suite": "api",
    "test": "check only the allowed methods are allowed (CG.Order.Test.Api.Cest.TemplateCest.checkAllowedMethods)",
    "status": "pass",
    "time": 0.49017810821533,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check the up link is set as the parents url (CG.Order.Test.Api.Cest.TemplateCest.checkUplink)"
}{
    "event": "test",
    "suite": "api",
    "test": "check the up link is set as the parents url (CG.Order.Test.Api.Cest.TemplateCest.checkUplink)",
    "status": "pass",
    "time": 0.38725209236145,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check headers for head request and that body is empty (CG.Order.Test.Api.Cest.TemplateCest.checkHeadRequest)"
}{
    "event": "test",
    "suite": "api",
    "test": "check headers for head request and that body is empty (CG.Order.Test.Api.Cest.TemplateCest.checkHeadRequest)",
    "status": "pass",
    "time": 0.46560597419739,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "create entity then get collection multiple times (CG.Order.Test.Api.Cest.TemplateCest.createEntityThenGetCollectionMultipleTimes)"
}{
    "event": "test",
    "suite": "api",
    "test": "create entity then get collection multiple times (CG.Order.Test.Api.Cest.TemplateCest.createEntityThenGetCollectionMultipleTimes)",
    "status": "pass",
    "time": 0.23743891716003,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "create entity then get collection multiple times from existing (CG.Order.Test.Api.Cest.TemplateCest.createEntityThenGetCollectionMultipleTimesFromExisting)"
}{
    "event": "test",
    "suite": "api",
    "test": "create entity then get collection multiple times from existing (CG.Order.Test.Api.Cest.TemplateCest.createEntityThenGetCollectionMultipleTimesFromExisting)",
    "status": "pass",
    "time": 0.27595710754395,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "view a collection (CG.Order.Test.Api.Cest.TemplateCest.viewCollectionAll)"
}{
    "event": "test",
    "suite": "api",
    "test": "view a collection (CG.Order.Test.Api.Cest.TemplateCest.viewCollectionAll)",
    "status": "pass",
    "time": 0.38097786903381,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "view a collection (CG.Order.Test.Api.Cest.TemplateCest.viewCollectionZeroLimit)"
}{
    "event": "test",
    "suite": "api",
    "test": "view a collection (CG.Order.Test.Api.Cest.TemplateCest.viewCollectionZeroLimit)",
    "status": "pass",
    "time": 0.34360504150391,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check filters work for this collection with pagination (CG.Order.Test.Api.Cest.TemplateCest.checkFiltersPagination)"
}{
    "event": "test",
    "suite": "api",
    "test": "check filters work for this collection with pagination (CG.Order.Test.Api.Cest.TemplateCest.checkFiltersPagination)",
    "status": "pass",
    "time": 0.42375683784485,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "test timestamp filter (CG.Order.Test.Api.Cest.TemplateCest.testTimestampFilter)"
}{
    "event": "test",
    "suite": "api",
    "test": "test timestamp filter (CG.Order.Test.Api.Cest.TemplateCest.testTimestampFilter)",
    "status": "pass",
    "time": 0.23781704902649,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "test timestamp range filters (CG.Order.Test.Api.Cest.TemplateCest.testTimestampRangeFilters)"
}{
    "event": "test",
    "suite": "api",
    "test": "test timestamp range filters (CG.Order.Test.Api.Cest.TemplateCest.testTimestampRangeFilters)",
    "status": "pass",
    "time": 0.29397320747375,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "view the primary entity (CG.Order.Test.Api.Cest.TemplateEntityCest.viewPrimaryEntity)"
}{
    "event": "test",
    "suite": "api",
    "test": "view the primary entity (CG.Order.Test.Api.Cest.TemplateEntityCest.viewPrimaryEntity)",
    "status": "pass",
    "time": 2.8205180168152,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "view the secondary entity (CG.Order.Test.Api.Cest.TemplateEntityCest.viewSecondaryEntity)"
}{
    "event": "test",
    "suite": "api",
    "test": "view the secondary entity (CG.Order.Test.Api.Cest.TemplateEntityCest.viewSecondaryEntity)",
    "status": "pass",
    "time": 0.32196879386902,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check i can not view a non existent entity (CG.Order.Test.Api.Cest.TemplateEntityCest.viewNonExistentEntity)"
}{
    "event": "test",
    "suite": "api",
    "test": "check i can not view a non existent entity (CG.Order.Test.Api.Cest.TemplateEntityCest.viewNonExistentEntity)",
    "status": "pass",
    "time": 0.33863306045532,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "update primary entity (CG.Order.Test.Api.Cest.TemplateEntityCest.updatePrimaryEntity)"
}{
    "event": "test",
    "suite": "api",
    "test": "update primary entity (CG.Order.Test.Api.Cest.TemplateEntityCest.updatePrimaryEntity)",
    "status": "pass",
    "time": 0.28195095062256,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "update primary entity then get (CG.Order.Test.Api.Cest.TemplateEntityCest.updatePrimaryEntityThenGet)"
}{
    "event": "test",
    "suite": "api",
    "test": "update primary entity then get (CG.Order.Test.Api.Cest.TemplateEntityCest.updatePrimaryEntityThenGet)",
    "status": "pass",
    "time": 0.2643678188324,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "update primary entity with empty data (CG.Order.Test.Api.Cest.TemplateEntityCest.updatePrimaryEntityWithEmptyData)"
}{
    "event": "test",
    "suite": "api",
    "test": "update primary entity with empty data (CG.Order.Test.Api.Cest.TemplateEntityCest.updatePrimaryEntityWithEmptyData)",
    "status": "pass",
    "time": 0.29111099243164,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "update primary entity with invalid data (CG.Order.Test.Api.Cest.TemplateEntityCest.updatePrimaryEntityWithInvalidData)"
}{
    "event": "test",
    "suite": "api",
    "test": "update primary entity with invalid data (CG.Order.Test.Api.Cest.TemplateEntityCest.updatePrimaryEntityWithInvalidData)",
    "status": "pass",
    "time": 0.29231691360474,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "update primary entity with additional fields (CG.Order.Test.Api.Cest.TemplateEntityCest.updatePrimaryEntityWithAdditionalFields)"
}{
    "event": "test",
    "suite": "api",
    "test": "update primary entity with additional fields (CG.Order.Test.Api.Cest.TemplateEntityCest.updatePrimaryEntityWithAdditionalFields)",
    "status": "pass",
    "time": 0.23932409286499,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check i delete the primary entity (CG.Order.Test.Api.Cest.TemplateEntityCest.deletePrimaryEntity)"
}{
    "event": "test",
    "suite": "api",
    "test": "check i delete the primary entity (CG.Order.Test.Api.Cest.TemplateEntityCest.deletePrimaryEntity)",
    "status": "pass",
    "time": 0.37094283103943,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check i delete the primary entity (CG.Order.Test.Api.Cest.TemplateEntityCest.deletePrimaryEntityWithGet)"
}{
    "event": "test",
    "suite": "api",
    "test": "check i delete the primary entity (CG.Order.Test.Api.Cest.TemplateEntityCest.deletePrimaryEntityWithGet)",
    "status": "pass",
    "time": 0.45572113990784,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check i delete the primary entity (CG.Order.Test.Api.Cest.TemplateEntityCest.deletePrimaryEntityWithGetCollection)"
}{
    "event": "test",
    "suite": "api",
    "test": "check i delete the primary entity (CG.Order.Test.Api.Cest.TemplateEntityCest.deletePrimaryEntityWithGetCollection)",
    "status": "pass",
    "time": 0.45153498649597,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check i can not delete a non existent entity (CG.Order.Test.Api.Cest.TemplateEntityCest.deleteNonExistentEntity)"
}{
    "event": "test",
    "suite": "api",
    "test": "check i can not delete a non existent entity (CG.Order.Test.Api.Cest.TemplateEntityCest.deleteNonExistentEntity)",
    "status": "pass",
    "time": 0.31429004669189,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check entity embed (CG.Order.Test.Api.Cest.TemplateEntityCest.checkEntityEmbed)"
}{
    "event": "test",
    "suite": "api",
    "test": "check entity embed (CG.Order.Test.Api.Cest.TemplateEntityCest.checkEntityEmbed)",
    "status": "pass",
    "time": 0.28937196731567,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check children endpoints with wrong parent id (CG.Order.Test.Api.Cest.TemplateEntityCest.checkChildrenEndpointsWithWrongParentId)"
}{
    "event": "test",
    "suite": "api",
    "test": "check children endpoints with wrong parent id (CG.Order.Test.Api.Cest.TemplateEntityCest.checkChildrenEndpointsWithWrongParentId)",
    "status": "pass",
    "time": 0.28206706047058,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check put children endpoints with wrong parent id (CG.Order.Test.Api.Cest.TemplateEntityCest.checkPutChildrenEndpointsWithWrongParentId)"
}{
    "event": "test",
    "suite": "api",
    "test": "check put children endpoints with wrong parent id (CG.Order.Test.Api.Cest.TemplateEntityCest.checkPutChildrenEndpointsWithWrongParentId)",
    "status": "pass",
    "time": 0.25905799865723,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "see a resource endpoint contains hal (CG.Order.Test.Api.Cest.TemplateEntityCest.viewInHal)"
}{
    "event": "test",
    "suite": "api",
    "test": "see a resource endpoint contains hal (CG.Order.Test.Api.Cest.TemplateEntityCest.viewInHal)",
    "status": "pass",
    "time": 0.35286092758179,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check only the allowed methods are allowed (CG.Order.Test.Api.Cest.TemplateEntityCest.checkAllowedMethods)"
}{
    "event": "test",
    "suite": "api",
    "test": "check only the allowed methods are allowed (CG.Order.Test.Api.Cest.TemplateEntityCest.checkAllowedMethods)",
    "status": "pass",
    "time": 0.4069619178772,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check the up link is set as the parents url (CG.Order.Test.Api.Cest.TemplateEntityCest.checkUplink)"
}{
    "event": "test",
    "suite": "api",
    "test": "check the up link is set as the parents url (CG.Order.Test.Api.Cest.TemplateEntityCest.checkUplink)",
    "status": "pass",
    "time": 0.36708688735962,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check headers for head request and that body is empty (CG.Order.Test.Api.Cest.TemplateEntityCest.checkHeadRequest)"
}{
    "event": "test",
    "suite": "api",
    "test": "check headers for head request and that body is empty (CG.Order.Test.Api.Cest.TemplateEntityCest.checkHeadRequest)",
    "status": "pass",
    "time": 0.42420482635498,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "has e tag header (CG.Order.Test.Api.Cest.TemplateEntityCest.hasETagHeader)"
}{
    "event": "test",
    "suite": "api",
    "test": "has e tag header (CG.Order.Test.Api.Cest.TemplateEntityCest.hasETagHeader)",
    "status": "pass",
    "time": 0.36520409584045,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "get a 304 when i send the etag on a second get request (CG.Order.Test.Api.Cest.TemplateEntityCest.sendETagGet304)"
}{
    "event": "test",
    "suite": "api",
    "test": "get a 304 when i send the etag on a second get request (CG.Order.Test.Api.Cest.TemplateEntityCest.sendETagGet304)",
    "status": "pass",
    "time": 0.42808699607849,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check that if i send an invalid etag i get the entity (CG.Order.Test.Api.Cest.TemplateEntityCest.sendInvalidETagGetNewETag)"
}{
    "event": "test",
    "suite": "api",
    "test": "check that if i send an invalid etag i get the entity (CG.Order.Test.Api.Cest.TemplateEntityCest.sendInvalidETagGetNewETag)",
    "status": "pass",
    "time": 0.33498287200928,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "update the primary entity with matching etag (CG.Order.Test.Api.Cest.TemplateEntityCest.updateEntityWithETag)"
}{
    "event": "test",
    "suite": "api",
    "test": "update the primary entity with matching etag (CG.Order.Test.Api.Cest.TemplateEntityCest.updateEntityWithETag)",
    "status": "pass",
    "time": 0.47104096412659,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "update the primary entity with matching etag then get (CG.Order.Test.Api.Cest.TemplateEntityCest.updateEntityWithETagThenGet)"
}{
    "event": "test",
    "suite": "api",
    "test": "update the primary entity with matching etag then get (CG.Order.Test.Api.Cest.TemplateEntityCest.updateEntityWithETagThenGet)",
    "status": "pass",
    "time": 0.49482703208923,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "update the primary entity with matching etag and identical data (CG.Order.Test.Api.Cest.TemplateEntityCest.updateEntityWithETagAndIdenticalData)"
}{
    "event": "test",
    "suite": "api",
    "test": "update the primary entity with matching etag and identical data (CG.Order.Test.Api.Cest.TemplateEntityCest.updateEntityWithETagAndIdenticalData)",
    "status": "pass",
    "time": 0.46217799186707,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check i can't update the primary entity with an invalid etag (CG.Order.Test.Api.Cest.TemplateEntityCest.updateEntityWithInvalidETag)"
}{
    "event": "test",
    "suite": "api",
    "test": "check i can't update the primary entity with an invalid etag (CG.Order.Test.Api.Cest.TemplateEntityCest.updateEntityWithInvalidETag)",
    "status": "pass",
    "time": 0.36201500892639,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check i can't update the primary entity with an invalid etag and identical data (CG.Order.Test.Api.Cest.TemplateEntityCest.updateEntityWithInvalidETagAndIdenticalData)"
}{
    "event": "test",
    "suite": "api",
    "test": "check i can't update the primary entity with an invalid etag and identical data (CG.Order.Test.Api.Cest.TemplateEntityCest.updateEntityWithInvalidETagAndIdenticalData)",
    "status": "pass",
    "time": 0.35764193534851,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check getting other entities doesn't cause \"\/template\/1\"'s etag to change (CG.Order.Test.Api.Cest.TemplateEntityCest.checkDuplicateClassNameETagIssue)"
}{
    "event": "test",
    "suite": "api",
    "test": "check getting other entities doesn't cause \"\/template\/1\"'s etag to change (CG.Order.Test.Api.Cest.TemplateEntityCest.checkDuplicateClassNameETagIssue)",
    "status": "pass",
    "time": 2.2961320877075,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "update the primary entity without etag (CG.Order.Test.Api.Cest.TemplateEntityCest.updateEntityWithoutEtagShouldFail)"
}{
    "event": "test",
    "suite": "api",
    "test": "update the primary entity without etag (CG.Order.Test.Api.Cest.TemplateEntityCest.updateEntityWithoutEtagShouldFail)",
    "status": "pass",
    "time": 0.37778091430664,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "update the primary entity with empty etag (CG.Order.Test.Api.Cest.TemplateEntityCest.updateEntityWithEmptyEtagShouldFail)"
}{
    "event": "test",
    "suite": "api",
    "test": "update the primary entity with empty etag (CG.Order.Test.Api.Cest.TemplateEntityCest.updateEntityWithEmptyEtagShouldFail)",
    "status": "pass",
    "time": 0.37215399742126,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check put children endpoints with wrong parent idwith e tags (CG.Order.Test.Api.Cest.TemplateEntityCest.checkPutChildrenEndpointsWithWrongParentIdwithETags)"
}{
    "event": "test",
    "suite": "api",
    "test": "check put children endpoints with wrong parent idwith e tags (CG.Order.Test.Api.Cest.TemplateEntityCest.checkPutChildrenEndpointsWithWrongParentIdwithETags)",
    "status": "pass",
    "time": 0.22952890396118,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "view a collection (CG.Order.Test.Api.Cest.UserPreference.viewCollection)"
}{
    "event": "test",
    "suite": "api",
    "test": "view a collection (CG.Order.Test.Api.Cest.UserPreference.viewCollection)",
    "status": "pass",
    "time": 0.38368892669678,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "view a collection by page (CG.Order.Test.Api.Cest.UserPreference.checkPagination)"
}{
    "event": "test",
    "suite": "api",
    "test": "view a collection by page (CG.Order.Test.Api.Cest.UserPreference.checkPagination)",
    "status": "pass",
    "time": 0.62958288192749,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "view a collection by page (CG.Order.Test.Api.Cest.UserPreference.checkCollectionCache)"
}{
    "event": "test",
    "suite": "api",
    "test": "view a collection by page (CG.Order.Test.Api.Cest.UserPreference.checkCollectionCache)",
    "status": "pass",
    "time": 0.43846201896667,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "has filters (CG.Order.Test.Api.Cest.UserPreference.hasFilters)"
}{
    "event": "test",
    "suite": "api",
    "test": "has filters (CG.Order.Test.Api.Cest.UserPreference.hasFilters)",
    "status": "pass",
    "time": 0.31785702705383,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check filters (CG.Order.Test.Api.Cest.UserPreference.checkFilters)"
}{
    "event": "test",
    "suite": "api",
    "test": "check filters (CG.Order.Test.Api.Cest.UserPreference.checkFilters)",
    "status": "pass",
    "time": 0.29383993148804,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check multi filters (CG.Order.Test.Api.Cest.UserPreference.checkMultiFilters)"
}{
    "event": "test",
    "suite": "api",
    "test": "check multi filters (CG.Order.Test.Api.Cest.UserPreference.checkMultiFilters)",
    "status": "pass",
    "time": 0.27851104736328,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "create entity (CG.Order.Test.Api.Cest.UserPreference.createEntity)"
}{
    "event": "test",
    "suite": "api",
    "test": "create entity (CG.Order.Test.Api.Cest.UserPreference.createEntity)",
    "status": "pass",
    "time": 0.29278802871704,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "create entity then get (CG.Order.Test.Api.Cest.UserPreference.createEntityThenGet)"
}{
    "event": "test",
    "suite": "api",
    "test": "create entity then get (CG.Order.Test.Api.Cest.UserPreference.createEntityThenGet)",
    "status": "pass",
    "time": 0.24916291236877,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "create entity then get collection (CG.Order.Test.Api.Cest.UserPreference.createEntityThenGetCollection)"
}{
    "event": "test",
    "suite": "api",
    "test": "create entity then get collection (CG.Order.Test.Api.Cest.UserPreference.createEntityThenGetCollection)",
    "status": "pass",
    "time": 0.28206610679626,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "create entity then get collection with filters (CG.Order.Test.Api.Cest.UserPreference.createEntityThenGetCollectionWithFilters)"
}{
    "event": "test",
    "suite": "api",
    "test": "create entity then get collection with filters (CG.Order.Test.Api.Cest.UserPreference.createEntityThenGetCollectionWithFilters)",
    "status": "pass",
    "time": 0.26708388328552,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "create entity put entity then get collection (CG.Order.Test.Api.Cest.UserPreference.createEntityPutEntityThenGetCollection)"
}{
    "event": "test",
    "suite": "api",
    "test": "create entity put entity then get collection (CG.Order.Test.Api.Cest.UserPreference.createEntityPutEntityThenGetCollection)",
    "status": "pass",
    "time": 0.26098203659058,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "create empty entity (CG.Order.Test.Api.Cest.UserPreference.createEmptyEntity)"
}{
    "event": "test",
    "suite": "api",
    "test": "create empty entity (CG.Order.Test.Api.Cest.UserPreference.createEmptyEntity)",
    "status": "pass",
    "time": 0.29908895492554,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "create invalid entity (CG.Order.Test.Api.Cest.UserPreference.createInvalidEntity)"
}{
    "event": "test",
    "suite": "api",
    "test": "create invalid entity (CG.Order.Test.Api.Cest.UserPreference.createInvalidEntity)",
    "status": "pass",
    "time": 0.29599905014038,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "create entity with additional fields (CG.Order.Test.Api.Cest.UserPreference.createEntityWithAdditionalFields)"
}{
    "event": "test",
    "suite": "api",
    "test": "create entity with additional fields (CG.Order.Test.Api.Cest.UserPreference.createEntityWithAdditionalFields)",
    "status": "pass",
    "time": 0.25025010108948,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "create entity with invalid date range (CG.Order.Test.Api.Cest.UserPreference.createEntityWithInvalidDateRange)"
}{
    "event": "test",
    "suite": "api",
    "test": "create entity with invalid date range (CG.Order.Test.Api.Cest.UserPreference.createEntityWithInvalidDateRange)",
    "status": "pass",
    "time": 0.26189994812012,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "test single date filter (CG.Order.Test.Api.Cest.UserPreference.testSingleDateFilter)"
}{
    "event": "test",
    "suite": "api",
    "test": "test single date filter (CG.Order.Test.Api.Cest.UserPreference.testSingleDateFilter)",
    "status": "pass",
    "time": 0.29018378257751,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "test date range filter (CG.Order.Test.Api.Cest.UserPreference.testDateRangeFilter)"
}{
    "event": "test",
    "suite": "api",
    "test": "test date range filter (CG.Order.Test.Api.Cest.UserPreference.testDateRangeFilter)",
    "status": "pass",
    "time": 0.30066895484924,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "test range filters (CG.Order.Test.Api.Cest.UserPreference.testRangeFilters)"
}{
    "event": "test",
    "suite": "api",
    "test": "test range filters (CG.Order.Test.Api.Cest.UserPreference.testRangeFilters)",
    "status": "pass",
    "time": 0.28587007522583,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "test array filters dont accept string (CG.Order.Test.Api.Cest.UserPreference.testArrayFiltersDontAcceptString)"
}{
    "event": "test",
    "suite": "api",
    "test": "test array filters dont accept string (CG.Order.Test.Api.Cest.UserPreference.testArrayFiltersDontAcceptString)",
    "status": "pass",
    "time": 0.26214623451233,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "test string filters dont accept array (CG.Order.Test.Api.Cest.UserPreference.testStringFiltersDontAcceptArray)"
}{
    "event": "test",
    "suite": "api",
    "test": "test string filters dont accept array (CG.Order.Test.Api.Cest.UserPreference.testStringFiltersDontAcceptArray)",
    "status": "pass",
    "time": 0.2866268157959,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check search term filters (CG.Order.Test.Api.Cest.UserPreference.checkSearchTermFilters)"
}{
    "event": "test",
    "suite": "api",
    "test": "check search term filters (CG.Order.Test.Api.Cest.UserPreference.checkSearchTermFilters)",
    "status": "pass",
    "time": 0.27708601951599,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "see a resource endpoint contains hal (CG.Order.Test.Api.Cest.UserPreference.viewInHal)"
}{
    "event": "test",
    "suite": "api",
    "test": "see a resource endpoint contains hal (CG.Order.Test.Api.Cest.UserPreference.viewInHal)",
    "status": "pass",
    "time": 0.33166599273682,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check only the allowed methods are allowed (CG.Order.Test.Api.Cest.UserPreference.checkAllowedMethods)"
}{
    "event": "test",
    "suite": "api",
    "test": "check only the allowed methods are allowed (CG.Order.Test.Api.Cest.UserPreference.checkAllowedMethods)",
    "status": "pass",
    "time": 0.49940490722656,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check the up link is set as the parents url (CG.Order.Test.Api.Cest.UserPreference.checkUplink)"
}{
    "event": "test",
    "suite": "api",
    "test": "check the up link is set as the parents url (CG.Order.Test.Api.Cest.UserPreference.checkUplink)",
    "status": "pass",
    "time": 0.34267997741699,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check headers for head request and that body is empty (CG.Order.Test.Api.Cest.UserPreference.checkHeadRequest)"
}{
    "event": "test",
    "suite": "api",
    "test": "check headers for head request and that body is empty (CG.Order.Test.Api.Cest.UserPreference.checkHeadRequest)",
    "status": "pass",
    "time": 0.44531607627869,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "create entity then get collection multiple times (CG.Order.Test.Api.Cest.UserPreference.createEntityThenGetCollectionMultipleTimes)"
}{
    "event": "test",
    "suite": "api",
    "test": "create entity then get collection multiple times (CG.Order.Test.Api.Cest.UserPreference.createEntityThenGetCollectionMultipleTimes)",
    "status": "pass",
    "time": 0.28462195396423,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "create entity then get collection multiple times from existing (CG.Order.Test.Api.Cest.UserPreference.createEntityThenGetCollectionMultipleTimesFromExisting)"
}{
    "event": "test",
    "suite": "api",
    "test": "create entity then get collection multiple times from existing (CG.Order.Test.Api.Cest.UserPreference.createEntityThenGetCollectionMultipleTimesFromExisting)",
    "status": "pass",
    "time": 0.29833793640137,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "view a collection (CG.Order.Test.Api.Cest.UserPreference.viewCollectionAll)"
}{
    "event": "test",
    "suite": "api",
    "test": "view a collection (CG.Order.Test.Api.Cest.UserPreference.viewCollectionAll)",
    "status": "pass",
    "time": 0.3386390209198,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "view a collection (CG.Order.Test.Api.Cest.UserPreference.viewCollectionZeroLimit)"
}{
    "event": "test",
    "suite": "api",
    "test": "view a collection (CG.Order.Test.Api.Cest.UserPreference.viewCollectionZeroLimit)",
    "status": "pass",
    "time": 0.40306782722473,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check filters pagination (CG.Order.Test.Api.Cest.UserPreference.checkFiltersPagination)"
}{
    "event": "test",
    "suite": "api",
    "test": "check filters pagination (CG.Order.Test.Api.Cest.UserPreference.checkFiltersPagination)",
    "status": "pass",
    "time": 0.28620505332947,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "test timestamp filter (CG.Order.Test.Api.Cest.UserPreference.testTimestampFilter)"
}{
    "event": "test",
    "suite": "api",
    "test": "test timestamp filter (CG.Order.Test.Api.Cest.UserPreference.testTimestampFilter)",
    "status": "pass",
    "time": 0.29090905189514,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "test timestamp range filters (CG.Order.Test.Api.Cest.UserPreference.testTimestampRangeFilters)"
}{
    "event": "test",
    "suite": "api",
    "test": "test timestamp range filters (CG.Order.Test.Api.Cest.UserPreference.testTimestampRangeFilters)",
    "status": "pass",
    "time": 0.26671314239502,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "view the primary entity (CG.Order.Test.Api.Cest.UserPreferenceCest.viewPrimaryEntity)"
}{
    "event": "test",
    "suite": "api",
    "test": "view the primary entity (CG.Order.Test.Api.Cest.UserPreferenceCest.viewPrimaryEntity)",
    "status": "pass",
    "time": 0.36856698989868,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "view the secondary entity (CG.Order.Test.Api.Cest.UserPreferenceCest.viewSecondaryEntity)"
}{
    "event": "test",
    "suite": "api",
    "test": "view the secondary entity (CG.Order.Test.Api.Cest.UserPreferenceCest.viewSecondaryEntity)",
    "status": "pass",
    "time": 0.34387803077698,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check i can not view a non existent entity (CG.Order.Test.Api.Cest.UserPreferenceCest.viewNonExistentEntity)"
}{
    "event": "test",
    "suite": "api",
    "test": "check i can not view a non existent entity (CG.Order.Test.Api.Cest.UserPreferenceCest.viewNonExistentEntity)",
    "status": "pass",
    "time": 0.33408689498901,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "update primary entity (CG.Order.Test.Api.Cest.UserPreferenceCest.updatePrimaryEntity)"
}{
    "event": "test",
    "suite": "api",
    "test": "update primary entity (CG.Order.Test.Api.Cest.UserPreferenceCest.updatePrimaryEntity)",
    "status": "pass",
    "time": 0.23701596260071,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "update primary entity then get (CG.Order.Test.Api.Cest.UserPreferenceCest.updatePrimaryEntityThenGet)"
}{
    "event": "test",
    "suite": "api",
    "test": "update primary entity then get (CG.Order.Test.Api.Cest.UserPreferenceCest.updatePrimaryEntityThenGet)",
    "status": "pass",
    "time": 0.28352808952332,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "update primary entity with empty data (CG.Order.Test.Api.Cest.UserPreferenceCest.updatePrimaryEntityWithEmptyData)"
}{
    "event": "test",
    "suite": "api",
    "test": "update primary entity with empty data (CG.Order.Test.Api.Cest.UserPreferenceCest.updatePrimaryEntityWithEmptyData)",
    "status": "pass",
    "time": 0.26278710365295,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "update primary entity with invalid data (CG.Order.Test.Api.Cest.UserPreferenceCest.updatePrimaryEntityWithInvalidData)"
}{
    "event": "test",
    "suite": "api",
    "test": "update primary entity with invalid data (CG.Order.Test.Api.Cest.UserPreferenceCest.updatePrimaryEntityWithInvalidData)",
    "status": "pass",
    "time": 0.28676795959473,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "update primary entity with additional fields (CG.Order.Test.Api.Cest.UserPreferenceCest.updatePrimaryEntityWithAdditionalFields)"
}{
    "event": "test",
    "suite": "api",
    "test": "update primary entity with additional fields (CG.Order.Test.Api.Cest.UserPreferenceCest.updatePrimaryEntityWithAdditionalFields)",
    "status": "pass",
    "time": 0.28000688552856,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check i delete the primary entity (CG.Order.Test.Api.Cest.UserPreferenceCest.deletePrimaryEntity)"
}{
    "event": "test",
    "suite": "api",
    "test": "check i delete the primary entity (CG.Order.Test.Api.Cest.UserPreferenceCest.deletePrimaryEntity)",
    "status": "pass",
    "time": 0.3329598903656,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check i delete the primary entity (CG.Order.Test.Api.Cest.UserPreferenceCest.deletePrimaryEntityWithGet)"
}{
    "event": "test",
    "suite": "api",
    "test": "check i delete the primary entity (CG.Order.Test.Api.Cest.UserPreferenceCest.deletePrimaryEntityWithGet)",
    "status": "pass",
    "time": 0.44000887870789,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check i delete the primary entity (CG.Order.Test.Api.Cest.UserPreferenceCest.deletePrimaryEntityWithGetCollection)"
}{
    "event": "test",
    "suite": "api",
    "test": "check i delete the primary entity (CG.Order.Test.Api.Cest.UserPreferenceCest.deletePrimaryEntityWithGetCollection)",
    "status": "pass",
    "time": 0.43368697166443,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check i can not delete a non existent entity (CG.Order.Test.Api.Cest.UserPreferenceCest.deleteNonExistentEntity)"
}{
    "event": "test",
    "suite": "api",
    "test": "check i can not delete a non existent entity (CG.Order.Test.Api.Cest.UserPreferenceCest.deleteNonExistentEntity)",
    "status": "pass",
    "time": 0.3579421043396,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check entity embed (CG.Order.Test.Api.Cest.UserPreferenceCest.checkEntityEmbed)"
}{
    "event": "test",
    "suite": "api",
    "test": "check entity embed (CG.Order.Test.Api.Cest.UserPreferenceCest.checkEntityEmbed)",
    "status": "pass",
    "time": 0.24814200401306,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check children endpoints with wrong parent id (CG.Order.Test.Api.Cest.UserPreferenceCest.checkChildrenEndpointsWithWrongParentId)"
}{
    "event": "test",
    "suite": "api",
    "test": "check children endpoints with wrong parent id (CG.Order.Test.Api.Cest.UserPreferenceCest.checkChildrenEndpointsWithWrongParentId)",
    "status": "pass",
    "time": 0.27894306182861,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check put children endpoints with wrong parent id (CG.Order.Test.Api.Cest.UserPreferenceCest.checkPutChildrenEndpointsWithWrongParentId)"
}{
    "event": "test",
    "suite": "api",
    "test": "check put children endpoints with wrong parent id (CG.Order.Test.Api.Cest.UserPreferenceCest.checkPutChildrenEndpointsWithWrongParentId)",
    "status": "pass",
    "time": 0.25588989257812,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "see a resource endpoint contains hal (CG.Order.Test.Api.Cest.UserPreferenceCest.viewInHal)"
}{
    "event": "test",
    "suite": "api",
    "test": "see a resource endpoint contains hal (CG.Order.Test.Api.Cest.UserPreferenceCest.viewInHal)",
    "status": "pass",
    "time": 0.3378758430481,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check only the allowed methods are allowed (CG.Order.Test.Api.Cest.UserPreferenceCest.checkAllowedMethods)"
}{
    "event": "test",
    "suite": "api",
    "test": "check only the allowed methods are allowed (CG.Order.Test.Api.Cest.UserPreferenceCest.checkAllowedMethods)",
    "status": "pass",
    "time": 0.40045690536499,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check the up link is set as the parents url (CG.Order.Test.Api.Cest.UserPreferenceCest.checkUplink)"
}{
    "event": "test",
    "suite": "api",
    "test": "check the up link is set as the parents url (CG.Order.Test.Api.Cest.UserPreferenceCest.checkUplink)",
    "status": "pass",
    "time": 0.35200095176697,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check headers for head request and that body is empty (CG.Order.Test.Api.Cest.UserPreferenceCest.checkHeadRequest)"
}{
    "event": "test",
    "suite": "api",
    "test": "check headers for head request and that body is empty (CG.Order.Test.Api.Cest.UserPreferenceCest.checkHeadRequest)",
    "status": "pass",
    "time": 0.41459012031555,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "has e tag header (CG.Order.Test.Api.Cest.UserPreferenceCest.hasETagHeader)"
}{
    "event": "test",
    "suite": "api",
    "test": "has e tag header (CG.Order.Test.Api.Cest.UserPreferenceCest.hasETagHeader)",
    "status": "pass",
    "time": 0.32424283027649,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "get a 304 when i send the etag on a second get request (CG.Order.Test.Api.Cest.UserPreferenceCest.sendETagGet304)"
}{
    "event": "test",
    "suite": "api",
    "test": "get a 304 when i send the etag on a second get request (CG.Order.Test.Api.Cest.UserPreferenceCest.sendETagGet304)",
    "status": "pass",
    "time": 0.39742207527161,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check that if i send an invalid etag i get the entity (CG.Order.Test.Api.Cest.UserPreferenceCest.sendInvalidETagGetNewETag)"
}{
    "event": "test",
    "suite": "api",
    "test": "check that if i send an invalid etag i get the entity (CG.Order.Test.Api.Cest.UserPreferenceCest.sendInvalidETagGetNewETag)",
    "status": "pass",
    "time": 0.37938499450684,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "update the primary entity with matching etag (CG.Order.Test.Api.Cest.UserPreferenceCest.updateEntityWithETag)"
}{
    "event": "test",
    "suite": "api",
    "test": "update the primary entity with matching etag (CG.Order.Test.Api.Cest.UserPreferenceCest.updateEntityWithETag)",
    "status": "pass",
    "time": 0.43182706832886,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "update the primary entity with matching etag then get (CG.Order.Test.Api.Cest.UserPreferenceCest.updateEntityWithETagThenGet)"
}{
    "event": "test",
    "suite": "api",
    "test": "update the primary entity with matching etag then get (CG.Order.Test.Api.Cest.UserPreferenceCest.updateEntityWithETagThenGet)",
    "status": "pass",
    "time": 3.1537079811096,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "update the primary entity with matching etag and identical data (CG.Order.Test.Api.Cest.UserPreferenceCest.updateEntityWithETagAndIdenticalData)"
}{
    "event": "test",
    "suite": "api",
    "test": "update the primary entity with matching etag and identical data (CG.Order.Test.Api.Cest.UserPreferenceCest.updateEntityWithETagAndIdenticalData)",
    "status": "pass",
    "time": 0.4816780090332,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check i can't update the primary entity with an invalid etag (CG.Order.Test.Api.Cest.UserPreferenceCest.updateEntityWithInvalidETag)"
}{
    "event": "test",
    "suite": "api",
    "test": "check i can't update the primary entity with an invalid etag (CG.Order.Test.Api.Cest.UserPreferenceCest.updateEntityWithInvalidETag)",
    "status": "pass",
    "time": 0.36460900306702,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check i can't update the primary entity with an invalid etag and identical data (CG.Order.Test.Api.Cest.UserPreferenceCest.updateEntityWithInvalidETagAndIdenticalData)"
}{
    "event": "test",
    "suite": "api",
    "test": "check i can't update the primary entity with an invalid etag and identical data (CG.Order.Test.Api.Cest.UserPreferenceCest.updateEntityWithInvalidETagAndIdenticalData)",
    "status": "pass",
    "time": 0.34569907188416,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check getting other entities doesn't cause \"\/userpreference\/1\"'s etag to change (CG.Order.Test.Api.Cest.UserPreferenceCest.checkDuplicateClassNameETagIssue)"
}{
    "event": "test",
    "suite": "api",
    "test": "check getting other entities doesn't cause \"\/userpreference\/1\"'s etag to change (CG.Order.Test.Api.Cest.UserPreferenceCest.checkDuplicateClassNameETagIssue)",
    "status": "pass",
    "time": 2.3011400699615,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "update the primary entity without etag (CG.Order.Test.Api.Cest.UserPreferenceCest.updateEntityWithoutEtagShouldFail)"
}{
    "event": "test",
    "suite": "api",
    "test": "update the primary entity without etag (CG.Order.Test.Api.Cest.UserPreferenceCest.updateEntityWithoutEtagShouldFail)",
    "status": "pass",
    "time": 0.35604596138,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "update the primary entity with empty etag (CG.Order.Test.Api.Cest.UserPreferenceCest.updateEntityWithEmptyEtagShouldFail)"
}{
    "event": "test",
    "suite": "api",
    "test": "update the primary entity with empty etag (CG.Order.Test.Api.Cest.UserPreferenceCest.updateEntityWithEmptyEtagShouldFail)",
    "status": "pass",
    "time": 0.36033606529236,
    "trace": [

    ],
    "message": "",
    "output": ""
}{
    "event": "testStart",
    "suite": "api",
    "test": "check put children endpoints with wrong parent idwith e tags (CG.Order.Test.Api.Cest.UserPreferenceCest.checkPutChildrenEndpointsWithWrongParentIdwithETags)"
}{
    "event": "test",
    "suite": "api",
    "test": "check put children endpoints with wrong parent idwith e tags (CG.Order.Test.Api.Cest.UserPreferenceCest.checkPutChildrenEndpointsWithWrongParentIdwithETags)",
    "status": "pass",
    "time": 0.27312994003296,
    "trace": [

    ],
    "message": "",
    "output": ""
}